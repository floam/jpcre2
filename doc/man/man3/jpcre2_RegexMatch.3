.TH "jpcre2::RegexMatch" 3 "Wed Sep 7 2016" "Version 10.25.02" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jpcre2::RegexMatch \- Provides the \fBRegexMatch::match()\fP function to perform regex matching\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <jpcre2\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRegexMatch\fP & \fBsetNumberedSubstringVector\fP (\fBVecNum\fP *v)"
.br
.RI "\fISet a pointer to the numbered substring vector of type \fBjpcre2::VecNum\fP\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBsetNamedSubstringVector\fP (\fBVecNas\fP *v)"
.br
.RI "\fISet a pointer to the named substring vector of type \fBjpcre2::VecNas\fP\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBsetNameToNumberMapVector\fP (\fBVecNtN\fP *v)"
.br
.RI "\fISet a pointer to the name to number map vector of type \fBjpcre2::VecNtN\fP\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBsetSubject\fP (const \fBString\fP &s)"
.br
.RI "\fISet the subject string \fBm_subject\fP\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBsetModifier\fP (const \fBString\fP &s)"
.br
.RI "\fISet the modifier (overwrites existing JPCRE2 and PCRE2 option)\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBsetJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fISet JPCRE2 option \fBjpcre2_match_opts\fP (overwrite existing option) \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBsetPcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fISet PCRE2 option \fBmatch_opts\fP (overwrite existing option) \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBsetFindAll\fP (bool x=true)"
.br
.RI "\fISet whether to perform global match\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBchangeModifier\fP (const \fBString\fP &mod, bool x)"
.br
.RI "\fIParse modifier and add/remove equivalent PCRE2 and JPCRE2 options\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBchangeJpcre2Option\fP (\fBUint\fP opt, bool x)"
.br
.RI "\fIAdd or remove a JPCRE2 option\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBchangePcre2Option\fP (\fBUint\fP opt, bool x)"
.br
.RI "\fIAdd or remove a PCRE2 option\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBaddModifier\fP (const \fBString\fP &mod)"
.br
.RI "\fIParse modifier string and add equivalent PCRE2 and JPCRE2 options\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBaddJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fIAdd option to existing JPCRE2 options \fBjpcre2_match_opts\fP\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBaddPcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fIAdd option to existing PCRE2 options \fBmatch_opts\fP\&. \fP"
.ti -1c
.RI "\fBSIZE_T\fP \fBmatch\fP (void)"
.br
.RI "\fIStore match result in vectors and return the number of matches\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBgetNumberedSubstrings\fP (int rc, pcre2_match_data *match_data)"
.br
.RI "\fIPopulate \fBnum_map0\fP with numbered substrings\&. \fP"
.ti -1c
.RI "void \fBgetNamedSubstrings\fP (int namecount, int name_entry_size, PCRE2_SPTR tabptr, pcre2_match_data *match_data)"
.br
.RI "\fIPopulate \fBnas_map0\fP and/or \fBntn_map0\fP with named substring and/or name to number mapping\&. \fP"
.ti -1c
.RI "void \fBpushMapsIntoVectors\fP (void)"
.br
.RI "\fIPush maps into the vectors pointed by \fBvec_num\fP, \fBvec_nas\fP and \fBvec_ntn\fP and thus store match results in them\&. \fP"
.ti -1c
.RI "void \fBinit_vars\fP ()"
.br
.RI "\fIInitialize class variables\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP ()"
.br
.RI "\fIDefault constructor\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP (const \fBRegexMatch\fP &)"
.br
.RI "\fIThis is a copy constructor which is only used to prevent public object creation\&. \fP"
.ti -1c
.RI "\fB~RegexMatch\fP ()"
.br
.RI "\fIDestructor\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBRegex\fP * \fBre\fP"
.br
.RI "\fIThis is used to access private members in \fBRegex\fP\&. \fP"
.ti -1c
.RI "\fBString\fP \fBm_subject\fP"
.br
.RI "\fISubject string for match\&. \fP"
.ti -1c
.RI "\fBUint\fP \fBmatch_opts\fP"
.br
.RI "\fIPCRE2 options for pcre2_match() (PCRE2 internal function) \fP"
.ti -1c
.RI "\fBUint\fP \fBjpcre2_match_opts\fP"
.br
.RI "\fIJPCRE2 options for match\&. \fP"
.ti -1c
.RI "\fBVecNum\fP * \fBvec_num\fP"
.br
.RI "\fIPointer to vector that will store the numbered substring maps\&. \fP"
.ti -1c
.RI "\fBVecNas\fP * \fBvec_nas\fP"
.br
.RI "\fIPointer to vector that will store the named substring maps\&. \fP"
.ti -1c
.RI "\fBVecNtN\fP * \fBvec_ntn\fP"
.br
.RI "\fIPointer to vector that will store the name to number maps\&. \fP"
.ti -1c
.RI "\fBMapNum\fP * \fBnum_map0\fP"
.br
.RI "\fIPointer to map that will store numbered substrings temporarily\&. \fP"
.ti -1c
.RI "\fBMapNas\fP * \fBnas_map0\fP"
.br
.RI "\fIPointer to map that will store named substrings temporarily\&. \fP"
.ti -1c
.RI "\fBMapNtN\fP * \fBntn_map0\fP"
.br
.RI "\fIPointer to map that will store name to number mapping temporarily\&. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBRegex\fP"
.br
.RI "\fIDefine class \fBRegex\fP as friend and thus allow \fBRegex\fP to create object of this class\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Provides the \fBRegexMatch::match()\fP function to perform regex matching\&. 

Provides chained methods to set various options\&.
.PP
All constructors of this class are private\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "jpcre2::RegexMatch::RegexMatch ()\fC [inline]\fP, \fC [private]\fP"

.PP
Default constructor\&. Initialize class variables\&. 
.SS "jpcre2::RegexMatch::RegexMatch (const \fBRegexMatch\fP &)\fC [inline]\fP, \fC [private]\fP"

.PP
This is a copy constructor which is only used to prevent public object creation\&. No need to implement it completely\&. 
.SS "jpcre2::RegexMatch::~RegexMatch ()\fC [inline]\fP, \fC [private]\fP"

.PP
Destructor\&. Deletes the temporary maps that were created to store substrings 
.SH "Member Function Documentation"
.PP 
.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::addJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Add option to existing JPCRE2 options \fBjpcre2_match_opts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::addJpcre2Option()\fP 
.PP
\fBRegex::addJpcre2Option()\fP 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::addModifier (const \fBString\fP & mod)\fC [inline]\fP"

.PP
Parse modifier string and add equivalent PCRE2 and JPCRE2 options\&. This is just a wrapper of the original function \fBRegexMatch::changeModifier()\fP provided for convenience\&.
.PP
\fBNote:\fP If speed of operation is very crucial, use \fBRegexMatch::addJpcre2Option()\fP and \fBRegexMatch::addPcre2Option()\fP with equivalent options\&. It will be faster that way\&. 
.PP
\fBParameters:\fP
.RS 4
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::addModifier()\fP 
.PP
\fBRegex::addModifier()\fP 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::addPcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Add option to existing PCRE2 options \fBmatch_opts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::addPcre2Option()\fP 
.PP
\fBRegex::addPcre2Option()\fP 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::changeJpcre2Option (\fBUint\fP opt, bool x)\fC [inline]\fP"

.PP
Add or remove a JPCRE2 option\&. 
.PP
\fBParameters:\fP
.RS 4
\fIopt\fP JPCRE2 option value 
.br
\fIx\fP Add the option if it's true, remove otherwise\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::changeJpcre2Option()\fP 
.PP
\fBRegex::changeJpcre2Option()\fP 
.RE
.PP

.SS "\fBjpcre2::RegexMatch\fP & jpcre2::RegexMatch::changeModifier (const \fBString\fP & mod, bool x)"

.PP
Parse modifier and add/remove equivalent PCRE2 and JPCRE2 options\&. After a call to this function \fBmatch_opts\fP and \fBjpcre2_match_opts\fP will be properly set\&. This function does not initialize or re-initialize options\&. If you want to set options from scratch, initialize them to their default values before calling this function\&.
.PP
\fBNote:\fP If speed of operation is very crucial, use \fBRegexMatch::changeJpcre2Option()\fP and \fBRegexMatch::changePcre2Option()\fP with equivalent options\&. It will be faster that way\&. 
.PP
\fBParameters:\fP
.RS 4
\fImod\fP Modifier string 
.br
\fIx\fP Whether to add or remove options 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::changeModifier()\fP 
.PP
\fBRegex::changeModifier()\fP 
.RE
.PP

.PP
References jpcre2::Regex::changeJpcre2Option(), jpcre2::Regex::changePcre2Option(), jpcre2::ERROR_ALL, jpcre2::ERROR::INVALID_MODIFIER, jpcre2::MOD::M_N, jpcre2::MOD::M_V, jpcre2::MOD::MJ_N, jpcre2::MOD::MJ_V, jpcre2::utils::throwException(), and jpcre2::VALIDATE_MODIFIER\&.
.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::changePcre2Option (\fBUint\fP opt, bool x)\fC [inline]\fP"

.PP
Add or remove a PCRE2 option\&. 
.PP
\fBParameters:\fP
.RS 4
\fIopt\fP PCRE2 option value 
.br
\fIx\fP Add the option if it's true, remove otherwise\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::changePcre2Option()\fP 
.PP
\fBRegex::changePcre2Option()\fP 
.RE
.PP

.SS "\fBjpcre2::SIZE_T\fP jpcre2::RegexMatch::match (void)"

.PP
Store match result in vectors and return the number of matches\&. Clear the specified vectors (\fBvec_num\fP, \fBvec_nas\fP, \fBvec_ntn\fP) and re-fill them with match results, then return the match count\&.
.PP
The size of each vectors should be equal to the match count\&. The return value is guaranteed to give you the right match count\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBRegex::error_number\fP\fP Throws exception (error number) if error occurs during match\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Number of matches found 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBSIZE_T\fP \fBRegex::match(const String& s)\fP 
.PP
\fBSIZE_T\fP \fBRegex::match(const String& s, const String& mod)\fP 
.RE
.PP

.PP
References jpcre2::FIND_ALL, and jpcre2::utils::throwException()\&.
.PP
Referenced by jpcre2::Regex::match()\&.
.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::setFindAll (bool x = \fCtrue\fP)\fC [inline]\fP"

.PP
Set whether to perform global match\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP True or False 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP

.PP
References jpcre2::FIND_ALL\&.
.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::setJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Set JPCRE2 option \fBjpcre2_match_opts\fP (overwrite existing option) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::setJpcre2Option()\fP 
.PP
\fBRegex::setJpcre2Option()\fP 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::setModifier (const \fBString\fP & s)\fC [inline]\fP"

.PP
Set the modifier (overwrites existing JPCRE2 and PCRE2 option)\&. Re-initializes the option bits for PCRE2 and JPCRE2 options, then parses the modifier to set their equivalent options\&.
.PP
\fBNote:\fP If speed of operation is very crucial, use \fBRegexMatch::setJpcre2Option()\fP and \fBRegexMatch::setPcre2Option()\fP with equivalent options\&. It will be faster that way\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::setModifier()\fP 
.PP
\fBRegex::setModifier()\fP 
.RE
.PP

.PP
Referenced by jpcre2::Regex::match()\&.
.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::setNamedSubstringVector (\fBVecNas\fP * v)\fC [inline]\fP"

.PP
Set a pointer to the named substring vector of type \fBjpcre2::VecNas\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP \fBvec_nas\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::setNameToNumberMapVector (\fBVecNtN\fP * v)\fC [inline]\fP"

.PP
Set a pointer to the name to number map vector of type \fBjpcre2::VecNtN\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP \fBvec_ntn\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::setNumberedSubstringVector (\fBVecNum\fP * v)\fC [inline]\fP"

.PP
Set a pointer to the numbered substring vector of type \fBjpcre2::VecNum\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIv\fP \fBvec_num\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::setPcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Set PCRE2 option \fBmatch_opts\fP (overwrite existing option) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::setPcre2Option()\fP 
.PP
\fBRegex::setPcre2Option()\fP 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::RegexMatch::setSubject (const \fBString\fP & s)\fC [inline]\fP"

.PP
Set the subject string \fBm_subject\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::setSubject()\fP 
.RE
.PP

.PP
Referenced by jpcre2::Regex::match()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
