.TH "md_README" 3 "Mon Sep 5 2016" "Version 10.25.01" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_README \- README 
\fC\fP
.PP
 PCRE2 is the name used for a revised API for the PCRE library, which is a set of functions, written in C, that implement regular expression pattern matching using the same syntax and semantics as Perl, with just a few differences\&. Some features that appeared in Python and the original PCRE before they appeared in Perl are also available using the Python syntax\&.
.PP
This provides some C++ wrapper functions to provide some useful utilities like regex match and regex replace\&.
.PP
 #Requirements:
.PP
.IP "1." 4
PCRE2 library (\fCversion >=10\&.21\fP)\&.
.PP
.PP
If the required PCRE2 version is not available in the official channel, download \fCmy fork of the library\fP which will always be kept compatible with JPCRE2\&.
.PP
 #Install/Include:
.PP
It can be installed as a separate library or can be used directly in a project by including the appropriate sources:
.PP
.IP "1." 4
\fBjpcre2\&.h\fP
.IP "2." 4
\fBjpcre2\&.cpp\fP
.IP "3." 4
\fBjpcre2_match\&.cpp\fP
.IP "4." 4
\fBjpcre2_replace\&.cpp\fP
.PP
.PP
An example compile/build command with GCC would be:
.PP
.PP
.nf
1 g++ mycpp\&.cpp jpcre2_match\&.cpp jpcre2_replace\&.cpp jpcre2\&.cpp jpcre2\&.h -lpcre2-8
.fi
.PP
.PP
If your PCRE2 library is not in the standard library path, then add the path:
.PP
.PP
.nf
1 g++ -std=c++11 mycpp\&.cpp \&.\&.\&. -L/path/to/your/pcre2/library -lpcre2-8
.fi
.PP
.PP
\fBNote that\fP it requires the PCRE2 library installed in your system\&. If it is not already installed and linked in your compiler, you will need to link it with appropriate path and options\&.
.PP
\fBInstalling JPCRE2 as a library:\fP
.PP
To install it in a Unix based system, run: 
.PP
.nf
1 \&./configure
2 make
3 sudo make install

.fi
.PP
 Now \fC#include <jpcre2\&.h>\fP in your code and build/compile by linking with both JPCRE2 and PCRE2 library\&.
.PP
An example command for GCC would be:
.PP
.PP
.nf
1 g++  mycpp\&.cpp -ljpcre2-8 -lpcre2-8 #sequence is important
.fi
.PP
.PP
If you are in a non-Unix system (e\&.g Windows), build a library from the JPCRE2 sources with your favourite IDE or use it as it is\&.
.PP
\fBNotes:\fP
.PP
.IP "1." 4
\fCPCRE2_CODE_UNIT_WIDTH\fP other than 8 is not supported in this version\&.
.IP "2." 4
To use the \fCPCRE2 POSIX\fP compatible library, add the \fC-lpcre2-posix\fP along with the others\&.
.PP
.PP
#How to code with JPCRE2:
.PP
 
.SS "Compile a pattern"
.PP
\fBFirst create a \fC\fBjpcre2::Regex\fP\fPobject\fP
.PP
(You can use temporary object too, see \fCshort examples\fP)\&.
.PP
This object will hold the pattern, modifiers, compiled pattern, error and warning codes\&.
.PP
.PP
.nf
jpcre2::Regex re;   //Create object
.fi
.PP
 Each object for each regex pattern\&.
.PP
\fBCompile the pattern\fP and catch any error exception:
.PP
.PP
.nf
try{
    re\&.compile()               //Invoke the compile() function
      \&.setPattern(pat)         //set various parameters
      \&.setModifiers("Jin")     //sets the modifier
      \&.addJpcre2Options(0)     //Adds the jpcre2 option
      \&.addPcre2Options(0)      //Adds the pcre2 option
      \&.execute();              //Finally execute it\&.

    //Another way is to use constructor to initialize and compile at the same time:
    jpcre2::Regex re2("pattern2","mSi");  //S is an optimization mod\&.
    jpcre2::Regex re3("pattern3", PCRE2_ANCHORED);
    jpcre2::Regex re4("pattern4", PCRE2_ANCHORED, jpcre2::JIT_COMPILE);
}
catch(int e){
    /*Handle error*/
    std::cout<<re\&.getErrorMessage(e)<<std::endl;
}
.fi
.PP
.PP
Now you can perform match or replace against the pattern\&. Use the \fCmatch()\fP member function to preform regex match and the \fCreplace()\fP member function to perform regex replace\&.
.PP
 
.SS "Match"
.PP
The \fCmatch()\fP member function can take two optional arguments (subject & modifier) and returns an object of the class \fIRegexMatch\fP which then in turn can be used to pass various parameters using available member functions (method chaining) of \fIRegexMatch\fP class\&. The end function in the method chain must be the \fCexecute()\fP function which returns the result (number of matches found)\&.
.PP
\fBPerform match\fP and catch any error exception:
.PP
.PP
.nf
jpcre2::VecNum vec_num;
try{
    size_t count=re\&.match(subject)                               //Invoke the match() function
                   \&.setModifiers(ac_mod)                         //Set various options
                   \&.setNumberedSubstringVector(&vec_num)         //\&.\&.\&.
                   \&.addJpcre2Options(jpcre2::VALIDATE_MODIFIER)  //\&.\&.\&.
                   \&.execute();                                   //Finally execute it\&.
    //vec_num will be populated with maps of numbered substrings\&.
    //count is the total number of matches found
}
catch(int e){
    /*Handle error*/
    std::cout<<re\&.getErrorMessage(e)<<std::endl;
}
.fi
.PP
 \fBIterate through the substrings:\fP
.PP
.PP
.nf
for(size_t i=0;i<vec_num\&.size();++i){
    //i=0 is the first match found, i=1 is the second and so forth
    /*//=>C++11
    for(auto const& ent : vec_num[i]){
        //ent\&.first is the number/position of substring found
        //ent\&.second is the substring itself
        //when ent\&.first is 0, ent\&.second is the total match\&.
    }*/
    for(jpcre2::MapNum::iterator ent=vec_num0[i]\&.begin();ent!=vec_num0[i]\&.end();++ent){
        std::cout<<"\n\t"<<ent->first<<": "<<ent->second<<"\n";
    }
}
.fi
.PP
 \fBAccess a substring\fP for a known position:
.PP
.PP
.nf
std::cout<<vec_num[0][0]; // group 0 in first match
std::cout<<vec_num[0][1]; // group 1 in first match
std::cout<<vec_num[1][0]; // group 0 in second match
.fi
.PP
.PP
\fBTo get named substrings and/or name to number mapping,\fP pass pointer to the appropriate vectors with \fCnamedSubstringVector()\fP and/or \fCnameToNumberMapVector()\fP:
.PP
.PP
.nf
jpcre2::VecNum vec_num;   
jpcre2::VecNas vec_nas;   
jpcre2::VecNtN vec_ntn;   
std::string ac_mod="g";   // g is for global match\&. Equivalent to using setFindAll() or FIND_ALL in addJpcre2Options()
try{
    re\&.match(subject)                               //Invoke the match() function
      \&.setModifiers(ac_mod)                         //Set various options
      \&.setNumberedSubstringVector(&vec_num)         //\&.\&.\&.
      \&.setNamedSubstringVector(&vec_nas)            //\&.\&.\&.
      \&.setNameToNumberMapVector(&vec_ntn)           //\&.\&.\&.
      \&.addJpcre2Options(jpcre2::VALIDATE_MODIFIER)  //\&.\&.\&.
      \&.addPcre2Options(PCRE2_ANCHORED)              //\&.\&.\&.
      \&.execute();                                   //Finally execute it\&.
}
catch(int e){
    /*Handle error*/
    std::cout<<re\&.getErrorMessage(e)<<std::endl;
}
.fi
.PP
 \fBIterating\fP through the vectors and associated maps are the same as the above example for numbered substrings\&. The size of all three vectors are the same and can be accessed in the same way\&.
.PP
\fBAccesing a substring by name:\fP
.PP
.PP
.nf
std::cout<<vec_nas[0]["name"]; // captured group by name in first match
std::cout<<vec_nas[1]["name"]; // captured group by name in second match
.fi
.PP
.PP
\fBGetting the position of a captured group name:\fP
.PP
.PP
.nf
std::cout<<vec_ntn[0]["name"]; // position of captured group 'name' in first match
.fi
.PP
.PP
.SS "Replace/Substitute"
.PP
The \fCreplace()\fP member function can take upto three optional arguments (subject, replacement string and modifier) and returns an object of the class \fIRegexReplace\fP which then in turn can be used to pass various parameters using available member functions (method chaining) of \fIRegexReplace\fP class\&. The end function in the method chain must be the \fCexecute()\fP function which returns the result (replaced string)\&.
.PP
\fBPerform replace\fP and catch any error exception:
.PP
.PP
.nf
try{
    std::cout<<
    re\&.replace()           //Invoke the replace() function
      \&.setSubject(s)       //Set various parameters
      \&.setReplaceWith(s2)  //\&.\&.\&.
      \&.setModifiers("gE")  //\&.\&.\&.
      \&.addJpcre2Options(0) //\&.\&.\&.
      \&.addPcre2Options(0)  //\&.\&.\&.
      \&.execute();          //Finally execute it\&.
    //gE is the modifier passed (global and unknown-unset-empty)\&.
    //Access substrings/captured groups with ${1234},$1234 (for numbered substrings)
    // or ${name} (for named substrings) in the replacement part i\&.e in setReplaceWith()
}
catch(int e){
    /*Handle error*/
    std::cout<<re\&.getErrorMessage(e)<<std::endl;
}
.fi
.PP
 If you pass the size of the resultant string with \fCsetBufferSize()\fP function, make sure it will be enough to store the whole resultant replaced string; otherwise the internal replace function (\fCpcre2_substitute()\fP) will be called \fItwice\fP to adjust the size of the buffer to hold the whole resultant string in order to avoid \fCPCRE2_ERROR_NOMEMORY\fP error\&.
.PP
#Insight:
.PP
Let's take a quick look what's inside and how things are working here:
.PP
.SS "Namespaces:"
.PP
Namespace Details  \fC\fBjpcre2\fP\fP This is the namespace that should be used to access JPCRE2 classes and functions\&. \fCjpcre2::utils\fP Some utility functions used by JPCRE2\&. 
.SS "Classes:"
.PP
Class Details  \fCRegex\fP Main class that holds the key utilities of JPCRE2\&. Every regex needs an object of this class\&. \fCRegexMatch\fP Contains functions to perform regex matching according to the compiled pattern\&. \fCRegexReplace\fP Contains functions to perform replacement according to the compiled pattern\&.  
.SS "Functions at a glance:"
.PP
.PP
.nf

//Constructors
Regex(const String& re, Uint pcre2_opts, Uint opt_bits)
Regex(const String& re, Uint pcre2_opts)
Regex(const String& re, const String& mod)
Regex(const String& re)
Regex(const Regex& r)
Regex()

//Overloaded assignment operator
Regex&              operator=(const Regex& r)

//Getters
String              getModifier()
String              getPattern()
String              getLocale()       
uint32_t            getPcre2Options()
uint32_t            getJpcre2Options()

String              getErrorMessage(int err_num, PCRE2_SIZE err_offset)
String              getErrorMessage(int err_num)
String              getErrorMessage()
String              getWarningMessage()
int                 getErrorNumber()
PCRE2_SIZE          getErrorOffset()

Regex&              compile(const String& re, Uint pcre2_opts, Uint jpcre2_opts)
Regex&              compile(const String& re, Uint pcre2_opts)
Regex&              compile(const String& re, const String& mod)
Regex&              compile(const String& re)
Regex&              compile()

Regex&              setPattern(const String& re)
Regex&              setModifiers(const String& x)
Regex&              setLocale(const String& x)
Regex&              setJpcre2Options(Uint x)
Regex&              setPcre2Options(Uint x)

Regex&              addJpcre2Options(Uint x)
Regex&              addPcre2Options(Uint x)

Regex&              removeJpcre2Options(Uint x)
Regex&              removePcre2Options(Uint x)

void                execute()  //executes the compile operation\&.
void                exec()     //wrapper of execute()

RegexMatch&         match(const String& s, const String& mod)
RegexMatch&         match(const String& s)
RegexMatch&         match()

RegexReplace&       replace(const String& mains, const String& repl, const String& mod)
RegexReplace&       replace(const String& mains,const String& repl)
RegexReplace&       replace(const String& mains)
RegexReplace&       replace()



RegexMatch&         setNumberedSubstringVector(VecNum* vec_num)
RegexMatch&         setNamedSubstringVector(VecNas* vec_nas)
RegexMatch&         setNameToNumberMapVector(VecNtN* vec_ntn)
RegexMatch&         setSubject(const String& s)
RegexMatch&         setModifiers(const String& s)
RegexMatch&         setJpcre2Options(Uint x)
RegexMatch&         setPcre2Options(Uint x)
RegexMatch&         setFindAll(bool x=true)

RegexMatch&         addJpcre2Options(Uint x)
RegexMatch&         addPcre2Options(Uint x)

RegexMatch&         removeJpcre2Options(Uint x)
RegexMatch&         removePcre2Options(Uint x) 

SIZE_T              execute()  //executes the match operation
SIZE_T              exec()     //wrapper of execute()



RegexReplace&       setSubject(const String& s)
RegexReplace&       setReplaceWith(const String& s)
RegexReplace&       setModifiers(const String& s)
RegexReplace&       setBufferSize(PCRE2_SIZE x)
RegexReplace&       setJpcre2Options(Uint x)
RegexReplace&       setPcre2Options(Uint x)
RegexReplace&       addJpcre2Options(Uint x)
RegexReplace&       addPcre2Options(Uint x)
RegexReplace&       removeJpcre2Options(Uint x)
RegexReplace&       removePcre2Options(Uint x)
String              execute() //executes the replacement operation
String              exec()    //wrapper of exec()



String              toString(int a)
String              toString(char a)
String              toString(const char* a)
String              toString(PCRE2_UCHAR* a)
String              getPcre2ErrorMessage(int err_num)
.fi
.PP
.PP
 
.SS "Modifiers:"
.PP
\fBJPCRE2\fP uses modifiers to control various options, type, behavior of the regex and its' interactions with different functions that uses it\&. Two types of modifiers are available: \fIcompile modifiers\fP and \fIaction modifiers\fP:
.PP
 
.SS "Compile modifiers:"
.PP
Modifiers define the behavior of a regex pattern\&. They have more or less the same meaning as the \fCPHP regex modifiers\fP except for \fCe, j and n\fP (marked with \*{*\*} )\&.
.PP
Modifier Details  \fCe\fP\*{*\*}  Unset back-references in the pattern will match to empty strings\&. Equivalent to \fCPCRE2_MATCH_UNSET_BACKREF\fP\&. \fCi\fP Case-insensitive\&. Equivalent to \fCPCRE2_CASELESS\fP option\&. \fCj\fP\*{*\*}  \fC\\u \\U \\x\fP and unset back-referencees will act as JavaScript standard\&. 
.PD 0

.IP "\(bu" 2
\fC\fP matches an upper case 'U' character (by default it causes a compile time error if this option is not set)\&.
.IP "\(bu" 2
\fC\fP matches a lower case 'u' character unless it is followed by four hexadecimal digits, in which case the hexadecimal number defines the code point to match (by default it causes a compile time error if this option is not set)\&.
.IP "\(bu" 2
\fC\fP matches a lower case 'x' character unless it is followed by two hexadecimal digits, in which case the hexadecimal number defines the code point to match (By default, as in Perl, a hexadecimal number is always expected after \fC\fP, but it may have zero, one, or two digits (so, for example, \fC\fP matches a binary zero character followed by z) )\&.
.IP "\(bu" 2
Unset back-references in the pattern will match to empty strings\&.
.PP
\fCm\fP Multi-line regex\&. Equivalent to \fCPCRE2_MULTILINE\fP option\&. \fCn\fP\*{*\*}  | Enable Unicode support for \fC\\w \\d\fP etc\&.\&.\&. in pattern\&. Equivalent to \fCPCRE2_UTF | PCRE2_UCP\fP\&. \fCs\fP | If this modifier is set, a dot meta-character in the pattern matches all characters, including newlines\&. Equivalent to \fCPCRE2_DOTALL\fP option\&. \fCu\fP | Enable UTF support\&.Treat pattern and subjects as UTF strings\&. It is equivalent to \fCPCRE2_UTF\fP option\&. \fCx\fP | Whitespace data characters in the pattern are totally ignored except when escaped or inside a character class, enables commentary in pattern\&. Equivalent to \fCPCRE2_EXTENDED\fP option\&. \fCA\fP | Match only at the first position\&. It is equivalent to \fCPCRE2_ANCHORED\fP option\&. \fCD\fP | A dollar meta-character in the pattern matches only at the end of the subject string\&. Without this modifier, a dollar also matches immediately before the final character if it is a newline (but not before any other newlines)\&. This modifier is ignored if \fIm\fP modifier is set\&. Equivalent to \fCPCRE2_DOLLAR_ENDONLY\fP option\&. \fCJ\fP | Allow duplicate names for subpatterns\&. Equivalent to \fCPCRE2_DUPNAMES\fP option\&. \fCS\fP | When a pattern is going to be used several times, it is worth spending more time analyzing it in order to speed up the time taken for matching/replacing\&. It may also be beneficial for a very long subject string or pattern\&. Equivalent to an extra compilation with JIT_COMPILER with the option \fCPCRE2_JIT_COMPLETE\fP\&. \fCU\fP | This modifier inverts the 'greediness' of the quantifiers so that they are not greedy by default, but become greedy if followed by \fC?\fP\&. Equivalent to \fCPCRE2_UNGREEDY\fP option\&.
.PP
.SS "Action modifiers:"
.PP
These modifiers are not compiled in the regex itself, rather it is used per call of each match or replace function\&.
.PP
Modifier Details  \fCA\fP Match at start\&. Equivalent to \fCPCRE2_ANCHORED\fP\&. Can be used in match operation\&. Setting this option only at match time (i\&.e regex was not compiled with this option) will disable optimization during match time\&. \fCe\fP Replaces unset group with empty string\&. Equivalent to \fCPCRE2_SUBSTITUTE_UNSET_EMPTY\fP\&. Can be used in replace operation\&. \fCE\fP | Extension of \fCe\fP modifier\&. Sets even unknown groups to empty string\&. Equivalent to \fCPCRE2_SUBSTITUTE_UNSET_EMPTY | PCRE2_SUBSTITUTE_UNKNOWN_UNSET\fP\&. \fCg\fP | Global\&. Will perform global matching or replacement if passed\&. \fCx\fP | Extended replacement operation\&. It enables some Bash like features: \fC${<n>:-<string>}\fP and \fC${<n>:+<string1>:<string2>}\fP\&.
.br
\fC<n>\fP may be a group number or a name\&. The first form specifies a default value\&. If group \fC<n>\fP is set, its value is inserted; if not, \fC<string>\fP is expanded and the result is inserted\&. The second form specifies strings that are expanded and inserted when group \fC<n>\fP is set or unset, respectively\&. The first form is just a convenient shorthand for \fC${<n>:+${<n>}:<string>}\fP\&.
.PP
.PP
.SS "JPCRE2 options:"
.PP
These options are meaningful only for the \fBJPCRE2\fP library itself not the original \fBPCRE2\fP library\&. We use the \fCaddJpcre2Options()\fP function to pass these options\&.
.PP
Option Details  \fC\fBjpcre2::NONE\fP\fP This is the default option\&. Equivalent to 0 (zero)\&. \fC\fBjpcre2::VALIDATE_MODIFIER\fP\fP If this option is passed, modifiers will be subject to validation check\&. If any of them is invalid then a \fC\fBjpcre2::ERROR::INVALID_MODIFIER\fP\fP error exception will be thrown\&. You can get the error message with \fCgetErrorMessage(error_code)\fP member function\&. \fC\fBjpcre2::FIND_ALL\fP\fP This option will do a global matching if passed during matching\&. The same can be achieved by passing the 'g' modifier with \fCsetModifiers()\fP function\&. \fC\fBjpcre2::ERROR_ALL\fP\fP Treat warnings as errors and throw exception\&. \fC\fBjpcre2::JIT_COMPILE\fP\fP This is same as passing the \fBS\fP modifier during pattern compilation\&. 
.SS "PCRE2 options:"
.PP
While having its own way of doing things, JPCRE2 also supports the traditional PCRE2 options to be passed\&. We use the \fCaddPcre2Options()\fP function to pass the PCRE2 options\&. These options are the same as the PCRE2 library and have the same meaning\&. For example instead of passing the 'g' modifier to the replacement operation we can also pass its PCRE2 equivalent \fIPCRE2_SUBSTITUTE_GLOBAL\fP to have the same effect\&.
.PP
 #Short examples
.PP
.PP
.nf
size_t count;

if(jpcre2::Regex("(\\d)|(\\w)")\&.match("I am the subject")\&.execute()) 
    std::cout<<"\nmatched";
else
    std::cout<<"\nno match";
std::cout<<"\n"<<
    jpcre2::Regex("(\\d)|(\\w)","m")\&.match("I am the subject")\&.setModifiers("g")\&.execute();


jpcre2::VecNum vec_num;
count = 
jpcre2::Regex("(\\w+)\\s*(\\d+)","m")\&.match("I am 23, I am digits 10")
                                     \&.setModifiers("g")
                                     \&.setNumberedSubstringVector(&vec_num)
                                     \&.exec();
std::cout<<"\nNumber of matches: "<<count/* or vec_num\&.size()*/;

std::cout<<"\nTotal match of first match: "<<vec_num[0][0];      
std::cout<<"\nCaptrued group 1 of frist match: "<<vec_num[0][1]; 
std::cout<<"\nCaptrued group 2 of frist match: "<<vec_num[0][2]; 
std::cout<<"\nCaptrued group 3 of frist match: "<<vec_num[0][3]; 

/* //>=C++11
try{
    std::cout<<"\nCaptrued group 4 of frist match: "<<vec_num[0]\&.at(4);
} catch (std::logic_error e){
    std::cout<<"\nCaptrued group 4 doesn't exist";
}*/

std::cout<<"\nTotal match of second match: "<<vec_num[1][0];      
std::cout<<"\nCaptrued group 1 of second match: "<<vec_num[1][1]; 
std::cout<<"\nCaptrued group 2 of second match: "<<vec_num[1][2]; 



jpcre2::VecNas vec_nas;
jpcre2::VecNtN vec_ntn; 
count = 
jpcre2::Regex("(?<word>\\w+)\\s*(?<digit>\\d+)","m")\&.match("I am 23, I am digits 10")
                                                    \&.setModifiers("g")
                                                    \&.setNamedSubstringVector(&vec_nas)
                                                    \&.setNameToNumberMapVector(&vec_ntn) 
                                                    \&.execute();
std::cout<<"\nNumber of matches: "<<vec_nas\&.size()/* or count */;
std::cout<<"\nCaptured group (word) of first match: "<<vec_nas[0]["word"];
std::cout<<"\nCaptured group (digit) of first match: "<<vec_nas[0]["digit"];

/* //>=C++11
try{
    std::cout<<"\nCaptured group (name) of first match: "<<vec_nas[0]\&.at("name");
} catch(std::logic_error e){
    std::cout<<"\nCaptured group (name) doesn't exist";
}*/

std::cout<<"\nCaptured group (word) of second match: "<<vec_nas[1]["word"];
std::cout<<"\nCaptured group (digit) of second match: "<<vec_nas[1]["digit"];

std::cout<<"\nPosition of captured group (word) in first match: "<<vec_ntn[0]["word"];
std::cout<<"\nPosition of captured group (digit) in first match: "<<vec_ntn[0]["digit"];

std::cout<<"\n"<<
jpcre2::Regex("\\d")\&.replace("I am the subject string 44","@")\&.execute();

std::cout<<"\n"<<
jpcre2::Regex("\\d")\&.replace("I am the subject string 44","@")\&.setModifiers("g")\&.execute();

std::cout<<"\n"<<
jpcre2::Regex("^([^\t]+)\t([^\t]+)$")\&.replace()
                                     \&.setSubject("I am the subject\tTo be swapped according to tab")
                                     \&.setReplaceWith("$2 $1")
                                     \&.execute();
.fi
.PP
.PP
#Testing:
.PP
CPP file Details  \fCtest_match\&.cpp\fP Contains an example code for match function\&. \fCtest_replace\&.cpp\fP Contains an example code for replace function\&. \fCtest_match2\&.cpp\fP Another matching example\&. Takes pattern, modifier & subject as inputs\&. \fCtest_replace2\&.cpp\fP Another replacement example\&. Takes input for pattern, modifier, subject and replacement string\&. #Screenshots of some test outputs:
.PP
.SS "test_match: "
.PP
.PP
.nf
1 subject = "(I am a string with words and digits 45 and specials chars: ?\&.#@ 443 অ আ ক খ গ ঘ  56)"
2 pattern = "(?:(?<word>[?\&.#@:]+)|(?<word>\\w+))\\s*(?<digit>\\d+)"
.fi
.PP
.PP
   
