.TH "test_shorts.cpp" 3 "Sun Sep 4 2016" "Version 10.25.01" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
test_shorts.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <iostream>\fP
.br
\fC#include 'jpcre2\&.cpp'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmain\fP ()"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int main ()"
Check if string matches the pattern
.PP
The following uses a temporary Regex object\&.
.PP
The above is a good example of using temporary objects to perform match (or replace)
.PP
Using the modifier S (i\&.e jpcre2::JIT_COMPILE) with temporary object may or may not give you any performance boost (depends on the complexity of the pattern)\&. The more complex the pattern gets, the more sense the S modifier makes\&.
.PP
If you want to match all and get the match count, use the action modifier 'g':
.PP
Modifiers passed to the Regex constructor or with compile() function are compile modifiers Modifiers passed with the match() or replace() functions are action modifiers
.PP
Substrings/Captured groups:
.PP
*** Getting captured groups/substring ***
.PP
captured groups or substrings are stored in maps for each match, and each match is stored in a vector\&. Thus captured groups are in a vector of maps\&.
.PP
PCRE2 provides two types of substrings:
.IP "1." 4
numbered (index) substring
.IP "2." 4
named substring
.PP
.PP
For the above two, we have two vectors respectively:
.IP "1." 4
jpcre2::VecNum (Corresponding map: jpcre2::MapNum)
.IP "2." 4
jpcre2::VecNas (Corresponding map: jpcre2::MapNas)
.PP
.PP
Another additional vector is available to get the substring position/number for a particular captured group by name\&. It's a vector of name to number maps
.IP "\(bu" 2
jpcre2::VecNtN (Corresponding map: jpcre2:MapNtN)
.PP
.PP
***** Get numbered substring ***** ///
.PP
count (the return value) is guaranteed to give you the correct number of matches, while vec_num\&.size() may give you wrong result if any match result was failed to be inserted in the vector\&. This should not happen i\&.e count and vec_num\&.size() should always be equal\&.
.PP
Now vec_num is populated with numbered substrings for each match The size of vec_num is the total match count vec_num[0] is the first match The type of vec_num[0] is jpcre2::MapNum
.PP
Total match (group 0) from first match
.PP
captured group 1 from first match
.PP
captured group 2 from first match
.PP
captured group 3 doesn't exist, it will give you empty string
.PP
Using the [] operator with jpcre2::MapNum will create new element if it doesn't exist i\&.e vec_num[0][3] were created in the above example\&. This should be ok, if existence of a particular substring is not important
.PP
If the existence of a substring is important, use the std::map::find() or std::map::at() (>=C++11) function to access map elements
.PP
There were two matches found (vec_num\&.size() == 2) in the above example
.PP
Total match (group 0) from second match
.PP
captured group 1 from second match
.PP
captured group 2 from second match
.PP
***** Get named substring ***** ///
.PP
We will get name to number map vector too
.PP
\&.setNumberedSubstringVector(vec_num) /// We don't need it in this example
.PP
Additional (name to number maps)
.PP
Now vec_nas is populated with named substrings for each match The size of vec_nas is the total match count vec_nas[0] is the first match The type of vec_nas[0] is jpcre2::MapNas
.PP
If the existence of a substring is important, use the std::map::find() or std::map::at() (>=C++11) function to access map elements
.PP
There were two matches found (vec_nas\&.size() == 2) in the above example
.PP
Get the position (number) of a captured group name (that was found in match)
.PP
Replacement Examples Replace pattern in a string with a replacement string
.PP
The initReplace() function can take a subject and replacement string as argument\&. You can also pass the subject with setSubject() function in method chain, replacement string with setReplaceWith() function in method chain, etc \&.\&.\&.
.PP
A call to replace() will return the resultant string
.PP
replace first occurrence of a digit with @
.PP
replace all occrrences of a digit with @
.PP
swap two parts of a string 
.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
