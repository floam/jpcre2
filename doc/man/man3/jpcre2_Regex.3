.TH "jpcre2::Regex" 3 "Tue Sep 6 2016" "Version 10.25.01" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jpcre2::Regex \- This class implements public overloaded and copy constructors to provide different means of creating objects and initializing class variables\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <jpcre2\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRegex\fP ()"
.br
.RI "\fIDefault Constructor\&. \fP"
.ti -1c
.RI "\fBRegex\fP (const \fBString\fP &re)"
.br
.RI "\fICompiles pattern with initialization\&. \fP"
.ti -1c
.RI "\fBRegex\fP (const \fBString\fP &re, const \fBString\fP &mod)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "\fBRegex\fP (const \fBString\fP &re, \fBUint\fP pcre2_opts)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "\fBRegex\fP (const \fBString\fP &re, \fBUint\fP pcre2_opts, \fBUint\fP opt_bits)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "\fBRegex\fP (const \fBRegex\fP &r)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Copy constructor. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBoperator=\fP (const \fBRegex\fP &r)"
.br
.RI "\fIOverloaded assignment operator\&. \fP"
.ti -1c
.RI "\fB~Regex\fP ()"
.br
.RI "\fIDestructor Deletes memory used by \fBrm\fP an \fBrr\fP\&. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBreset\fP ()"
.br
.RI "\fIReset all class variables to its default (initial) state\&. \fP"
.ti -1c
.RI "\fBString\fP \fBgetModifier\fP ()"
.br
.RI "\fIGet modifier string\&. \fP"
.ti -1c
.RI "\fBString\fP \fBgetPattern\fP ()"
.br
.RI "\fIGet pattern string\&. \fP"
.ti -1c
.RI "\fBString\fP \fBgetLocale\fP ()"
.br
.RI "\fIGet locale as a string\&. \fP"
.ti -1c
.RI "\fBUint\fP \fBgetPcre2Option\fP ()"
.br
.RI "\fIGet PCRE2 option\&. \fP"
.ti -1c
.RI "\fBUint\fP \fBgetJpcre2Option\fP ()"
.br
.RI "\fIGet JPCRE2 option\&. \fP"
.ti -1c
.RI "\fBString\fP \fBgetErrorMessage\fP (int err_num, PCRE2_SIZE err_off)"
.br
.RI "\fIGet error message by error number and error offset\&. \fP"
.ti -1c
.RI "\fBString\fP \fBgetErrorMessage\fP (int err_num)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Use class variable error_offest as error offset\&. \fP"
.ti -1c
.RI "\fBString\fP \fBgetErrorMessage\fP ()"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Use class variable error_number as error number and error_offest as error offset\&. \fP"
.ti -1c
.RI "\fBString\fP \fBgetWarningMessage\fP ()"
.br
.RI "\fIGet current warning message\&. \fP"
.ti -1c
.RI "int \fBgetErrorNumber\fP ()"
.br
.RI "\fIGet error number return \fBerror_number\fP\&. \fP"
.ti -1c
.RI "PCRE2_SIZE \fBgetErrorOffset\fP ()"
.br
.RI "\fIGet error offset return \fBerror_offset\fP\&. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBsetPattern\fP (const \fBString\fP &re)"
.br
.RI "\fISet the Pattern string \fBpat_str\fP\&. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBsetModifier\fP (const \fBString\fP &x)"
.br
.RI "\fISet the modifier \fBmodifier\fP (overwrite existing JPCRE2 and PCRE2 option)\&. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBsetLocale\fP (const \fBString\fP &x)"
.br
.RI "\fISet the locale \fBmylocale\fP\&. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBsetJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fISet JPCRE2 option \fBjpcre2_compile_opts\fP (overwrites existing option) \fP"
.ti -1c
.RI "\fBRegex\fP & \fBsetPcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fISet PCRE2 option \fBcompile_opts\fP (overwrites existing option) \fP"
.ti -1c
.RI "\fBRegex\fP & \fBaddJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fIAdd option to existing JPCRE2 options \fBjpcre2_compile_opts\fP\&. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBaddPcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fIAdd option to existing PCRE2 options \fBcompile_opts\fP\&. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBremoveJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fIRemove option from existing JPCRE2 option \fBjpcre2_compile_opts\fP\&. \fP"
.ti -1c
.RI "\fBRegex\fP & \fBremovePcre2Option\fP (\fBUint\fP x)"
.br
.RI "\fIRemove option from existing PCRE2 option \fBcompile_opts\fP\&. \fP"
.ti -1c
.RI "void \fBcompile\fP (void)"
.br
.RI "\fICompile the regex pattern from class variable \fBpat_str\fP\&. \fP"
.ti -1c
.RI "void \fBcompile\fP (const \fBString\fP &re, \fBUint\fP po, \fBUint\fP jo)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "void \fBcompile\fP (const \fBString\fP &re, \fBUint\fP po)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "void \fBcompile\fP (const \fBString\fP &re, const \fBString\fP &mod)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "void \fBcompile\fP (const \fBString\fP &re)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "\fBSIZE_T\fP \fBmatch\fP (const \fBString\fP &s, const \fBString\fP &mod)"
.br
.RI "\fIPerform regex match\&. \fP"
.ti -1c
.RI "\fBSIZE_T\fP \fBmatch\fP (const \fBString\fP &s)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "\fBRegexMatch\fP & \fBinitMatch\fP ()"
.br
.RI "\fIPrepare to call \fBRegexMatch::match()\fP\&. \fP"
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains, const \fBString\fP &repl, const \fBString\fP &mod)"
.br
.RI "\fIPerform regex replace\&. \fP"
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains, const \fBString\fP &repl)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "\fBRegexReplace\fP & \fBinitReplace\fP ()"
.br
.RI "\fIPrepare to call \fBRegexReplace::replace()\fP\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit_vars\fP ()"
.br
.RI "\fIInitialize class variables\&. \fP"
.ti -1c
.RI "void \fBinit\fP ()"
.br
.RI "\fICall \fBRegex::init_vars()\fP and initialize class variables\&. \fP"
.ti -1c
.RI "void \fBinit\fP (const \fBString\fP &re, const \fBString\fP &mod)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "void \fBinit\fP (const \fBString\fP &re, \fBUint\fP po, \fBUint\fP jo)"
.br
.RI "\fIThis is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \fP"
.ti -1c
.RI "void \fBfreeRegexMemory\fP (void)"
.br
.RI "\fIFree code if it's non-NULL\&. \fP"
.ti -1c
.RI "void \fBparseCompileOpts\fP (void)"
.br
.RI "\fIParse \fBmodifier\fP and set equivalent PCRE2 and JPCRE2 options\&. \fP"
.ti -1c
.RI "void \fBshallowCopy\fP (const \fBRegex\fP &r)"
.br
.RI "\fIDo a shallow copy of class variables\&. \fP"
.ti -1c
.RI "void \fBdeepCopy\fP (const \fBRegex\fP &r)"
.br
.RI "\fIDo a deep copy of \fBrm\fP, \fBrr\fP and \fBcode\fP\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBRegexMatch\fP * \fBrm\fP"
.br
.RI "\fIPointer to \fBRegexMatch\fP object\&. \fP"
.ti -1c
.RI "\fBRegexReplace\fP * \fBrr\fP"
.br
.RI "\fIPointer to \fBRegexReplace\fP object\&. \fP"
.ti -1c
.RI "\fBString\fP \fBpat_str\fP"
.br
.RI "\fIPattern string\&. \fP"
.ti -1c
.RI "\fBString\fP \fBmodifier\fP"
.br
.RI "\fIModifier string\&. \fP"
.ti -1c
.RI "pcre2_code * \fBcode\fP"
.br
.RI "\fIPointer to compiled pattern\&. \fP"
.ti -1c
.RI "int \fBerror_number\fP"
.br
.RI "\fIError number\&. \fP"
.ti -1c
.RI "PCRE2_SIZE \fBerror_offset\fP"
.br
.RI "\fIError offset\&. \fP"
.ti -1c
.RI "\fBUint\fP \fBcompile_opts\fP"
.br
.RI "\fICompile options for PCRE2 (used by PCRE2 internal function pcre2_compile()) \fP"
.ti -1c
.RI "\fBUint\fP \fBjpcre2_compile_opts\fP"
.br
.RI "\fICompile options specific to JPCRE2\&. \fP"
.ti -1c
.RI "\fBString\fP \fBmylocale\fP"
.br
.RI "\fILocale as a string\&. \fP"
.ti -1c
.RI "\fBString\fP \fBcurrent_warning_msg\fP"
.br
.RI "\fIcurrent warning message \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBRegexMatch\fP"
.br
.RI "\fIDefine \fBRegexMatch\fP as friends\&. It needs to access the compiled pattern which is a private property of this class\&. \fP"
.ti -1c
.RI "class \fBRegexReplace\fP"
.br
.RI "\fIDefine \fBRegexReplace\fP as friends\&. It needs to access the compiled pattern which is a private property of this class\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
This class implements public overloaded and copy constructors to provide different means of creating objects and initializing class variables\&. 

Each regex pattern needs an object of this class\&.
.PP
A pattern must be compiled either by explicitly calling the compile function or using one of the parameterized constructors\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "jpcre2::Regex::Regex ()\fC [inline]\fP"

.PP
Default Constructor\&. Initializes all class variables to defaults\&. Does not perform any compilation\&. 
.SS "jpcre2::Regex::Regex (const \fBString\fP & re)\fC [inline]\fP"

.PP
Compiles pattern with initialization\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.RE
.PP

.SS "jpcre2::Regex::Regex (const \fBString\fP & re, const \fBString\fP & mod)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Compiles pattern\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fImod\fP Modifier string 
.RE
.PP

.SS "jpcre2::Regex::Regex (const \fBString\fP & re, \fBUint\fP pcre2_opts)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Compiles pattern\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fIpcre2_opts\fP PCRE2 option value 
.RE
.PP

.SS "jpcre2::Regex::Regex (const \fBString\fP & re, \fBUint\fP pcre2_opts, \fBUint\fP opt_bits)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Compiles pattern\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fIpcre2_opts\fP PCRE2 option value 
.br
\fIopt_bits\fP JPCRE2 option value 
.RE
.PP

.SS "jpcre2::Regex::Regex (const \fBRegex\fP & r)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Copy constructor. Compiles pattern and Performs a deep copy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP const \fBRegex\fP& 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBRegex\fP& jpcre2::Regex::addJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Add option to existing JPCRE2 options \fBjpcre2_compile_opts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::addPcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Add option to existing PCRE2 options \fBcompile_opts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "void jpcre2::Regex::compile (void)"

.PP
Compile the regex pattern from class variable \fBpat_str\fP\&. Use options from class variables\&.
.PP
Prefer using one of its variants when compiling pattern for an already declared \fBRegex\fP object\&. An use of 
.PP
.nf
re = Regex("pattern");

.fi
.PP
 (or such) is discouraged\&. see \fC\fBRegex::operator=(const Regex& r)\fP\fP for details\&. 
.PP
\fBSee also:\fP
.RS 4
void \fBcompile(const String& re, Uint po, Uint jo)\fP 
.PP
void \fBcompile(const String& re, Uint po)\fP 
.PP
void \fBcompile(const String& re, const String& mod)\fP 
.PP
void \fBcompile(const String& re)\fP 
.RE
.PP

.PP
References code, compile_opts, current_warning_msg, jpcre2::ERROR_ALL, error_number, error_offset, jpcre2::utils::getPcre2ErrorMessage(), jpcre2::JIT_COMPILE, jpcre2::ERROR::JIT_COMPILE_FAILED, jpcre2_compile_opts, jpcre2::LOCALE_NONE, mylocale, parseCompileOpts(), pat_str, and jpcre2::utils::toString()\&.
.SS "void jpcre2::Regex::compile (const \fBString\fP & re, \fBUint\fP po, \fBUint\fP jo)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set the specified parameters, then compile the pattern using information from class variables\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fIpo\fP PCRE2 option 
.br
\fIjo\fP JPCRE2 option 
.RE
.PP

.SS "void jpcre2::Regex::compile (const \fBString\fP & re, \fBUint\fP po)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set the specified parameters, then compile the pattern using options from class variables\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fIpo\fP PCRE2 option 
.RE
.PP

.SS "void jpcre2::Regex::compile (const \fBString\fP & re, const \fBString\fP & mod)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set the specified parameters, then compile the pattern using options from class variables\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fImod\fP Modifier string 
.RE
.PP

.SS "void jpcre2::Regex::compile (const \fBString\fP & re)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set the specified parameters, then compile the pattern using options from class variables\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.RE
.PP

.SS "\fBjpcre2::String\fP jpcre2::Regex::getErrorMessage (int err_num, PCRE2_SIZE err_off)"

.PP
Get error message by error number and error offset\&. 
.PP
\fBParameters:\fP
.RS 4
\fIerr_num\fP Error number 
.br
\fIerr_off\fP Error offset 
.RE
.PP
\fBReturns:\fP
.RS 4
Error message as a string 
.RE
.PP

.PP
References jpcre2::utils::getPcre2ErrorMessage(), jpcre2::ERROR::INVALID_MODIFIER, jpcre2::ERROR::JIT_COMPILE_FAILED, jpcre2::JIT_ERROR_MESSAGE_PREFIX, and jpcre2::utils::toString()\&.
.SS "\fBString\fP jpcre2::Regex::getErrorMessage (int err_num)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Use class variable error_offest as error offset\&. 
.PP
\fBParameters:\fP
.RS 4
\fIerr_num\fP 
.RE
.PP
\fBReturns:\fP
.RS 4
Error message as a string 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::getErrorMessage ()\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Use class variable error_number as error number and error_offest as error offset\&. 
.PP
\fBReturns:\fP
.RS 4
Error message as a string (empty if there is no error) 
.RE
.PP

.SS "\fBUint\fP jpcre2::Regex::getJpcre2Option ()\fC [inline]\fP"

.PP
Get JPCRE2 option\&. 
.PP
\fBReturns:\fP
.RS 4
\fBjpcre2_compile_opts\fP 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::getLocale ()\fC [inline]\fP"

.PP
Get locale as a string\&. 
.PP
\fBReturns:\fP
.RS 4
\fBmylocale\fP 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::getModifier ()\fC [inline]\fP"

.PP
Get modifier string\&. 
.PP
\fBReturns:\fP
.RS 4
\fBmodifier\fP 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::getPattern ()\fC [inline]\fP"

.PP
Get pattern string\&. 
.PP
\fBReturns:\fP
.RS 4
\fBpat_str\fP 
.RE
.PP

.SS "\fBUint\fP jpcre2::Regex::getPcre2Option ()\fC [inline]\fP"

.PP
Get PCRE2 option\&. 
.PP
\fBReturns:\fP
.RS 4
\fBcompile_opts\fP 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::getWarningMessage ()\fC [inline]\fP"

.PP
Get current warning message\&. 
.PP
\fBReturns:\fP
.RS 4
\fBcurrent_warning_msg\fP 
.RE
.PP

.SS "void jpcre2::Regex::init ()\fC [inline]\fP, \fC [private]\fP"

.PP
Call \fBRegex::init_vars()\fP and initialize class variables\&. This function should not be attempted to call after creating object\&. To re-initialize class variables at a later stage after creating object, use the \fBRegex::reset()\fP function\&. This function is private and should remain as such\&. 
.SS "void jpcre2::Regex::init (const \fBString\fP & re, const \fBString\fP & mod)\fC [inline]\fP, \fC [private]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP \fBRegex\fP pattern 
.br
\fImod\fP Modifier string 
.RE
.PP

.SS "void jpcre2::Regex::init (const \fBString\fP & re, \fBUint\fP po, \fBUint\fP jo)\fC [inline]\fP, \fC [private]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP \fBRegex\fP pattern 
.br
\fIpo\fP PCRE2 options 
.br
\fIjo\fP JPCRE2 options 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::Regex::initMatch ()\fC [inline]\fP"

.PP
Prepare to call \fBRegexMatch::match()\fP\&. Other options can be set with the setter functions of \fBRegexMatch\fP class in-between the \fBRegex::initMatch()\fP and \fBRegexMatch::match()\fP call\&. 
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::match()\fP 
.PP
\fBRegexMatch::setSubject(const String& s)\fP 
.PP
\fBRegexMatch::setModifier(const String& mod)\fP 
.PP
\fBRegexMatch::setNumberedSubstringVector(VecNum* vec_num)\fP 
.PP
\fBRegexMatch::setNamedSubstringVector(VecNas* vec_nas)\fP 
.PP
\fBRegexMatch::setNameToNumberMapVector(VecNtN* vec_ntn)\fP 
.RE
.PP

.PP
References jpcre2::RegexMatch::re\&.
.SS "\fBRegexReplace\fP& jpcre2::Regex::initReplace ()\fC [inline]\fP"

.PP
Prepare to call \fBRegexReplace::replace()\fP\&. Other options can be set with the setter functions of \fBRegexReplace\fP class in-between the \fBRegex::initReplace()\fP and \fBRegexReplace::replace()\fP call\&. 
.PP
\fBReturns:\fP
.RS 4
Resultant string after regex replace 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::replace()\fP 
.PP
\fBRegexReplace::setSubject(const String& s)\fP 
.PP
\fBRegexReplace::setModifier(const String& mod)\fP 
.PP
\fBRegexReplace::setReplaceWith(const String& s)\fP 
.PP
\fBRegexReplace::setBufferSize(PCRE2_SIZE x)\fP 
.RE
.PP

.PP
References jpcre2::RegexReplace::re\&.
.SS "\fBSIZE_T\fP jpcre2::Regex::match (const \fBString\fP & s, const \fBString\fP & mod)\fC [inline]\fP"

.PP
Perform regex match\&. This function takes the parameters, then sets the parameters to \fBRegexMatch\fP class and calls \fBRegexMatch::match()\fP which returns the result 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Subject string 
.br
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
Match count 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::match()\fP 
.RE
.PP

.PP
References jpcre2::RegexMatch::match(), jpcre2::RegexMatch::re, jpcre2::RegexMatch::setModifier(), and jpcre2::RegexMatch::setSubject()\&.
.SS "\fBSIZE_T\fP jpcre2::Regex::match (const \fBString\fP & s)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
Match count 
.RE
.PP
\fBSee also:\fP
.RS 4
RegexMatch::match(const String& s) 
.RE
.PP

.PP
References jpcre2::RegexMatch::match(), jpcre2::RegexMatch::re, and jpcre2::RegexMatch::setSubject()\&.
.SS "\fBRegex\fP& jpcre2::Regex::operator= (const \fBRegex\fP & r)\fC [inline]\fP"

.PP
Overloaded assignment operator\&. Performs a deep copy\&.
.PP
Allows assigning objects like this: 
.PP
.nf
Regex re;
re = Regex("new pattern");

.fi
.PP
 However, use of this method is discouraged (Use \fBRegex::compile()\fP instead), because a call to this function requires an additional call to PCRE2 internal function pcre2_code_copy()\&. If the pattern was JIT compiled, it requires another additional JIT compilation because JIT memory was not copied by pcre2_code_copy()\&.
.PP
\fBMemory management:\fP Old JIT memory will be released along with the old compiled code\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP const \fBRegex\fP& 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "void jpcre2::Regex::parseCompileOpts (void)\fC [private]\fP"

.PP
Parse \fBmodifier\fP and set equivalent PCRE2 and JPCRE2 options\&. After a call to this function \fBcompile_opts\fP and \fBjpcre2_compile_opts\fP will be properly set\&. 
.PP
References compile_opts, error_number, error_offset, jpcre2::ERROR::INVALID_MODIFIER, jpcre2::JIT_COMPILE, jpcre2_compile_opts, modifier, and jpcre2::VALIDATE_MODIFIER\&.
.PP
Referenced by compile()\&.
.SS "\fBRegex\fP& jpcre2::Regex::removeJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Remove option from existing JPCRE2 option \fBjpcre2_compile_opts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::removePcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Remove option from existing PCRE2 option \fBcompile_opts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::replace (const \fBString\fP & mains, const \fBString\fP & repl, const \fBString\fP & mod)\fC [inline]\fP"

.PP
Perform regex replace\&. This function takes the parameters, then sets the parameters to \fBRegexReplace\fP class and calls \fBRegexReplace::replace()\fP which returns the result\&. 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.br
\fIrepl\fP String to replace with 
.br
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
Resultant string after regex replace 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::replace()\fP 
.RE
.PP

.PP
References jpcre2::RegexReplace::re, jpcre2::RegexReplace::replace(), jpcre2::RegexReplace::setModifier(), jpcre2::RegexReplace::setReplaceWith(), and jpcre2::RegexReplace::setSubject()\&.
.PP
Referenced by jpcre2::RegexReplace::replace()\&.
.SS "\fBString\fP jpcre2::Regex::replace (const \fBString\fP & mains, const \fBString\fP & repl)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.br
\fIrepl\fP String to replace with 
.RE
.PP
\fBReturns:\fP
.RS 4
Resultant string after regex replace 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::replace()\fP 
.RE
.PP

.PP
References jpcre2::RegexReplace::re, jpcre2::RegexReplace::replace(), jpcre2::RegexReplace::setReplaceWith(), and jpcre2::RegexReplace::setSubject()\&.
.SS "\fBRegex\fP& jpcre2::Regex::reset ()\fC [inline]\fP"

.PP
Reset all class variables to its default (initial) state\&. 
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Set JPCRE2 option \fBjpcre2_compile_opts\fP (overwrites existing option) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setLocale (const \fBString\fP & x)\fC [inline]\fP"

.PP
Set the locale \fBmylocale\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Locale string 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setModifier (const \fBString\fP & x)\fC [inline]\fP"

.PP
Set the modifier \fBmodifier\fP (overwrite existing JPCRE2 and PCRE2 option)\&. Re-initializes the option bits for PCRE2 and JPCRE2 options, then sets the modifier\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setPattern (const \fBString\fP & re)\fC [inline]\fP"

.PP
Set the Pattern string \fBpat_str\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setPcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Set PCRE2 option \fBcompile_opts\fP (overwrites existing option) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
