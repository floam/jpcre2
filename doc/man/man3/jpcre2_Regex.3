.TH "jpcre2::Regex" 3 "Fri Sep 9 2016" "Version 10.25.04" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jpcre2::Regex \- Implements public overloaded and copy constructors, provides functions to set/unset various options and perform regex match and replace against a compiled pattern\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <jpcre2\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRegex\fP ()"
.br
.RI "Default Constructor\&. "
.ti -1c
.RI "\fBRegex\fP (const \fBString\fP &re)"
.br
.RI "Compile pattern with initialization\&. "
.ti -1c
.RI "\fBRegex\fP (const \fBString\fP &re, const \fBString\fP &mod)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegex\fP (const \fBString\fP &re, \fBUint\fP pcre2_opts)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegex\fP (const \fBString\fP &re, \fBUint\fP pcre2_opts, \fBUint\fP opt_bits)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegex\fP (const \fBRegex\fP &r)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Copy constructor. "
.ti -1c
.RI "\fBRegex\fP & \fBoperator=\fP (const \fBRegex\fP &r)"
.br
.RI "Overloaded assignment operator\&. "
.ti -1c
.RI "\fB~Regex\fP ()"
.br
.RI "Destructor Deletes memory used by \fBrm\fP an \fBrr\fP\&. "
.ti -1c
.RI "\fBRegex\fP & \fBreset\fP ()"
.br
.RI "Reset all class variables to its default (initial) state\&. "
.ti -1c
.RI "\fBString\fP \fBgetModifier\fP ()"
.br
.RI "Get modifier string calculated from JPCRE2 and PCRE2 options\&. "
.ti -1c
.RI "\fBString\fP \fBgetPattern\fP ()"
.br
.RI "Get pattern string\&. "
.ti -1c
.RI "\fBString\fP \fBgetLocale\fP ()"
.br
.RI "Get locale as a string\&. "
.ti -1c
.RI "\fBUint\fP \fBgetPcre2Option\fP ()"
.br
.RI "Get PCRE2 option\&. "
.ti -1c
.RI "\fBUint\fP \fBgetJpcre2Option\fP ()"
.br
.RI "Get JPCRE2 option\&. "
.ti -1c
.RI "\fBString\fP \fBgetWarningMessage\fP ()"
.br
.RI "Get current warning message\&. "
.ti -1c
.RI "\fBRegex\fP & \fBsetPattern\fP (const \fBString\fP &re)"
.br
.RI "Set the Pattern string \fBpat_str\fP\&. "
.ti -1c
.RI "\fBRegex\fP & \fBsetModifier\fP (const \fBString\fP &x)"
.br
.RI "Set the modifier (overwrite existing JPCRE2 and PCRE2 option)\&. "
.ti -1c
.RI "\fBRegex\fP & \fBsetLocale\fP (const \fBString\fP &x)"
.br
.RI "Set the locale \fBmylocale\fP\&. "
.ti -1c
.RI "\fBRegex\fP & \fBsetJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "Set JPCRE2 option \fBjpcre2_compile_opts\fP (overwrites existing option) "
.ti -1c
.RI "\fBRegex\fP & \fBsetPcre2Option\fP (\fBUint\fP x)"
.br
.RI "Set PCRE2 option \fBcompile_opts\fP (overwrites existing option) "
.ti -1c
.RI "\fBRegex\fP & \fBchangeModifier\fP (const \fBString\fP &, bool)"
.br
.RI "Parse modifier and add/remove equivalent PCRE2 and JPCRE2 options\&. "
.ti -1c
.RI "\fBRegex\fP & \fBchangeJpcre2Option\fP (\fBUint\fP opt, bool x)"
.br
.RI "Add or remove a JPCRE2 option\&. "
.ti -1c
.RI "\fBRegex\fP & \fBchangePcre2Option\fP (\fBUint\fP opt, bool x)"
.br
.RI "Add or remove a PCRE2 option\&. "
.ti -1c
.RI "\fBRegex\fP & \fBaddModifier\fP (const \fBString\fP &mod)"
.br
.RI "Parse modifier string and add equivalent PCRE2 and JPCRE2 options\&. "
.ti -1c
.RI "\fBRegex\fP & \fBaddJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "Add option to existing JPCRE2 options \fBjpcre2_compile_opts\fP\&. "
.ti -1c
.RI "\fBRegex\fP & \fBaddPcre2Option\fP (\fBUint\fP x)"
.br
.RI "Add option to existing PCRE2 options \fBcompile_opts\fP\&. "
.ti -1c
.RI "void \fBcompile\fP (void)"
.br
.RI "Compile the regex pattern from class variable \fBpat_str\fP\&. "
.ti -1c
.RI "void \fBcompile\fP (const \fBString\fP &re, \fBUint\fP po, \fBUint\fP jo)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "void \fBcompile\fP (const \fBString\fP &re, \fBUint\fP po)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "void \fBcompile\fP (const \fBString\fP &re, const \fBString\fP &mod)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "void \fBcompile\fP (const \fBString\fP &re)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBSIZE_T\fP \fBmatch\fP (const \fBString\fP &s, const \fBString\fP &mod)"
.br
.RI "Perform regex match and return match count\&. "
.ti -1c
.RI "\fBSIZE_T\fP \fBmatch\fP (const \fBString\fP &s)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegexMatch\fP & \fBinitMatch\fP ()"
.br
.RI "Prepare to call \fBRegexMatch::match()\fP\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains, const \fBString\fP &repl, const \fBString\fP &mod)"
.br
.RI "Perform regex replace and return the replaced string\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains, const \fBString\fP &repl)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBinitReplace\fP ()"
.br
.RI "Prepare to call \fBRegexReplace::replace()\fP\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinit_vars\fP ()"
.br
.RI "Initialize class variables\&. "
.ti -1c
.RI "void \fBinit\fP ()"
.br
.RI "Call \fBRegex::init_vars()\fP and initialize class variables\&. "
.ti -1c
.RI "void \fBinit\fP (const \fBString\fP &re, const \fBString\fP &mod)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "void \fBinit\fP (const \fBString\fP &re, \fBUint\fP po, \fBUint\fP jo)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "void \fBfreeRegexMemory\fP (void)"
.br
.RI "Free \fBcode\fP if it's non-NULL\&. "
.ti -1c
.RI "void \fBshallowCopy\fP (const \fBRegex\fP &r)"
.br
.RI "Do a shallow copy of class variables\&. "
.ti -1c
.RI "void \fBdeepCopy\fP (const \fBRegex\fP &)"
.br
.RI "Do a deep copy of \fBrm\fP, \fBrr\fP and \fBcode\fP\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBRegexMatch\fP * \fBrm\fP"
.br
.RI "Pointer to \fBRegexMatch\fP object\&. "
.ti -1c
.RI "\fBRegexReplace\fP * \fBrr\fP"
.br
.RI "Pointer to \fBRegexReplace\fP object\&. "
.ti -1c
.RI "\fBString\fP \fBpat_str\fP"
.br
.RI "Pattern string\&. "
.ti -1c
.RI "pcre2_code * \fBcode\fP"
.br
.RI "Pointer to compiled pattern\&. "
.ti -1c
.RI "\fBUint\fP \fBcompile_opts\fP"
.br
.RI "Compile options for PCRE2 (used by PCRE2 internal function pcre2_compile()) "
.ti -1c
.RI "\fBUint\fP \fBjpcre2_compile_opts\fP"
.br
.RI "Compile options specific to JPCRE2\&. "
.ti -1c
.RI "\fBString\fP \fBmylocale\fP"
.br
.RI "Locale as a string\&. "
.ti -1c
.RI "\fBString\fP \fBcurrent_warning_msg\fP"
.br
.RI "Current warning message\&. "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBRegexMatch\fP"
.br
.RI "Define \fBRegexMatch\fP as friends\&. It needs to access the compiled pattern which is a private property of this class\&. "
.ti -1c
.RI "class \fBRegexReplace\fP"
.br
.RI "Define \fBRegexReplace\fP as friends\&. It needs to access the compiled pattern which is a private property of this class\&. "
.in -1c
.SH "Detailed Description"
.PP 
Implements public overloaded and copy constructors, provides functions to set/unset various options and perform regex match and replace against a compiled pattern\&. 

Each regex pattern needs an object of this class\&.
.PP
A pattern must be compiled either by explicitly calling the compile function or using one of the parameterized constructors\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "jpcre2::Regex::Regex ()\fC [inline]\fP"

.PP
Default Constructor\&. Initializes all class variables to defaults\&. Does not perform any compilation, and thus not expected to throw any exception\&. 
.SS "jpcre2::Regex::Regex (const \fBString\fP & re)\fC [inline]\fP"

.PP
Compile pattern with initialization\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.RE
.PP

.SS "jpcre2::Regex::Regex (const \fBString\fP & re, const \fBString\fP & mod)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Compile pattern\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fImod\fP Modifier string 
.RE
.PP

.SS "jpcre2::Regex::Regex (const \fBString\fP & re, \fBUint\fP pcre2_opts)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Compile pattern\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fIpcre2_opts\fP PCRE2 option value 
.RE
.PP

.SS "jpcre2::Regex::Regex (const \fBString\fP & re, \fBUint\fP pcre2_opts, \fBUint\fP opt_bits)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Compiles pattern\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fIpcre2_opts\fP PCRE2 option value 
.br
\fIopt_bits\fP JPCRE2 option value 
.RE
.PP

.SS "jpcre2::Regex::Regex (const \fBRegex\fP & r)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Copy constructor. Performs a deep copy\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIr\fP const \fBRegex\fP& 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "\fBRegex\fP& jpcre2::Regex::addJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Add option to existing JPCRE2 options \fBjpcre2_compile_opts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::addJpcre2Option()\fP 
.PP
\fBRegexReplace::addJpcre2Option()\fP 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::addModifier (const \fBString\fP & mod)\fC [inline]\fP"

.PP
Parse modifier string and add equivalent PCRE2 and JPCRE2 options\&. This is just a wrapper of the original function \fBRegex::changeModifier()\fP provided for convenience\&.
.PP
\fBNote:\fP If speed of operation is very crucial, use \fBRegex::addJpcre2Option()\fP and \fBRegex::addPcre2Option()\fP with equivalent options\&. It will be faster that way\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with \fBERROR::INVALID_MODIFIER\fP as error number if \fBjpcre2::VALIDATE_MODIFIER\fP or \fBjpcre2::ERROR_ALL\fP is set and a wrong modifier was encountered\&. is set and a wrong modifier was encountered\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::addModifier()\fP 
.PP
\fBRegexReplace::addModifier()\fP 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::addPcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Add option to existing PCRE2 options \fBcompile_opts\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::addPcre2Option()\fP 
.PP
\fBRegexReplace::addPcre2Option()\fP 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::changeJpcre2Option (\fBUint\fP opt, bool x)\fC [inline]\fP"

.PP
Add or remove a JPCRE2 option\&. 
.PP
\fBParameters:\fP
.RS 4
\fIopt\fP JPCRE2 option value 
.br
\fIx\fP Add the option if it's true, remove otherwise\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::changeJpcre2Option()\fP 
.PP
\fBRegexReplace::changeJpcre2Option()\fP 
.RE
.PP

.SS "\fBjpcre2::Regex\fP & jpcre2::Regex::changeModifier (const \fBString\fP & mod, bool x)"

.PP
Parse modifier and add/remove equivalent PCRE2 and JPCRE2 options\&. After a call to this function \fBcompile_opts\fP and \fBjpcre2_compile_opts\fP will be properly set\&.
.PP
This function does not initialize or re-initialize options\&. If you want to set options from scratch, initialize them to 0 before calling this function\&.
.PP
\fBNote:\fP If speed of operation is very crucial, use \fBRegex::changeJpcre2Option()\fP and \fBRegex::changePcre2Option()\fP with equivalent options\&. It will be faster that way\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with \fBERROR::INVALID_MODIFIER\fP if \fBjpcre2::VALIDATE_MODIFIER\fP or \fBjpcre2::ERROR_ALL\fP was set and a wrong modifier was encountered\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fImod\fP Modifier string 
.br
\fIx\fP Whether to add or remove option 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::changeModifier()\fP 
.PP
\fBRegexReplace::changeModifier()\fP 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::changePcre2Option (\fBUint\fP opt, bool x)\fC [inline]\fP"

.PP
Add or remove a PCRE2 option\&. 
.PP
\fBParameters:\fP
.RS 4
\fIopt\fP PCRE2 option value 
.br
\fIx\fP Add the option if it's true, remove otherwise\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::changePcre2Option()\fP 
.PP
\fBRegexReplace::changePcre2Option()\fP 
.RE
.PP

.SS "void jpcre2::Regex::compile (void)"

.PP
Compile the regex pattern from class variable \fBpat_str\fP\&. Use options from class variables\&.
.PP
Prefer using one of its variants when compiling pattern for an already declared \fBRegex\fP object\&. A use of 
.PP
.nf
re = Regex("pattern");

.fi
.PP
 (or such) is discouraged\&. see \fC\fBRegex::operator=(const Regex& r)\fP\fP for details\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
void \fBcompile(const String& re, Uint po, Uint jo)\fP 
.PP
void \fBcompile(const String& re, Uint po)\fP 
.PP
void \fBcompile(const String& re, const String& mod)\fP 
.PP
void \fBcompile(const String& re)\fP 
.RE
.PP

.SS "void jpcre2::Regex::compile (const \fBString\fP & re, \fBUint\fP po, \fBUint\fP jo)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set the specified parameters, then compile the pattern using information from class variables\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fIpo\fP PCRE2 option 
.br
\fIjo\fP JPCRE2 option 
.RE
.PP

.SS "void jpcre2::Regex::compile (const \fBString\fP & re, \fBUint\fP po)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set the specified parameters, then compile the pattern using options from class variables\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fIpo\fP PCRE2 option 
.RE
.PP

.SS "void jpcre2::Regex::compile (const \fBString\fP & re, const \fBString\fP & mod)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set the specified parameters, then compile the pattern using options from class variables\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.br
\fImod\fP Modifier string 
.RE
.PP

.SS "void jpcre2::Regex::compile (const \fBString\fP & re)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set the specified parameters, then compile the pattern using options from class variables\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.RE
.PP

.SS "void jpcre2::Regex::deepCopy (const \fBRegex\fP & r)\fC [private]\fP"

.PP
Do a deep copy of \fBrm\fP, \fBrr\fP and \fBcode\fP\&. Copy compiled pattern to a new location, free the old memory and set the new pointer to \fBcode\fP\&.
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIr\fP \fBRegex\fP& 
.RE
.PP

.SS "\fBUint\fP jpcre2::Regex::getJpcre2Option ()\fC [inline]\fP"

.PP
Get JPCRE2 option\&. 
.PP
\fBReturns:\fP
.RS 4
\fBjpcre2_compile_opts\fP 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::getLocale ()\fC [inline]\fP"

.PP
Get locale as a string\&. 
.PP
\fBReturns:\fP
.RS 4
\fBmylocale\fP 
.RE
.PP

.SS "\fBjpcre2::String\fP jpcre2::Regex::getModifier ()"

.PP
Get modifier string calculated from JPCRE2 and PCRE2 options\&. Calculate modifier string from \fBcompile_opts\fP and \fBjpcre2_compile_opts\fP and return it\&.
.PP
Note that, this only gives you the modifiers used for pattern compilation\&. There is no such function to get the action modifiers and neither there's any need for it as action modifiers are required to be passed anew with every action\&. On the other hand, you may set some modifiers to the \fBRegex\fP object and forget about it later or you may want to get the existing modifier and compile the regex again by modifying the existing ones\&.
.PP
Do remember that modifiers (or PCRE2 and JPCRE2 options) do not change or get initialized as long as you don't do that explicitly\&. Calling \fBRegex::setModifier()\fP will re-set them\&.
.PP
\fBMixed or combined modifier\fP\&.
.PP
Some modifier may include other modifiers i\&.e they have the same meaning of some modifiers combined together\&. For example, the 'n' modifier includes the 'u' modifier and together they are equivalent to \fCPCRE2_UTF | PCRE2_UCP\fP\&. When you set a modifier like this, both options get set, and when you remove (\fC\fBRegex::changeModifier()\fP)\fP the 'n', both will get removed 
.PP
\fBReturns:\fP
.RS 4
Calculated modifier string 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::getPattern ()\fC [inline]\fP"

.PP
Get pattern string\&. 
.PP
\fBReturns:\fP
.RS 4
\fBpat_str\fP 
.RE
.PP

.SS "\fBUint\fP jpcre2::Regex::getPcre2Option ()\fC [inline]\fP"

.PP
Get PCRE2 option\&. 
.PP
\fBReturns:\fP
.RS 4
\fBcompile_opts\fP 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::getWarningMessage ()\fC [inline]\fP"

.PP
Get current warning message\&. If multiple warning occurs in a single operation, only the last one will be returned\&. 
.PP
\fBReturns:\fP
.RS 4
\fBcurrent_warning_msg\fP 
.RE
.PP

.SS "void jpcre2::Regex::init ()\fC [inline]\fP, \fC [private]\fP"

.PP
Call \fBRegex::init_vars()\fP and initialize class variables\&. This function should not be attempted to call after creating object\&. To re-initialize class variables at a later stage after creating object, use the \fBRegex::reset()\fP function\&. This function is private and should remain as such\&. 
.SS "void jpcre2::Regex::init (const \fBString\fP & re, const \fBString\fP & mod)\fC [inline]\fP, \fC [private]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP \fBRegex\fP pattern 
.br
\fImod\fP Modifier string 
.RE
.PP

.SS "void jpcre2::Regex::init (const \fBString\fP & re, \fBUint\fP po, \fBUint\fP jo)\fC [inline]\fP, \fC [private]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP \fBRegex\fP pattern 
.br
\fIpo\fP PCRE2 options 
.br
\fIjo\fP JPCRE2 options 
.RE
.PP

.SS "\fBRegexMatch\fP& jpcre2::Regex::initMatch ()\fC [inline]\fP"

.PP
Prepare to call \fBRegexMatch::match()\fP\&. Other options can be set with the setter functions of \fBRegexMatch\fP class in-between the \fBRegex::initMatch()\fP and \fBRegexMatch::match()\fP call\&. 
.PP
\fBReturns:\fP
.RS 4
\fBRegexMatch\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::match()\fP 
.PP
\fBRegexMatch::setSubject(const String& s)\fP 
.PP
\fBRegexMatch::setModifier(const String& mod)\fP 
.PP
\fBRegexMatch::setNumberedSubstringVector(VecNum* vec_num)\fP 
.PP
\fBRegexMatch::setNamedSubstringVector(VecNas* vec_nas)\fP 
.PP
\fBRegexMatch::setNameToNumberMapVector(VecNtN* vec_ntn)\fP 
.RE
.PP

.SS "\fBRegexReplace\fP& jpcre2::Regex::initReplace ()\fC [inline]\fP"

.PP
Prepare to call \fBRegexReplace::replace()\fP\&. Other options can be set with the setter functions of \fBRegexReplace\fP class in-between the \fBRegex::initReplace()\fP and \fBRegexReplace::replace()\fP call\&. 
.PP
\fBReturns:\fP
.RS 4
\fBRegexReplace\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::replace()\fP 
.PP
\fBRegexReplace::setSubject(const String& s)\fP 
.PP
\fBRegexReplace::setModifier(const String& mod)\fP 
.PP
\fBRegexReplace::setReplaceWith(const String& s)\fP 
.PP
\fBRegexReplace::setBufferSize(PCRE2_SIZE x)\fP 
.RE
.PP

.SS "\fBSIZE_T\fP jpcre2::Regex::match (const \fBString\fP & s, const \fBString\fP & mod)\fC [inline]\fP"

.PP
Perform regex match and return match count\&. This function takes the parameters, then sets the parameters to \fBRegexMatch\fP class and calls \fBRegexMatch::match()\fP which returns the result 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Subject string 
.br
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
Match count 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::match()\fP 
.RE
.PP

.SS "\fBSIZE_T\fP jpcre2::Regex::match (const \fBString\fP & s)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
Match count 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::operator= (const \fBRegex\fP & r)\fC [inline]\fP"

.PP
Overloaded assignment operator\&. Performs a deep copy\&.
.PP
Allows assigning objects like this: 
.PP
.nf
Regex re;
re = Regex("new pattern");

.fi
.PP
 However, use of this method is discouraged (Use \fBRegex::compile()\fP instead), because a call to this function requires an additional call to PCRE2 internal function pcre2_code_copy()\&. If the pattern was JIT compiled, it requires another additional JIT compilation because JIT memory was not copied by pcre2_code_copy()\&.
.PP
\fBMemory management:\fP Old JIT memory will be released along with the old compiled code\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIr\fP const \fBRegex\fP& 
.RE
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::replace (const \fBString\fP & mains, const \fBString\fP & repl, const \fBString\fP & mod)\fC [inline]\fP"

.PP
Perform regex replace and return the replaced string\&. This function takes the parameters, then sets the parameters to \fBRegexReplace\fP class and calls \fBRegexReplace::replace()\fP which returns the result\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.br
\fIrepl\fP String to replace with 
.br
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
Resultant string after regex replace 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::replace()\fP 
.RE
.PP

.SS "\fBString\fP jpcre2::Regex::replace (const \fBString\fP & mains, const \fBString\fP & repl)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with PCRE2 error number and error offset 
.RE
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.br
\fIrepl\fP String to replace with 
.RE
.PP
\fBReturns:\fP
.RS 4
Resultant string after regex replace 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::replace()\fP 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::reset ()\fC [inline]\fP"

.PP
Reset all class variables to its default (initial) state\&. Release any memory used by existing compiled pattern\&. 
.PP
\fBReturns:\fP
.RS 4
*this 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Set JPCRE2 option \fBjpcre2_compile_opts\fP (overwrites existing option) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::setJpcre2Option()\fP 
.PP
\fBRegexReplace::setJpcre2Option()\fP 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setLocale (const \fBString\fP & x)\fC [inline]\fP"

.PP
Set the locale \fBmylocale\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Locale string 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setModifier (const \fBString\fP & x)\fC [inline]\fP"

.PP
Set the modifier (overwrite existing JPCRE2 and PCRE2 option)\&. Re-initializes the option bits for PCRE2 and JPCRE2 options, then parses the modifier and sets equivalent PCRE2 and JPCRE2 options\&.
.PP
\fBNote:\fP If speed of operation is very crucial, use \fBRegex::setJpcre2Option()\fP and \fBRegex::setPcre2Option()\fP with equivalent options\&. It will be faster that way\&. 
.PP
\fBExceptions:\fP
.RS 4
\fI\fBjpcre2::Except\fP\fP Throws exception with \fBERROR::INVALID_MODIFIER\fP as error number if \fBjpcre2::VALIDATE_MODIFIER\fP or \fBjpcre2::ERROR_ALL\fP is set and a wrong modifier was encountered\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::setModifier()\fP 
.PP
\fBRegexReplace::setModifier()\fP 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setPattern (const \fBString\fP & re)\fC [inline]\fP"

.PP
Set the Pattern string \fBpat_str\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIre\fP Pattern string 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP

.SS "\fBRegex\fP& jpcre2::Regex::setPcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Set PCRE2 option \fBcompile_opts\fP (overwrites existing option) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBRegex\fP& 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::setPcre2Option()\fP 
.PP
\fBRegexReplace::setPcre2Option()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
