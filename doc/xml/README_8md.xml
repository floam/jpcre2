<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">[![Build<sp/>status<sp/>image](https://travis-ci.org/jpcre2/jpcre2.svg?branch=release)](https://travis-ci.org/jpcre2/jpcre2/)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;description&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">PCRE2<sp/>is<sp/>the<sp/>name<sp/>used<sp/>for<sp/>a<sp/>revised<sp/>API<sp/>for<sp/>the<sp/>PCRE<sp/>library,<sp/>which<sp/>is<sp/>a<sp/>set<sp/>of<sp/>functions,<sp/>written<sp/>in<sp/>C,<sp/>that<sp/>implement<sp/>regular<sp/>expression<sp/>pattern<sp/>matching<sp/>using<sp/>the<sp/>same<sp/>syntax<sp/>and<sp/>semantics<sp/>as<sp/>Perl,<sp/>with<sp/>just<sp/>a<sp/>few<sp/>differences.<sp/>Some<sp/>features<sp/>that<sp/>appeared<sp/>in<sp/>Python<sp/>and<sp/>the<sp/>original<sp/>PCRE<sp/>before<sp/>they<sp/>appeared<sp/>in<sp/>Perl<sp/>are<sp/>also<sp/>available<sp/>using<sp/>the<sp/>Python<sp/>syntax.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>provides<sp/>some<sp/>C++<sp/>wrapper<sp/>functions<sp/>to<sp/>provide<sp/>some<sp/>useful<sp/>utilities<sp/>like<sp/>regex<sp/>match<sp/>and<sp/>regex<sp/>replace.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;requires&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">#Requirements:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>PCRE2<sp/>library<sp/>(`version<sp/>&gt;=10.21`).</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>required<sp/>PCRE2<sp/>version<sp/>is<sp/>not<sp/>available<sp/>in<sp/>the<sp/>official<sp/>channel,<sp/>download<sp/>&lt;a<sp/>href=&quot;https://github.com/jpcre2/pcre2&quot;&gt;my<sp/>fork<sp/>of<sp/>the<sp/>library&lt;/a&gt;<sp/>which<sp/>will<sp/>always<sp/>be<sp/>kept<sp/>compatible<sp/>with<sp/>JPCRE2.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;how-to&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">#Install/Include:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">It<sp/>can<sp/>be<sp/>installed<sp/>as<sp/>a<sp/>separate<sp/>library<sp/>or<sp/>can<sp/>be<sp/>used<sp/>directly<sp/>in<sp/>a<sp/>project<sp/>by<sp/>including<sp/>the<sp/>appropriate<sp/>sources:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>**jpcre2.h**</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>**jpcre2.cpp**</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>**jpcre2_match.cpp**</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>**jpcre2_replace.cpp**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">An<sp/>example<sp/>compile/build<sp/>command<sp/>with<sp/>GCC<sp/>would<sp/>be:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```sh</highlight></codeline>
<codeline><highlight class="normal">g++<sp/>mycpp.cpp<sp/>jpcre2_match.cpp<sp/>jpcre2_replace.cpp<sp/>jpcre2.cpp<sp/>jpcre2.h<sp/>-lpcre2-8</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>your<sp/>PCRE2<sp/>library<sp/>is<sp/>not<sp/>in<sp/>the<sp/>standard<sp/>library<sp/>path,<sp/>then<sp/>add<sp/>the<sp/>path:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```sh</highlight></codeline>
<codeline><highlight class="normal">g++<sp/>-std=c++11<sp/>mycpp.cpp<sp/>...<sp/>-L/path/to/your/pcre2/library<sp/>-lpcre2-8</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Note<sp/>that**<sp/>it<sp/>requires<sp/>the<sp/>PCRE2<sp/>library<sp/>installed<sp/>in<sp/>your<sp/>system.<sp/>If<sp/>it<sp/>is<sp/>not<sp/>already<sp/>installed<sp/>and<sp/>linked<sp/>in<sp/>your<sp/>compiler,<sp/>you<sp/>will<sp/>need<sp/>to<sp/>link<sp/>it<sp/>with<sp/>appropriate<sp/>path<sp/>and<sp/>options.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Installing<sp/>JPCRE2<sp/>as<sp/>a<sp/>library:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>install<sp/>it<sp/>in<sp/>a<sp/>Unix<sp/>based<sp/>system,<sp/>run:</highlight></codeline>
<codeline><highlight class="normal">```sh</highlight></codeline>
<codeline><highlight class="normal">./configure</highlight></codeline>
<codeline><highlight class="normal">make</highlight></codeline>
<codeline><highlight class="normal">sudo<sp/>make<sp/>install</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Now<sp/>`#include<sp/>&lt;jpcre2.h&gt;`<sp/>in<sp/>your<sp/>code<sp/>and<sp/>build/compile<sp/>by<sp/>linking<sp/>with<sp/>both<sp/>JPCRE2<sp/>and<sp/>PCRE2<sp/>library.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">An<sp/>example<sp/>command<sp/>for<sp/>GCC<sp/>would<sp/>be:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```sh</highlight></codeline>
<codeline><highlight class="normal">g++<sp/><sp/>mycpp.cpp<sp/>-ljpcre2-8<sp/>-lpcre2-8<sp/>#sequence<sp/>is<sp/>important</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>are<sp/>in<sp/>a<sp/>non-Unix<sp/>system<sp/>(e.g<sp/>Windows),<sp/>build<sp/>a<sp/>library<sp/>from<sp/>the<sp/>JPCRE2<sp/>sources<sp/>with<sp/>your<sp/>favourite<sp/>IDE<sp/>or<sp/>use<sp/>it<sp/>as<sp/>it<sp/>is.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Notes:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>`PCRE2_CODE_UNIT_WIDTH`<sp/>other<sp/>than<sp/>8<sp/>is<sp/>not<sp/>supported<sp/>in<sp/>this<sp/>version.</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>To<sp/>use<sp/>the<sp/>`PCRE2<sp/>POSIX`<sp/>compatible<sp/>library,<sp/>add<sp/>the<sp/>`-lpcre2-posix`<sp/>along<sp/>with<sp/>the<sp/>others.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#How<sp/>to<sp/>code<sp/>with<sp/>JPCRE2:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;compile&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">##Compile<sp/>a<sp/>pattern</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**First<sp/>create<sp/>a<sp/>`jpcre2::Regex`object**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">(You<sp/>can<sp/>use<sp/>temporary<sp/>object<sp/>too,<sp/>see<sp/>[short<sp/>examples](#short-examples)).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>object<sp/>will<sp/>hold<sp/>the<sp/>pattern,<sp/>modifiers,<sp/>compiled<sp/>pattern,<sp/>error<sp/>and<sp/>warning<sp/>codes.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">jpcre2::Regex<sp/>re;<sp/><sp/><sp/>//Create<sp/>object</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Each<sp/>object<sp/>for<sp/>each<sp/>regex<sp/>pattern.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Compile<sp/>the<sp/>pattern**<sp/>and<sp/>catch<sp/>any<sp/>error<sp/>exception:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">try{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>re.compile()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Invoke<sp/>the<sp/>compile()<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setPattern(pat)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//set<sp/>various<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setModifiers(&quot;Jin&quot;)<sp/><sp/><sp/><sp/><sp/>//sets<sp/>the<sp/>modifier</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.addJpcre2Options(0)<sp/><sp/><sp/><sp/><sp/>//Adds<sp/>the<sp/>jpcre2<sp/>option</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.addPcre2Options(0)<sp/><sp/><sp/><sp/><sp/><sp/>//Adds<sp/>the<sp/>pcre2<sp/>option</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.execute();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Finally<sp/>execute<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//Another<sp/>way<sp/>is<sp/>to<sp/>use<sp/>constructor<sp/>to<sp/>initialize<sp/>and<sp/>compile<sp/>at<sp/>the<sp/>same<sp/>time:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>jpcre2::Regex<sp/>re2(&quot;pattern2&quot;,&quot;mSi&quot;);<sp/><sp/>//S<sp/>is<sp/>an<sp/>optimization<sp/>mod.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>jpcre2::Regex<sp/>re3(&quot;pattern3&quot;,<sp/>PCRE2_ANCHORED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>jpcre2::Regex<sp/>re4(&quot;pattern4&quot;,<sp/>PCRE2_ANCHORED,<sp/>jpcre2::JIT_COMPILE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">catch(int<sp/>e){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*Handle<sp/>error*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;re.getErrorMessage(e)&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>you<sp/>can<sp/>perform<sp/>match<sp/>or<sp/>replace<sp/>against<sp/>the<sp/>pattern.<sp/>Use<sp/>the<sp/>`match()`<sp/>member<sp/>function<sp/>to<sp/>preform<sp/>regex<sp/>match<sp/>and<sp/>the<sp/>`replace()`<sp/>member<sp/>function<sp/>to<sp/>perform<sp/>regex<sp/>replace.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;match&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">##Match</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`match()`<sp/>member<sp/>function<sp/>can<sp/>take<sp/>two<sp/>optional<sp/>arguments<sp/>(subject<sp/>&amp;<sp/>modifier)<sp/>and<sp/>returns<sp/>an<sp/>object<sp/>of<sp/>the<sp/>class<sp/>*RegexMatch*<sp/>which<sp/>then<sp/>in<sp/>turn<sp/>can<sp/>be<sp/>used<sp/>to<sp/>pass<sp/>various<sp/>parameters<sp/>using<sp/><sp/>available<sp/>member<sp/>functions<sp/>(method<sp/>chaining)<sp/>of<sp/>*RegexMatch*<sp/>class.<sp/>The<sp/>end<sp/>function<sp/>in<sp/>the<sp/>method<sp/>chain<sp/>must<sp/>be<sp/>the<sp/>`execute()`<sp/>function<sp/>which<sp/>returns<sp/>the<sp/>result<sp/>(number<sp/>of<sp/>matches<sp/>found).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Perform<sp/>match**<sp/>and<sp/>catch<sp/>any<sp/>error<sp/>exception:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">jpcre2::VecNum<sp/>vec_num;</highlight></codeline>
<codeline><highlight class="normal">try{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>size_t<sp/>count=re.match(subject)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Invoke<sp/>the<sp/>match()<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setModifiers(ac_mod)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Set<sp/>various<sp/>options</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setNumberedSubstringVector(&amp;vec_num)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.addJpcre2Options(jpcre2::VALIDATE_MODIFIER)<sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.execute();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Finally<sp/>execute<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//vec_num<sp/>will<sp/>be<sp/>populated<sp/>with<sp/>maps<sp/>of<sp/>numbered<sp/>substrings.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//count<sp/>is<sp/>the<sp/>total<sp/>number<sp/>of<sp/>matches<sp/>found</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">catch(int<sp/>e){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*Handle<sp/>error*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;re.getErrorMessage(e)&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">**Iterate<sp/>through<sp/>the<sp/>substrings:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">for(size_t<sp/>i=0;i&lt;vec_num.size();++i){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//i=0<sp/>is<sp/>the<sp/>first<sp/>match<sp/>found,<sp/>i=1<sp/>is<sp/>the<sp/>second<sp/>and<sp/>so<sp/>forth</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*//=&gt;C++11</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(auto<sp/>const&amp;<sp/>ent<sp/>:<sp/>vec_num[i]){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//ent.first<sp/>is<sp/>the<sp/>number/position<sp/>of<sp/>substring<sp/>found</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//ent.second<sp/>is<sp/>the<sp/>substring<sp/>itself</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//when<sp/>ent.first<sp/>is<sp/>0,<sp/>ent.second<sp/>is<sp/>the<sp/>total<sp/>match.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for(jpcre2::MapNum::iterator<sp/>ent=vec_num0[i].begin();ent!=vec_num0[i].end();++ent){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\n\t&quot;&lt;&lt;ent-&gt;first&lt;&lt;&quot;:<sp/>&quot;&lt;&lt;ent-&gt;second&lt;&lt;&quot;\n&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">**Access<sp/>a<sp/>substring**<sp/>for<sp/>a<sp/>known<sp/>position:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;vec_num[0][0];<sp/>//<sp/>group<sp/>0<sp/>in<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;vec_num[0][1];<sp/>//<sp/>group<sp/>1<sp/>in<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;vec_num[1][0];<sp/>//<sp/>group<sp/>0<sp/>in<sp/>second<sp/>match</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**To<sp/>get<sp/>named<sp/>substrings<sp/>and/or<sp/>name<sp/>to<sp/>number<sp/>mapping,**<sp/>pass<sp/>pointer<sp/>to<sp/>the<sp/>appropriate<sp/>vectors<sp/>with<sp/>`namedSubstringVector()`<sp/>and/or<sp/>`nameToNumberMapVector()`:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">jpcre2::VecNum<sp/>vec_num;<sp/><sp/><sp/>///Vector<sp/>to<sp/>store<sp/>numbured<sp/>substring<sp/>Map.</highlight></codeline>
<codeline><highlight class="normal">jpcre2::VecNas<sp/>vec_nas;<sp/><sp/><sp/>///Vector<sp/>to<sp/>store<sp/>named<sp/>substring<sp/>Map.</highlight></codeline>
<codeline><highlight class="normal">jpcre2::VecNtN<sp/>vec_ntn;<sp/><sp/><sp/>///Vector<sp/>to<sp/>store<sp/>Named<sp/>substring<sp/>to<sp/>Number<sp/>Map.</highlight></codeline>
<codeline><highlight class="normal">std::string<sp/>ac_mod=&quot;g&quot;;<sp/><sp/><sp/>//<sp/>g<sp/>is<sp/>for<sp/>global<sp/>match.<sp/>Equivalent<sp/>to<sp/>using<sp/>setFindAll()<sp/>or<sp/>FIND_ALL<sp/>in<sp/>addJpcre2Options()</highlight></codeline>
<codeline><highlight class="normal">try{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>re.match(subject)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Invoke<sp/>the<sp/>match()<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setModifiers(ac_mod)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Set<sp/>various<sp/>options</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setNumberedSubstringVector(&amp;vec_num)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setNamedSubstringVector(&amp;vec_nas)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setNameToNumberMapVector(&amp;vec_ntn)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.addJpcre2Options(jpcre2::VALIDATE_MODIFIER)<sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.addPcre2Options(PCRE2_ANCHORED)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.execute();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Finally<sp/>execute<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">catch(int<sp/>e){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*Handle<sp/>error*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;re.getErrorMessage(e)&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">**Iterating**<sp/>through<sp/>the<sp/>vectors<sp/>and<sp/>associated<sp/>maps<sp/>are<sp/>the<sp/>same<sp/>as<sp/>the<sp/>above<sp/>example<sp/>for<sp/>numbered<sp/>substrings.<sp/>The<sp/>size<sp/>of<sp/>all<sp/>three<sp/>vectors<sp/>are<sp/>the<sp/>same<sp/>and<sp/>can<sp/>be<sp/>accessed<sp/>in<sp/>the<sp/>same<sp/>way.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Accesing<sp/>a<sp/>substring<sp/>by<sp/>name:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;vec_nas[0][&quot;name&quot;];<sp/>//<sp/>captured<sp/>group<sp/>by<sp/>name<sp/>in<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;vec_nas[1][&quot;name&quot;];<sp/>//<sp/>captured<sp/>group<sp/>by<sp/>name<sp/>in<sp/>second<sp/>match</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Getting<sp/>the<sp/>position<sp/>of<sp/>a<sp/>captured<sp/>group<sp/>name:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;vec_ntn[0][&quot;name&quot;];<sp/>//<sp/>position<sp/>of<sp/>captured<sp/>group<sp/>&apos;name&apos;<sp/>in<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##Replace/Substitute</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`replace()`<sp/>member<sp/>function<sp/>can<sp/>take<sp/>upto<sp/>three<sp/>optional<sp/>arguments<sp/>(subject,<sp/>replacement<sp/>string<sp/>and<sp/>modifier)<sp/>and<sp/>returns<sp/>an<sp/>object<sp/>of<sp/>the<sp/>class<sp/>*RegexReplace*<sp/>which<sp/>then<sp/>in<sp/>turn<sp/>can<sp/>be<sp/>used<sp/>to<sp/>pass<sp/>various<sp/>parameters<sp/>using<sp/><sp/>available<sp/>member<sp/>functions<sp/>(method<sp/>chaining)<sp/>of<sp/>*RegexReplace*<sp/>class.<sp/>The<sp/>end<sp/>function<sp/>in<sp/>the<sp/>method<sp/>chain<sp/>must<sp/>be<sp/>the<sp/>`execute()`<sp/>function<sp/>which<sp/>returns<sp/>the<sp/>result<sp/>(replaced<sp/>string).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Perform<sp/>replace**<sp/>and<sp/>catch<sp/>any<sp/>error<sp/>exception:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">try{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>re.replace()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Invoke<sp/>the<sp/>replace()<sp/>function</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setSubject(s)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Set<sp/>various<sp/>parameters</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setReplaceWith(s2)<sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.setModifiers(&quot;gE&quot;)<sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.addJpcre2Options(0)<sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.addPcre2Options(0)<sp/><sp/>//...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>.execute();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//Finally<sp/>execute<sp/>it.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//gE<sp/>is<sp/>the<sp/>modifier<sp/>passed<sp/>(global<sp/>and<sp/>unknown-unset-empty).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//Access<sp/>substrings/captured<sp/>groups<sp/>with<sp/>${1234},$1234<sp/>(for<sp/>numbered<sp/>substrings)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>or<sp/>${name}<sp/>(for<sp/>named<sp/>substrings)<sp/>in<sp/>the<sp/>replacement<sp/>part<sp/>i.e<sp/>in<sp/>setReplaceWith()</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">catch(int<sp/>e){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>/*Handle<sp/>error*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;re.getErrorMessage(e)&lt;&lt;std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>pass<sp/>the<sp/>size<sp/>of<sp/>the<sp/>resultant<sp/>string<sp/>with<sp/>`setBufferSize()`<sp/>function,<sp/>make<sp/>sure<sp/>it<sp/>will<sp/>be<sp/>enough<sp/>to<sp/>store<sp/>the<sp/>whole<sp/>resultant<sp/>replaced<sp/>string;<sp/>otherwise<sp/>the<sp/>internal<sp/>replace<sp/>function<sp/>(`pcre2_substitute()`)<sp/>will<sp/>be<sp/>called<sp/>*twice*<sp/>to<sp/>adjust<sp/>the<sp/>size<sp/>of<sp/>the<sp/>buffer<sp/>to<sp/>hold<sp/>the<sp/>whole<sp/>resultant<sp/>string<sp/>in<sp/>order<sp/>to<sp/>avoid<sp/>`PCRE2_ERROR_NOMEMORY`<sp/>error.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#Insight:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Let&apos;s<sp/>take<sp/>a<sp/>quick<sp/>look<sp/>what&apos;s<sp/>inside<sp/>and<sp/>how<sp/>things<sp/>are<sp/>working<sp/>here:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##Namespaces:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Namespace<sp/>|<sp/>Details</highlight></codeline>
<codeline><highlight class="normal">-------<sp/>|<sp/>-------</highlight></codeline>
<codeline><highlight class="normal">`jpcre2`<sp/>|<sp/>This<sp/>is<sp/>the<sp/>namespace<sp/>that<sp/>should<sp/>be<sp/>used<sp/>to<sp/>access<sp/>JPCRE2<sp/>classes<sp/>and<sp/>functions.</highlight></codeline>
<codeline><highlight class="normal">`jpcre2::utils`<sp/>|<sp/>Some<sp/>utility<sp/>functions<sp/>used<sp/>by<sp/>JPCRE2.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##Classes:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Class<sp/>|<sp/>Details</highlight></codeline>
<codeline><highlight class="normal">-----<sp/>|<sp/>-------</highlight></codeline>
<codeline><highlight class="normal">`Regex`<sp/>|<sp/>Main<sp/>class<sp/>that<sp/>holds<sp/>the<sp/>key<sp/>utilities<sp/>of<sp/>JPCRE2.<sp/>Every<sp/>regex<sp/>needs<sp/>an<sp/>object<sp/>of<sp/>this<sp/>class.</highlight></codeline>
<codeline><highlight class="normal">`RegexMatch`<sp/>|<sp/>Contains<sp/>functions<sp/>to<sp/>perform<sp/>regex<sp/>matching<sp/>according<sp/>to<sp/>the<sp/>compiled<sp/>pattern.</highlight></codeline>
<codeline><highlight class="normal">`RegexReplace`<sp/>|<sp/>Contains<sp/>functions<sp/>to<sp/>perform<sp/>replacement<sp/>according<sp/>to<sp/>the<sp/>compiled<sp/>pattern.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;functions&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">###Functions<sp/>at<sp/>a<sp/>glance:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">////Class<sp/>Regex</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Constructors</highlight></codeline>
<codeline><highlight class="normal">Regex(const<sp/>String&amp;<sp/>re,<sp/>Uint<sp/>pcre2_opts,<sp/>Uint<sp/>opt_bits)</highlight></codeline>
<codeline><highlight class="normal">Regex(const<sp/>String&amp;<sp/>re,<sp/>Uint<sp/>pcre2_opts)</highlight></codeline>
<codeline><highlight class="normal">Regex(const<sp/>String&amp;<sp/>re,<sp/>const<sp/>String&amp;<sp/>mod)</highlight></codeline>
<codeline><highlight class="normal">Regex(const<sp/>String&amp;<sp/>re)</highlight></codeline>
<codeline><highlight class="normal">Regex(const<sp/>Regex&amp;<sp/>r)</highlight></codeline>
<codeline><highlight class="normal">Regex()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Overloaded<sp/>assignment<sp/>operator</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>operator=(const<sp/>Regex&amp;<sp/>r)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//Getters</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getModifier()</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getPattern()</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getLocale()<sp/><sp/><sp/><sp/><sp/><sp/><sp/>///Gets<sp/>LC_CTYPE</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getPcre2Options()</highlight></codeline>
<codeline><highlight class="normal">uint32_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getJpcre2Options()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///Error<sp/>handling</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getErrorMessage(int<sp/>err_num,<sp/>PCRE2_SIZE<sp/>err_offset)</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getErrorMessage(int<sp/>err_num)</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getErrorMessage()</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getWarningMessage()</highlight></codeline>
<codeline><highlight class="normal">int<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getErrorNumber()</highlight></codeline>
<codeline><highlight class="normal">PCRE2_SIZE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getErrorOffset()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile(const<sp/>String&amp;<sp/>re,<sp/>Uint<sp/>pcre2_opts,<sp/>Uint<sp/>jpcre2_opts)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile(const<sp/>String&amp;<sp/>re,<sp/>Uint<sp/>pcre2_opts)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile(const<sp/>String&amp;<sp/>re,<sp/>const<sp/>String&amp;<sp/>mod)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile(const<sp/>String&amp;<sp/>re)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compile()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setPattern(const<sp/>String&amp;<sp/>re)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setModifiers(const<sp/>String&amp;<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setLocale(const<sp/>String&amp;<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setPcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addPcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">Regex&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removePcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute()<sp/><sp/>//executes<sp/>the<sp/>compile<sp/>operation.</highlight></codeline>
<codeline><highlight class="normal">void<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec()<sp/><sp/><sp/><sp/><sp/>//wrapper<sp/>of<sp/>execute()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match(const<sp/>String&amp;<sp/>s,<sp/>const<sp/>String&amp;<sp/>mod)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match(const<sp/>String&amp;<sp/>s)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>match()</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace(const<sp/>String&amp;<sp/>mains,<sp/>const<sp/>String&amp;<sp/>repl,<sp/>const<sp/>String&amp;<sp/>mod)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace(const<sp/>String&amp;<sp/>mains,const<sp/>String&amp;<sp/>repl)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace(const<sp/>String&amp;<sp/>mains)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>replace()</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">////Class<sp/>RegexMatch</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setNumberedSubstringVector(VecNum*<sp/>vec_num)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setNamedSubstringVector(VecNas*<sp/>vec_nas)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setNameToNumberMapVector(VecNtN*<sp/>vec_ntn)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setSubject(const<sp/>String&amp;<sp/>s)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setModifiers(const<sp/>String&amp;<sp/>s)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setPcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setFindAll(bool<sp/>x=true)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addPcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexMatch&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>removePcre2Options(Uint<sp/>x)<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SIZE_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute()<sp/><sp/>//executes<sp/>the<sp/>match<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">SIZE_T<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec()<sp/><sp/><sp/><sp/><sp/>//wrapper<sp/>of<sp/>execute()</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">////Class<sp/>RegexReplace</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>setSubject(const<sp/>String&amp;<sp/>s)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>setReplaceWith(const<sp/>String&amp;<sp/>s)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>setModifiers(const<sp/>String&amp;<sp/>s)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>setBufferSize(PCRE2_SIZE<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>setJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>setPcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>addJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>addPcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>removeJpcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">RegexReplace&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>removePcre2Options(Uint<sp/>x)</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>execute()<sp/>//executes<sp/>the<sp/>replacement<sp/>operation</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec()<sp/><sp/><sp/><sp/>//wrapper<sp/>of<sp/>exec()</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">////Namespace<sp/>jpcre2::utils</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toString(int<sp/>a)</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toString(char<sp/>a)</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toString(const<sp/>char*<sp/>a)</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toString(PCRE2_UCHAR*<sp/>a)</highlight></codeline>
<codeline><highlight class="normal">String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getPcre2ErrorMessage(int<sp/>err_num)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;modifiers&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">###Modifiers:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**JPCRE2**<sp/>uses<sp/>modifiers<sp/>to<sp/>control<sp/>various<sp/>options,<sp/>type,<sp/>behavior<sp/>of<sp/>the<sp/>regex<sp/>and<sp/>its&apos;<sp/>interactions<sp/>with<sp/>different<sp/>functions<sp/>that<sp/>uses<sp/>it.<sp/>Two<sp/>types<sp/>of<sp/>modifiers<sp/>are<sp/>available:<sp/>*compile<sp/>modifiers*<sp/>and<sp/>*action<sp/>modifiers*:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;compile-modifiers&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">####Compile<sp/>modifiers:</highlight></codeline>
<codeline><highlight class="normal">Modifiers<sp/>define<sp/>the<sp/>behavior<sp/>of<sp/>a<sp/>regex<sp/>pattern.<sp/>They<sp/>have<sp/>more<sp/>or<sp/>less<sp/>the<sp/>same<sp/>meaning<sp/>as<sp/>the<sp/>[PHP<sp/>regex<sp/>modifiers](https://php.net/manual/en/reference.pcre.pattern.modifiers.php)<sp/>except<sp/>for<sp/>`e,<sp/>j<sp/>and<sp/>n`<sp/>(marked<sp/>with<sp/>&lt;sup&gt;\*&lt;/sup&gt;).<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Modifier<sp/>|<sp/>Details</highlight></codeline>
<codeline><highlight class="normal">--------<sp/>|<sp/>-------</highlight></codeline>
<codeline><highlight class="normal">`e`&lt;sup&gt;\*&lt;/sup&gt;<sp/>|<sp/>Unset<sp/>back-references<sp/>in<sp/>the<sp/>pattern<sp/>will<sp/>match<sp/>to<sp/>empty<sp/>strings.<sp/>Equivalent<sp/>to<sp/>`PCRE2_MATCH_UNSET_BACKREF`.</highlight></codeline>
<codeline><highlight class="normal">`i`<sp/>|<sp/>Case-insensitive.<sp/>Equivalent<sp/>to<sp/>`PCRE2_CASELESS`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">`j`&lt;sup&gt;\*&lt;/sup&gt;<sp/>|<sp/>`\u<sp/>\U<sp/>\x`<sp/>and<sp/>unset<sp/>back-referencees<sp/>will<sp/>act<sp/>as<sp/>JavaScript<sp/>standard.<sp/>&lt;ul&gt;&lt;li&gt;&lt;code&gt;\U&lt;/code&gt;<sp/>matches<sp/>an<sp/>upper<sp/>case<sp/>&quot;U&quot;<sp/>character<sp/>(by<sp/>default<sp/>it<sp/>causes<sp/>a<sp/>compile<sp/>time<sp/>error<sp/>if<sp/>this<sp/>option<sp/>is<sp/>not<sp/>set).&lt;/li&gt;&lt;li&gt;&lt;code&gt;\u&lt;/code&gt;<sp/>matches<sp/>a<sp/>lower<sp/>case<sp/>&quot;u&quot;<sp/>character<sp/>unless<sp/>it<sp/>is<sp/>followed<sp/>by<sp/>four<sp/>hexadecimal<sp/>digits,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>hexadecimal<sp/>number<sp/>defines<sp/>the<sp/>code<sp/>point<sp/>to<sp/>match<sp/>(by<sp/>default<sp/>it<sp/>causes<sp/>a<sp/>compile<sp/>time<sp/>error<sp/>if<sp/>this<sp/>option<sp/>is<sp/>not<sp/>set).&lt;/li&gt;&lt;li&gt;&lt;code&gt;\x&lt;/code&gt;<sp/>matches<sp/>a<sp/>lower<sp/>case<sp/>&quot;x&quot;<sp/>character<sp/>unless<sp/>it<sp/>is<sp/>followed<sp/>by<sp/>two<sp/>hexadecimal<sp/>digits,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>hexadecimal<sp/>number<sp/>defines<sp/>the<sp/>code<sp/>point<sp/>to<sp/>match<sp/>(By<sp/>default,<sp/>as<sp/>in<sp/>Perl,<sp/>a<sp/>hexadecimal<sp/>number<sp/>is<sp/>always<sp/>expected<sp/>after<sp/>&lt;code&gt;\x&lt;/code&gt;,<sp/>but<sp/>it<sp/>may<sp/>have<sp/>zero,<sp/>one,<sp/>or<sp/>two<sp/>digits<sp/>(so,<sp/>for<sp/>example,<sp/>&lt;code&gt;\xz&lt;/code&gt;<sp/>matches<sp/>a<sp/>binary<sp/>zero<sp/>character<sp/>followed<sp/>by<sp/>z)<sp/>).&lt;/li&gt;&lt;li&gt;Unset<sp/>back-references<sp/>in<sp/>the<sp/>pattern<sp/>will<sp/>match<sp/>to<sp/>empty<sp/>strings.&lt;/li&gt;&lt;/ul&gt;</highlight></codeline>
<codeline><highlight class="normal">`m`<sp/>|<sp/>Multi-line<sp/>regex.<sp/>Equivalent<sp/>to<sp/>`PCRE2_MULTILINE`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">`n`&lt;sup&gt;\*&lt;/sup&gt;<sp/>|<sp/>Enable<sp/>Unicode<sp/>support<sp/>for<sp/>`\w<sp/>\d`<sp/>etc...<sp/>in<sp/>pattern.<sp/>Equivalent<sp/>to<sp/>`PCRE2_UTF<sp/>|<sp/>PCRE2_UCP`.</highlight></codeline>
<codeline><highlight class="normal">`s`<sp/>|<sp/>If<sp/>this<sp/>modifier<sp/>is<sp/>set,<sp/>a<sp/>dot<sp/>meta-character<sp/>in<sp/>the<sp/>pattern<sp/>matches<sp/>all<sp/>characters,<sp/>including<sp/>newlines.<sp/>Equivalent<sp/>to<sp/>`PCRE2_DOTALL`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">`u`<sp/>|<sp/>Enable<sp/>UTF<sp/>support.Treat<sp/>pattern<sp/>and<sp/>subjects<sp/>as<sp/>UTF<sp/>strings.<sp/>It<sp/>is<sp/>equivalent<sp/>to<sp/>`PCRE2_UTF`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">`x`<sp/>|<sp/>Whitespace<sp/>data<sp/>characters<sp/>in<sp/>the<sp/>pattern<sp/>are<sp/>totally<sp/>ignored<sp/>except<sp/>when<sp/>escaped<sp/>or<sp/>inside<sp/>a<sp/>character<sp/>class,<sp/>enables<sp/>commentary<sp/>in<sp/>pattern.<sp/>Equivalent<sp/>to<sp/>`PCRE2_EXTENDED`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">`A`<sp/>|<sp/>Match<sp/>only<sp/>at<sp/>the<sp/>first<sp/>position.<sp/>It<sp/>is<sp/>equivalent<sp/>to<sp/>`PCRE2_ANCHORED`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">`D`<sp/>|<sp/>A<sp/>dollar<sp/>meta-character<sp/>in<sp/>the<sp/>pattern<sp/>matches<sp/>only<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>subject<sp/>string.<sp/>Without<sp/>this<sp/>modifier,<sp/>a<sp/>dollar<sp/>also<sp/>matches<sp/>immediately<sp/>before<sp/>the<sp/>final<sp/>character<sp/>if<sp/>it<sp/>is<sp/>a<sp/>newline<sp/>(but<sp/>not<sp/>before<sp/>any<sp/>other<sp/>newlines).<sp/>This<sp/>modifier<sp/>is<sp/>ignored<sp/>if<sp/>*m*<sp/>modifier<sp/>is<sp/>set.<sp/>Equivalent<sp/>to<sp/>`PCRE2_DOLLAR_ENDONLY`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">`J`<sp/>|<sp/>Allow<sp/>duplicate<sp/>names<sp/>for<sp/>subpatterns.<sp/>Equivalent<sp/>to<sp/>`PCRE2_DUPNAMES`<sp/>option.</highlight></codeline>
<codeline><highlight class="normal">`S`<sp/>|<sp/>When<sp/>a<sp/>pattern<sp/>is<sp/>going<sp/>to<sp/>be<sp/>used<sp/>several<sp/>times,<sp/>it<sp/>is<sp/>worth<sp/>spending<sp/>more<sp/>time<sp/>analyzing<sp/>it<sp/>in<sp/>order<sp/>to<sp/>speed<sp/>up<sp/>the<sp/>time<sp/>taken<sp/>for<sp/>matching/replacing.<sp/>It<sp/>may<sp/>also<sp/>be<sp/>beneficial<sp/>for<sp/>a<sp/>very<sp/>long<sp/>subject<sp/>string<sp/>or<sp/>pattern.<sp/>Equivalent<sp/>to<sp/>an<sp/>extra<sp/>compilation<sp/>with<sp/>JIT_COMPILER<sp/>with<sp/>the<sp/>option<sp/>`PCRE2_JIT_COMPLETE`.</highlight></codeline>
<codeline><highlight class="normal">`U`<sp/>|<sp/>This<sp/>modifier<sp/>inverts<sp/>the<sp/>&quot;greediness&quot;<sp/>of<sp/>the<sp/>quantifiers<sp/>so<sp/>that<sp/>they<sp/>are<sp/>not<sp/>greedy<sp/>by<sp/>default,<sp/>but<sp/>become<sp/>greedy<sp/>if<sp/>followed<sp/>by<sp/>`?`.<sp/>Equivalent<sp/>to<sp/>`PCRE2_UNGREEDY`<sp/>option.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">####Action<sp/>modifiers:</highlight></codeline>
<codeline><highlight class="normal">These<sp/>modifiers<sp/>are<sp/>not<sp/>compiled<sp/>in<sp/>the<sp/>regex<sp/>itself,<sp/>rather<sp/>it<sp/>is<sp/>used<sp/>per<sp/>call<sp/>of<sp/>each<sp/>match<sp/>or<sp/>replace<sp/>function.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Modifier<sp/>|<sp/>Details</highlight></codeline>
<codeline><highlight class="normal">------<sp/>|<sp/>------</highlight></codeline>
<codeline><highlight class="normal">`A`<sp/>|<sp/>Match<sp/>at<sp/>start.<sp/>Equivalent<sp/>to<sp/>`PCRE2_ANCHORED`.<sp/>Can<sp/>be<sp/>used<sp/>in<sp/>match<sp/>operation.<sp/>Setting<sp/>this<sp/>option<sp/>only<sp/>at<sp/>match<sp/>time<sp/>(i.e<sp/>regex<sp/>was<sp/>not<sp/>compiled<sp/>with<sp/>this<sp/>option)<sp/>will<sp/>disable<sp/>optimization<sp/>during<sp/>match<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">`e`<sp/>|<sp/>Replaces<sp/>unset<sp/>group<sp/>with<sp/>empty<sp/>string.<sp/>Equivalent<sp/>to<sp/>`PCRE2_SUBSTITUTE_UNSET_EMPTY`.<sp/>Can<sp/>be<sp/>used<sp/>in<sp/>replace<sp/>operation.</highlight></codeline>
<codeline><highlight class="normal">`E`<sp/>|<sp/>Extension<sp/>of<sp/>`e`<sp/>modifier.<sp/>Sets<sp/>even<sp/>unknown<sp/>groups<sp/>to<sp/>empty<sp/>string.<sp/>Equivalent<sp/>to<sp/>`PCRE2_SUBSTITUTE_UNSET_EMPTY<sp/>|<sp/>PCRE2_SUBSTITUTE_UNKNOWN_UNSET`.</highlight></codeline>
<codeline><highlight class="normal">`g`<sp/>|<sp/>Global.<sp/>Will<sp/>perform<sp/>global<sp/>matching<sp/>or<sp/>replacement<sp/>if<sp/>passed.</highlight></codeline>
<codeline><highlight class="normal">`x`<sp/>|<sp/>Extended<sp/>replacement<sp/>operation.<sp/>It<sp/>enables<sp/>some<sp/>Bash<sp/>like<sp/>features:<sp/>`${&lt;n&gt;:-&lt;string&gt;}`<sp/>and<sp/>`${&lt;n&gt;:+&lt;string1&gt;:&lt;string2&gt;}`.&lt;br&gt;`&lt;n&gt;`<sp/>may<sp/>be<sp/>a<sp/>group<sp/>number<sp/>or<sp/>a<sp/>name.<sp/>The<sp/>first<sp/>form<sp/>specifies<sp/>a<sp/>default<sp/>value.<sp/>If<sp/>group<sp/>`&lt;n&gt;`<sp/>is<sp/>set,<sp/>its<sp/>value<sp/>is<sp/>inserted;<sp/>if<sp/>not,<sp/>`&lt;string&gt;`<sp/>is<sp/>expanded<sp/>and<sp/>the<sp/>result<sp/>is<sp/>inserted.<sp/>The<sp/>second<sp/>form<sp/>specifies<sp/>strings<sp/>that<sp/>are<sp/>expanded<sp/>and<sp/>inserted<sp/>when<sp/>group<sp/>`&lt;n&gt;`<sp/>is<sp/>set<sp/>or<sp/>unset,<sp/>respectively.<sp/>The<sp/>first<sp/>form<sp/>is<sp/>just<sp/>a<sp/>convenient<sp/>shorthand<sp/>for<sp/>`${&lt;n&gt;:+${&lt;n&gt;}:&lt;string&gt;}`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;jpcre2-options&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###JPCRE2<sp/>options:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">These<sp/>options<sp/>are<sp/>meaningful<sp/>only<sp/>for<sp/>the<sp/>**JPCRE2**<sp/>library<sp/>itself<sp/>not<sp/>the<sp/>original<sp/>**PCRE2**<sp/>library.<sp/>We<sp/>use<sp/>the<sp/>`addJpcre2Options()`<sp/>function<sp/>to<sp/>pass<sp/>these<sp/>options.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Option<sp/>|<sp/>Details</highlight></codeline>
<codeline><highlight class="normal">------<sp/>|<sp/>------</highlight></codeline>
<codeline><highlight class="normal">`jpcre2::NONE`<sp/>|<sp/>This<sp/>is<sp/>the<sp/>default<sp/>option.<sp/>Equivalent<sp/>to<sp/>0<sp/>(zero).</highlight></codeline>
<codeline><highlight class="normal">`jpcre2::VALIDATE_MODIFIER`<sp/>|<sp/>If<sp/>this<sp/>option<sp/>is<sp/>passed,<sp/>modifiers<sp/>will<sp/>be<sp/>subject<sp/>to<sp/>validation<sp/>check.<sp/>If<sp/>any<sp/>of<sp/>them<sp/>is<sp/>invalid<sp/>then<sp/>a<sp/>`jpcre2::ERROR::INVALID_MODIFIER`<sp/>error<sp/>exception<sp/>will<sp/>be<sp/>thrown.<sp/>You<sp/>can<sp/>get<sp/>the<sp/>error<sp/>message<sp/>with<sp/>`getErrorMessage(error_code)`<sp/>member<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">`jpcre2::FIND_ALL`<sp/>|<sp/>This<sp/>option<sp/>will<sp/>do<sp/>a<sp/>global<sp/>matching<sp/>if<sp/>passed<sp/>during<sp/>matching.<sp/>The<sp/>same<sp/>can<sp/>be<sp/>achieved<sp/>by<sp/>passing<sp/>the<sp/>&apos;g&apos;<sp/>modifier<sp/>with<sp/>`setModifiers()`<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">`jpcre2::ERROR_ALL`<sp/>|<sp/>Treat<sp/>warnings<sp/>as<sp/>errors<sp/>and<sp/>throw<sp/>exception.</highlight></codeline>
<codeline><highlight class="normal">`jpcre2::JIT_COMPILE`<sp/>|<sp/>This<sp/>is<sp/>same<sp/>as<sp/>passing<sp/>the<sp/>**S**<sp/>modifier<sp/>during<sp/>pattern<sp/>compilation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###PCRE2<sp/>options:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">While<sp/>having<sp/>its<sp/>own<sp/>way<sp/>of<sp/>doing<sp/>things,<sp/>JPCRE2<sp/>also<sp/>supports<sp/>the<sp/>traditional<sp/>PCRE2<sp/>options<sp/>to<sp/>be<sp/>passed.<sp/>We<sp/>use<sp/>the<sp/>`addPcre2Options()`<sp/>function<sp/>to<sp/>pass<sp/>the<sp/>PCRE2<sp/>options.<sp/>These<sp/>options<sp/>are<sp/>the<sp/>same<sp/>as<sp/>the<sp/>PCRE2<sp/>library<sp/>and<sp/>have<sp/>the<sp/>same<sp/>meaning.<sp/>For<sp/>example<sp/>instead<sp/>of<sp/>passing<sp/>the<sp/>&apos;g&apos;<sp/>modifier<sp/>to<sp/>the<sp/>replacement<sp/>operation<sp/>we<sp/>can<sp/>also<sp/>pass<sp/>its<sp/>PCRE2<sp/>equivalent<sp/>*PCRE2_SUBSTITUTE_GLOBAL*<sp/>to<sp/>have<sp/>the<sp/>same<sp/>effect.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;div<sp/>id=&quot;short-examples&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline><highlight class="normal">#Short<sp/>examples</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">size_t<sp/>count;</highlight></codeline>
<codeline><highlight class="normal">///Check<sp/>if<sp/>string<sp/>matches<sp/>the<sp/>pattern</highlight></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>The<sp/>following<sp/>uses<sp/>a<sp/>temporary<sp/>Regex<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">if(jpcre2::Regex(&quot;(\\d)|(\\w)&quot;).match(&quot;I<sp/>am<sp/>the<sp/>subject&quot;).execute())<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nmatched&quot;;</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nno<sp/>match&quot;;</highlight></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>The<sp/>above<sp/>is<sp/>a<sp/>good<sp/>example<sp/>of<sp/>using<sp/>temporary<sp/>objects<sp/>to<sp/>perform<sp/>match<sp/>(or<sp/>replace)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Using<sp/>the<sp/>modifier<sp/>S<sp/>(i.e<sp/>jpcre2::JIT_COMPILE)<sp/>with<sp/>temporary<sp/>object<sp/>may<sp/>or<sp/>may<sp/>not<sp/>give<sp/>you</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>any<sp/>performance<sp/>boost<sp/>(depends<sp/>on<sp/>the<sp/>complexity<sp/>of<sp/>the<sp/>pattern).<sp/>The<sp/>more<sp/>complex<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>pattern<sp/>gets<sp/>the<sp/>more<sp/>sense<sp/>the<sp/>S<sp/>modifier<sp/>makes.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">///If<sp/>you<sp/>want<sp/>to<sp/>match<sp/>all<sp/>and<sp/>get<sp/>the<sp/>match<sp/>count,<sp/>use<sp/>the<sp/>action<sp/>modifier<sp/>&apos;g&apos;:</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\n&quot;&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>jpcre2::Regex(&quot;(\\d)|(\\w)&quot;,&quot;m&quot;).match(&quot;I<sp/>am<sp/>the<sp/>subject&quot;).setModifiers(&quot;g&quot;).execute();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Modifiers<sp/>passed<sp/>to<sp/>the<sp/>Regex<sp/>constructor<sp/>or<sp/>with<sp/>compile()<sp/>function<sp/>are<sp/>compile<sp/>modifiers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Modifiers<sp/>passed<sp/>with<sp/>the<sp/>match()<sp/>or<sp/>replace()<sp/>functions<sp/>are<sp/>action<sp/>modifiers</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>Substrings/Captured<sp/>groups:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>***<sp/>Getting<sp/>captured<sp/>groups/substring<sp/>***</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>captured<sp/>groups<sp/>or<sp/>substrings<sp/>are<sp/>stored<sp/>in<sp/>maps<sp/>for<sp/>each<sp/>match,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>and<sp/>each<sp/>match<sp/>is<sp/>stored<sp/>in<sp/>a<sp/>vector.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Thus<sp/>captured<sp/>groups<sp/>are<sp/>in<sp/>a<sp/>vector<sp/>of<sp/>maps.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>PCRE2<sp/>provides<sp/>two<sp/>types<sp/>of<sp/>substrings:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/>1.<sp/>numbered<sp/>(index)<sp/>substring</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/>2.<sp/>named<sp/>substring</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>For<sp/>the<sp/>above<sp/>two,<sp/>we<sp/>have<sp/>two<sp/>vectors<sp/>respectively:</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/>1.<sp/>jpcre2::VecNum<sp/>(Corresponding<sp/>map:<sp/>jpcre2::MapNum)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/>2.<sp/>jpcre2::VecNas<sp/>(Corresponding<sp/>map:<sp/>jpcre2::MapNas)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Another<sp/>additional<sp/>vector<sp/>is<sp/>available<sp/>to<sp/>get<sp/>the<sp/>substring<sp/>position/number</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>for<sp/>a<sp/>particular<sp/>captured<sp/>group<sp/>by<sp/>name.<sp/>It&apos;s<sp/>a<sp/>vector<sp/>of<sp/>name<sp/>to<sp/>number<sp/>maps</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/><sp/>*<sp/>jpcre2::VecNtN<sp/>(Corresponding<sp/>map:<sp/>jpcre2:MapNtN)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>*****<sp/>Get<sp/>numbered<sp/>substring<sp/>*****<sp/>///</highlight></codeline>
<codeline><highlight class="normal">jpcre2::VecNum<sp/>vec_num;</highlight></codeline>
<codeline><highlight class="normal">count<sp/>=<sp/></highlight></codeline>
<codeline><highlight class="normal">jpcre2::Regex(&quot;(\\w+)\\s*(\\d+)&quot;,&quot;m&quot;).match(&quot;I<sp/>am<sp/>23,<sp/>I<sp/>am<sp/>digits<sp/>10&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setModifiers(&quot;g&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setNumberedSubstringVector(&amp;vec_num)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.exec();</highlight></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal">*<sp/>count<sp/>(the<sp/>return<sp/>value)<sp/>is<sp/>guaranteed<sp/>to<sp/>give<sp/>you<sp/>the<sp/>correct<sp/>number<sp/>of<sp/>matches,</highlight></codeline>
<codeline><highlight class="normal">*<sp/>while<sp/>vec_num.size()<sp/>may<sp/>give<sp/>you<sp/>wrong<sp/>result<sp/>if<sp/>any<sp/>match<sp/>result</highlight></codeline>
<codeline><highlight class="normal">*<sp/>was<sp/>failed<sp/>to<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>vector.<sp/>This<sp/>should<sp/>not<sp/>happen</highlight></codeline>
<codeline><highlight class="normal">*<sp/>i.e<sp/>count<sp/>and<sp/>vec_num.size()<sp/>should<sp/>always<sp/>be<sp/>equal.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>*/</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nNumber<sp/>of<sp/>matches:<sp/>&quot;&lt;&lt;count/*<sp/>or<sp/>vec_num.size()*/;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///Now<sp/>vec_num<sp/>is<sp/>populated<sp/>with<sp/>numbered<sp/>substrings<sp/>for<sp/>each<sp/>match</highlight></codeline>
<codeline><highlight class="normal">///The<sp/>size<sp/>of<sp/>vec_num<sp/>is<sp/>the<sp/>total<sp/>match<sp/>count</highlight></codeline>
<codeline><highlight class="normal">///vec_num[0]<sp/>is<sp/>the<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="normal">///The<sp/>type<sp/>of<sp/>vec_num[0]<sp/>is<sp/>jpcre2::MapNum</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nTotal<sp/>match<sp/>of<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_num[0][0];<sp/><sp/><sp/><sp/><sp/><sp/>///Total<sp/>match<sp/>(group<sp/>0)<sp/>from<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>1<sp/>of<sp/>frist<sp/>match:<sp/>&quot;&lt;&lt;vec_num[0][1];<sp/>///captured<sp/>group<sp/>1<sp/>from<sp/>first<sp/>match<sp/></highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>2<sp/>of<sp/>frist<sp/>match:<sp/>&quot;&lt;&lt;vec_num[0][2];<sp/>///captured<sp/>group<sp/>2<sp/>from<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>3<sp/>of<sp/>frist<sp/>match:<sp/>&quot;&lt;&lt;vec_num[0][3];<sp/>///captured<sp/>group<sp/>3<sp/>doesn&apos;t<sp/>exist,<sp/>it<sp/>will<sp/>give<sp/>you<sp/>empty<sp/>string</highlight></codeline>
<codeline><highlight class="normal">///Using<sp/>the<sp/>[]<sp/>operator<sp/>with<sp/>jpcre2::MapNum<sp/>will<sp/>create<sp/>new<sp/>element<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline><highlight class="normal">///<sp/>i.e<sp/>vec_num[0][3]<sp/>were<sp/>created<sp/>in<sp/>the<sp/>above<sp/>example.</highlight></codeline>
<codeline><highlight class="normal">///This<sp/>should<sp/>be<sp/>ok,<sp/>if<sp/>existence<sp/>of<sp/>a<sp/>particular<sp/>substring<sp/>is<sp/>not<sp/>important</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///If<sp/>the<sp/>existence<sp/>of<sp/>a<sp/>substring<sp/>is<sp/>important,<sp/>use<sp/>the<sp/>std::map::find()<sp/>or<sp/>std::map::at()<sp/>(&gt;=C++11)<sp/>function<sp/>to<sp/>access<sp/>map<sp/>elements</highlight></codeline>
<codeline><highlight class="normal">/*<sp/>//&gt;=C++11</highlight></codeline>
<codeline><highlight class="normal">try{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///This<sp/>will<sp/>throw<sp/>exception,<sp/>because<sp/>substring<sp/>4<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>4<sp/>of<sp/>frist<sp/>match:<sp/>&quot;&lt;&lt;vec_num[0].at(4);</highlight></codeline>
<codeline><highlight class="normal">}<sp/>catch<sp/>(std::logic_error<sp/>e){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>4<sp/>doesn&apos;t<sp/>exist&quot;;</highlight></codeline>
<codeline><highlight class="normal">}*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///There<sp/>were<sp/>two<sp/>matches<sp/>found<sp/>(vec_num.size()<sp/>==<sp/>2)<sp/>in<sp/>the<sp/>above<sp/>example</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nTotal<sp/>match<sp/>of<sp/>second<sp/>match:<sp/>&quot;&lt;&lt;vec_num[1][0];<sp/><sp/><sp/><sp/><sp/><sp/>///Total<sp/>match<sp/>(group<sp/>0)<sp/>from<sp/>second<sp/>match</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>1<sp/>of<sp/>second<sp/>match:<sp/>&quot;&lt;&lt;vec_num[1][1];<sp/>///captured<sp/>group<sp/>1<sp/>from<sp/>second<sp/>match<sp/></highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>2<sp/>of<sp/>second<sp/>match:<sp/>&quot;&lt;&lt;vec_num[1][2];<sp/>///captured<sp/>group<sp/>2<sp/>from<sp/>second<sp/>match</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///<sp/>*****<sp/>Get<sp/>named<sp/>substring<sp/>*****<sp/>///</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">jpcre2::VecNas<sp/>vec_nas;</highlight></codeline>
<codeline><highlight class="normal">jpcre2::VecNtN<sp/>vec_ntn;<sp/>///<sp/>We<sp/>will<sp/>get<sp/>name<sp/>to<sp/>number<sp/>map<sp/>vector<sp/>too</highlight></codeline>
<codeline><highlight class="normal">count<sp/>=<sp/></highlight></codeline>
<codeline><highlight class="normal">jpcre2::Regex(&quot;(?&lt;word&gt;\\w+)\\s*(?&lt;digit&gt;\\d+)&quot;,&quot;m&quot;).match(&quot;I<sp/>am<sp/>23,<sp/>I<sp/>am<sp/>digits<sp/>10&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setModifiers(&quot;g&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///.setNumberedSubstringVector(vec_num)<sp/>///<sp/>We<sp/>don&apos;t<sp/>need<sp/>it<sp/>in<sp/>this<sp/>example</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setNamedSubstringVector(&amp;vec_nas)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setNameToNumberMapVector(&amp;vec_ntn)<sp/>///<sp/>Additional<sp/>(name<sp/>to<sp/>number<sp/>maps)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.execute();</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nNumber<sp/>of<sp/>matches:<sp/>&quot;&lt;&lt;vec_nas.size()/*<sp/>or<sp/>count<sp/>*/;</highlight></codeline>
<codeline><highlight class="normal">///Now<sp/>vec_nas<sp/>is<sp/>populated<sp/>with<sp/>named<sp/>substrings<sp/>for<sp/>each<sp/>match</highlight></codeline>
<codeline><highlight class="normal">///The<sp/>size<sp/>of<sp/>vec_nas<sp/>is<sp/>the<sp/>total<sp/>match<sp/>count</highlight></codeline>
<codeline><highlight class="normal">///vec_nas[0]<sp/>is<sp/>the<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="normal">///The<sp/>type<sp/>of<sp/>vec_nas[0]<sp/>is<sp/>jpcre2::MapNas</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(word)<sp/>of<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_nas[0][&quot;word&quot;];</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(digit)<sp/>of<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_nas[0][&quot;digit&quot;];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///If<sp/>the<sp/>existence<sp/>of<sp/>a<sp/>substring<sp/>is<sp/>important,<sp/>use<sp/>the<sp/>std::map::find()<sp/>or<sp/>std::map::at()<sp/>(&gt;=C++11)<sp/>function<sp/>to<sp/>access<sp/>map<sp/>elements</highlight></codeline>
<codeline><highlight class="normal">/*<sp/>//&gt;=C++11</highlight></codeline>
<codeline><highlight class="normal">try{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>///This<sp/>will<sp/>throw<sp/>exception<sp/>becasue<sp/>the<sp/>substring<sp/>name<sp/>&apos;name&apos;<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(name)<sp/>of<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_nas[0].at(&quot;name&quot;);</highlight></codeline>
<codeline><highlight class="normal">}<sp/>catch(std::logic_error<sp/>e){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(name)<sp/>doesn&apos;t<sp/>exist&quot;;</highlight></codeline>
<codeline><highlight class="normal">}*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///There<sp/>were<sp/>two<sp/>matches<sp/>found<sp/>(vec_nas.size()<sp/>==<sp/>2)<sp/>in<sp/>the<sp/>above<sp/>example</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(word)<sp/>of<sp/>second<sp/>match:<sp/>&quot;&lt;&lt;vec_nas[1][&quot;word&quot;];</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(digit)<sp/>of<sp/>second<sp/>match:<sp/>&quot;&lt;&lt;vec_nas[1][&quot;digit&quot;];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///Get<sp/>the<sp/>position<sp/>(number)<sp/>of<sp/>a<sp/>captured<sp/>group<sp/>name<sp/>(that<sp/>was<sp/>found<sp/>in<sp/>match)</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nPosition<sp/>of<sp/>captured<sp/>group<sp/>(word)<sp/>in<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_ntn[0][&quot;word&quot;];</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\nPosition<sp/>of<sp/>captured<sp/>group<sp/>(digit)<sp/>in<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_ntn[0][&quot;digit&quot;];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Replacement<sp/>Examples</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Replace<sp/>pattern<sp/>in<sp/>a<sp/>string<sp/>with<sp/>a<sp/>replacement<sp/>string</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>The<sp/>replace()<sp/>function<sp/>can<sp/>take<sp/>a<sp/>subject<sp/>and<sp/>replacement<sp/>string<sp/>as<sp/>argument.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>can<sp/>also<sp/>pass<sp/>the<sp/>subject<sp/>with<sp/>setSubject()<sp/>function<sp/>in<sp/>method<sp/>chain,</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>replacement<sp/>string<sp/>with<sp/>setReplaceWith()<sp/>function<sp/>in<sp/>method<sp/>chain,<sp/>etc<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>A<sp/>call<sp/>to<sp/>replace()<sp/>must<sp/>end<sp/>with<sp/>the<sp/>call<sp/>to<sp/>execute()</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\n&quot;&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal">///replace<sp/>first<sp/>occurrence<sp/>of<sp/>a<sp/>digit<sp/>with<sp/>@</highlight></codeline>
<codeline><highlight class="normal">jpcre2::Regex(&quot;\\d&quot;).replace(&quot;I<sp/>am<sp/>the<sp/>subject<sp/>string<sp/>44&quot;,&quot;@&quot;).execute();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\n&quot;&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal">///replace<sp/>all<sp/>occrrences<sp/>of<sp/>a<sp/>digit<sp/>with<sp/>@</highlight></codeline>
<codeline><highlight class="normal">jpcre2::Regex(&quot;\\d&quot;).replace(&quot;I<sp/>am<sp/>the<sp/>subject<sp/>string<sp/>44&quot;,&quot;@&quot;).setModifiers(&quot;g&quot;).execute();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">///swap<sp/>two<sp/>parts<sp/>of<sp/>a<sp/>string</highlight></codeline>
<codeline><highlight class="normal">std::cout&lt;&lt;&quot;\n&quot;&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal">jpcre2::Regex(&quot;^([^\t]+)\t([^\t]+)$&quot;).replace()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setSubject(&quot;I<sp/>am<sp/>the<sp/>subject\tTo<sp/>be<sp/>swapped<sp/>according<sp/>to<sp/>tab&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.setReplaceWith(&quot;$2<sp/>$1&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.execute();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#Testing:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">CPP<sp/>file<sp/>|<sp/>Details</highlight></codeline>
<codeline><highlight class="normal">--------<sp/>|<sp/>------</highlight></codeline>
<codeline><highlight class="normal">`test_match.cpp`<sp/>|<sp/>Contains<sp/>an<sp/>example<sp/>code<sp/>for<sp/>match<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">`test_replace.cpp`<sp/>|<sp/>Contains<sp/>an<sp/>example<sp/>code<sp/>for<sp/>replace<sp/>function.</highlight></codeline>
<codeline><highlight class="normal">`test_match2.cpp`<sp/>|<sp/>Another<sp/>matching<sp/>example.<sp/>Takes<sp/>pattern,<sp/>modifier<sp/>&amp;<sp/>subject<sp/>as<sp/>inputs.</highlight></codeline>
<codeline><highlight class="normal">`test_replace2.cpp`<sp/>|<sp/>Another<sp/>replacement<sp/>example.<sp/>Takes<sp/>input<sp/>for<sp/>pattern,<sp/>modifier,<sp/>subject<sp/>and<sp/>replacement<sp/>string.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#Screenshots<sp/>of<sp/>some<sp/>test<sp/>outputs:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">test_match:</highlight></codeline>
<codeline><highlight class="normal">----------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">subject<sp/>=<sp/>&quot;(I<sp/>am<sp/>a<sp/>string<sp/>with<sp/>words<sp/>and<sp/>digits<sp/>45<sp/>and<sp/>specials<sp/>chars:<sp/>?.#@<sp/>443<sp/>অ<sp/>আ<sp/>ক<sp/>খ<sp/>গ<sp/>ঘ<sp/><sp/>56)&quot;</highlight></codeline>
<codeline><highlight class="normal">pattern<sp/>=<sp/>&quot;(?:(?&lt;word&gt;[?.#@:]+)|(?&lt;word&gt;\\w+))\\s*(?&lt;digit&gt;\\d+)&quot;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![jpcre2<sp/>screenshot1](img/s1_1.png)</highlight></codeline>
<codeline><highlight class="normal">![jpcre2<sp/>screenshot2](img/s1_2.png)</highlight></codeline>
<codeline><highlight class="normal">![jpcre2<sp/>screenshot3](img/s1_3.png)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="README.md"/>
  </compounddef>
</doxygen>
