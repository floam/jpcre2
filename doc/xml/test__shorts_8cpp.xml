<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test__shorts_8cpp" kind="file" language="C++">
    <compoundname>test_shorts.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="jpcre2_8hpp" local="yes">jpcre2.hpp</includes>
    <incdepgraph>
      <node id="141">
        <label>pcre2.h</label>
      </node>
      <node id="138">
        <label>test_shorts.cpp</label>
        <link refid="test_shorts.cpp"/>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
      </node>
      <node id="143">
        <label>string</label>
      </node>
      <node id="140">
        <label>jpcre2.hpp</label>
        <link refid="jpcre2_8hpp"/>
        <childnode refid="141" relation="include">
        </childnode>
        <childnode refid="142" relation="include">
        </childnode>
        <childnode refid="143" relation="include">
        </childnode>
        <childnode refid="144" relation="include">
        </childnode>
        <childnode refid="145" relation="include">
        </childnode>
        <childnode refid="146" relation="include">
        </childnode>
      </node>
      <node id="145">
        <label>map</label>
      </node>
      <node id="146">
        <label>exception</label>
      </node>
      <node id="144">
        <label>vector</label>
      </node>
      <node id="139">
        <label>iostream</label>
      </node>
      <node id="142">
        <label>cstddef</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__shorts_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/test_shorts.cpp" line="11" column="1" bodyfile="src/test_shorts.cpp" bodystart="11" bodyend="166"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains some short examples of performing regex match and regex replace with JPCRE2. </para>    </briefdescription>
    <detaileddescription>
<para><programlisting><codeline><highlight class="comment">/**<sp/>@file<sp/>test_shorts.cpp</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/><sp/>Contains<sp/>some<sp/>short<sp/>examples<sp/>of<sp/>performing<sp/>regex<sp/>match<sp/>and<sp/>regex<sp/>replace<sp/>with<sp/>JPCRE2</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/><sp/>@include<sp/>test_shorts.cpp</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/>@author<sp/>[Md<sp/>Jahidul<sp/>Hamid](https://github.com/neurobin)</highlight></codeline>
<codeline><highlight class="comment"><sp/>*<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="jpcre2_8hpp" kindref="compound">jpcre2.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count;</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///Check<sp/>if<sp/>string<sp/>matches<sp/>the<sp/>pattern</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>following<sp/>uses<sp/>a<sp/>temporary<sp/>Regex<sp/>object.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;(\\d)|(\\w)&quot;</highlight><highlight class="normal">).match(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject&quot;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nmatched&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nno<sp/>match&quot;</highlight><highlight class="normal">;</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Using<sp/>the<sp/>modifier<sp/>S<sp/>(i.e<sp/>jpcre2::JIT_COMPILE)<sp/>with<sp/>temporary<sp/>object<sp/>may<sp/>or<sp/>may<sp/>not<sp/>give<sp/>you</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>any<sp/>performance<sp/>boost<sp/>(depends<sp/>on<sp/>the<sp/>complexity<sp/>of<sp/>the<sp/>pattern).<sp/>The<sp/>more<sp/>complex<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>pattern<sp/>gets,<sp/>the<sp/>more<sp/>sense<sp/>the<sp/>S<sp/>modifier<sp/>makes.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///If<sp/>you<sp/>want<sp/>to<sp/>match<sp/>all<sp/>and<sp/>get<sp/>the<sp/>match<sp/>count,<sp/>use<sp/>the<sp/>action<sp/>modifier<sp/>&apos;g&apos;:</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;(\\d)|(\\w)&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">).<ref refid="classjpcre2_1_1Regex_1ab93775a93a0a537d09b9e9ab4a5a3894" kindref="member">match</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Modifiers<sp/>passed<sp/>to<sp/>the<sp/>Regex<sp/>constructor<sp/>or<sp/>with<sp/>compile()<sp/>function<sp/>are<sp/>compile<sp/>modifiers</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Modifiers<sp/>passed<sp/>with<sp/>the<sp/>match()<sp/>or<sp/>replace()<sp/>functions<sp/>are<sp/>action<sp/>modifiers</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Substrings/Captured<sp/>groups:</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>***<sp/>Getting<sp/>captured<sp/>groups/substring<sp/>***</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>captured<sp/>groups<sp/>or<sp/>substrings<sp/>are<sp/>stored<sp/>in<sp/>maps<sp/>for<sp/>each<sp/>match,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>each<sp/>match<sp/>is<sp/>stored<sp/>in<sp/>a<sp/>vector.<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Thus<sp/>captured<sp/>groups<sp/>are<sp/>in<sp/>a<sp/>vector<sp/>of<sp/>maps.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>PCRE2<sp/>provides<sp/>two<sp/>types<sp/>of<sp/>substrings:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>1.<sp/>numbered<sp/>(index)<sp/>substring</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>2.<sp/>named<sp/>substring</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>the<sp/>above<sp/>two,<sp/>we<sp/>have<sp/>two<sp/>vectors<sp/>respectively:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>1.<sp/>jpcre2::VecNum<sp/>(Corresponding<sp/>map:<sp/>jpcre2::MapNum)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>2.<sp/>jpcre2::VecNas<sp/>(Corresponding<sp/>map:<sp/>jpcre2::MapNas)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Another<sp/>additional<sp/>vector<sp/>is<sp/>available<sp/>to<sp/>get<sp/>the<sp/>substring<sp/>position/number</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>a<sp/>particular<sp/>captured<sp/>group<sp/>by<sp/>name.<sp/>It&apos;s<sp/>a<sp/>vector<sp/>of<sp/>name<sp/>to<sp/>number<sp/>maps</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>*<sp/>jpcre2::VecNtN<sp/>(Corresponding<sp/>map:<sp/>jpcre2:MapNtN)</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>*****<sp/>Get<sp/>numbered<sp/>substring<sp/>*****<sp/>///</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejpcre2_1ac1cf752c8fbb0be78020be3b80e77ce3" kindref="member">jpcre2::VecNum</ref><sp/>vec_num;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;(\\w+)\\s*(\\d+)&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1Regex_1a519b0915bf1163c6ce6a4d674b30cfcd" kindref="member">initMatch</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a635c652195deaa8ebb9e107c4f972aab" kindref="member">setSubject</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>23,<sp/>I<sp/>am<sp/>digits<sp/>10&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a9df7e92f96b61553f62720cb8f5f23e5" kindref="member">setModifier</ref>(</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a2c7efe1ec2e13827f670db4ecedcd0a0" kindref="member">setNumberedSubstringVector</ref>(&amp;vec_num)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a5868aef3a146594ea1ebef34d122bb33" kindref="member">match</ref>();</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>count<sp/>(the<sp/>return<sp/>value)<sp/>is<sp/>guaranteed<sp/>to<sp/>give<sp/>you<sp/>the<sp/>correct<sp/>number<sp/>of<sp/>matches,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>while<sp/>vec_num.size()<sp/>may<sp/>give<sp/>you<sp/>wrong<sp/>result<sp/>if<sp/>any<sp/>match<sp/>result</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>was<sp/>failed<sp/>to<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>vector.<sp/>This<sp/>should<sp/>not<sp/>happen</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>i.e<sp/>count<sp/>and<sp/>vec_num.size()<sp/>should<sp/>always<sp/>be<sp/>equal.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nNumber<sp/>of<sp/>matches:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;count</highlight><highlight class="comment">/*<sp/>or<sp/>vec_num.size()*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///Now<sp/>vec_num<sp/>is<sp/>populated<sp/>with<sp/>numbered<sp/>substrings<sp/>for<sp/>each<sp/>match</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///The<sp/>size<sp/>of<sp/>vec_num<sp/>is<sp/>the<sp/>total<sp/>match<sp/>count</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///vec_num[0]<sp/>is<sp/>the<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///The<sp/>type<sp/>of<sp/>vec_num[0]<sp/>is<sp/>jpcre2::MapNum</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nTotal<sp/>match<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[0][0];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///Total<sp/>match<sp/>(group<sp/>0)<sp/>from<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>1<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[0][1];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>1<sp/>from<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>2<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[0][2];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>2<sp/>from<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>3<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[0][3];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>3<sp/>doesn&apos;t<sp/>exist,<sp/>it<sp/>will<sp/>give<sp/>you<sp/>empty<sp/>string</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>///Using<sp/>the<sp/>[]<sp/>operator<sp/>with<sp/>jpcre2::MapNum<sp/>will<sp/>create<sp/>new<sp/>element<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>i.e<sp/>vec_num[0][3]<sp/>were<sp/>created<sp/>in<sp/>the<sp/>above<sp/>example.</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>///This<sp/>should<sp/>be<sp/>ok,<sp/>if<sp/>existence<sp/>of<sp/>a<sp/>particular<sp/>substring<sp/>is<sp/>not<sp/>important</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///If<sp/>the<sp/>existence<sp/>of<sp/>a<sp/>substring<sp/>is<sp/>important,<sp/>use<sp/>the<sp/>std::map::find()<sp/>or<sp/>std::map::at()<sp/>(&gt;=C++11)<sp/>function<sp/>to<sp/>access<sp/>map<sp/>elements</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>//&gt;=C++11</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>try{</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///This<sp/>will<sp/>throw<sp/>exception,<sp/>because<sp/>substring<sp/>4<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>4<sp/>of<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_num[0].at(4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(std::logic_error<sp/>e){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>4<sp/>doesn&apos;t<sp/>exist&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///There<sp/>were<sp/>two<sp/>matches<sp/>found<sp/>(vec_num.size()<sp/>==<sp/>2)<sp/>in<sp/>the<sp/>above<sp/>example</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nTotal<sp/>match<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[1][0];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///Total<sp/>match<sp/>(group<sp/>0)<sp/>from<sp/>second<sp/>match</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>1<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[1][1];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>1<sp/>from<sp/>second<sp/>match<sp/></highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>2<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[1][2];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>2<sp/>from<sp/>second<sp/>match</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>*****<sp/>Get<sp/>named<sp/>substring<sp/>*****<sp/>///</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejpcre2_1a2b121ae776ea5b2913839f418a7d856b" kindref="member">jpcre2::VecNas</ref><sp/>vec_nas;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejpcre2_1a88a7aaf84cad627d34c8152e726168eb" kindref="member">jpcre2::VecNtN</ref><sp/>vec_ntn;<sp/></highlight><highlight class="comment">///<sp/>We<sp/>will<sp/>get<sp/>name<sp/>to<sp/>number<sp/>map<sp/>vector<sp/>too</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;(?&lt;word&gt;\\w+)\\s*(?&lt;digit&gt;\\d+)&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1Regex_1a519b0915bf1163c6ce6a4d674b30cfcd" kindref="member">initMatch</ref>()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a635c652195deaa8ebb9e107c4f972aab" kindref="member">setSubject</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>23,<sp/>I<sp/>am<sp/>digits<sp/>10&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a9df7e92f96b61553f62720cb8f5f23e5" kindref="member">setModifier</ref>(</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">)</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///.setNumberedSubstringVector(vec_num)<sp/>///<sp/>We<sp/>don&apos;t<sp/>need<sp/>it<sp/>in<sp/>this<sp/>example</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1ae495431f57cae54363331237ab21b56c" kindref="member">setNamedSubstringVector</ref>(&amp;vec_nas)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a04926e61d8b5f1d8bdf344efecd567d8" kindref="member">setNameToNumberMapVector</ref>(&amp;vec_ntn)<sp/></highlight><highlight class="comment">///<sp/>Additional<sp/>(name<sp/>to<sp/>number<sp/>maps)</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a5868aef3a146594ea1ebef34d122bb33" kindref="member">match</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nNumber<sp/>of<sp/>matches:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas.size()</highlight><highlight class="comment">/*<sp/>or<sp/>count<sp/>*/</highlight><highlight class="normal">;</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///Now<sp/>vec_nas<sp/>is<sp/>populated<sp/>with<sp/>named<sp/>substrings<sp/>for<sp/>each<sp/>match</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///The<sp/>size<sp/>of<sp/>vec_nas<sp/>is<sp/>the<sp/>total<sp/>match<sp/>count</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///vec_nas[0]<sp/>is<sp/>the<sp/>first<sp/>match</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///The<sp/>type<sp/>of<sp/>vec_nas[0]<sp/>is<sp/>jpcre2::MapNas</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptured<sp/>group<sp/>(word)<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas[0][</highlight><highlight class="stringliteral">&quot;word&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptured<sp/>group<sp/>(digit)<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas[0][</highlight><highlight class="stringliteral">&quot;digit&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///If<sp/>the<sp/>existence<sp/>of<sp/>a<sp/>substring<sp/>is<sp/>important,<sp/>use<sp/>the<sp/>std::map::find()<sp/>or<sp/>std::map::at()<sp/>(&gt;=C++11)<sp/>function<sp/>to<sp/>access<sp/>map<sp/>elements</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>//&gt;=C++11</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>try{</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///This<sp/>will<sp/>throw<sp/>exception<sp/>because<sp/>the<sp/>substring<sp/>name<sp/>&apos;name&apos;<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(name)<sp/>of<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_nas[0].at(&quot;name&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>catch(std::logic_error<sp/>e){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(name)<sp/>doesn&apos;t<sp/>exist&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///There<sp/>were<sp/>two<sp/>matches<sp/>found<sp/>(vec_nas.size()<sp/>==<sp/>2)<sp/>in<sp/>the<sp/>above<sp/>example</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptured<sp/>group<sp/>(word)<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas[1][</highlight><highlight class="stringliteral">&quot;word&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptured<sp/>group<sp/>(digit)<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas[1][</highlight><highlight class="stringliteral">&quot;digit&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///Get<sp/>the<sp/>position<sp/>(number)<sp/>of<sp/>a<sp/>captured<sp/>group<sp/>name<sp/>(that<sp/>was<sp/>found<sp/>in<sp/>match)</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nPosition<sp/>of<sp/>captured<sp/>group<sp/>(word)<sp/>in<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_ntn[0][</highlight><highlight class="stringliteral">&quot;word&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nPosition<sp/>of<sp/>captured<sp/>group<sp/>(digit)<sp/>in<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_ntn[0][</highlight><highlight class="stringliteral">&quot;digit&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Replacement<sp/>Examples</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Replace<sp/>pattern<sp/>in<sp/>a<sp/>string<sp/>with<sp/>a<sp/>replacement<sp/>string</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>initReplace()<sp/>function<sp/>can<sp/>take<sp/>a<sp/>subject<sp/>and<sp/>replacement<sp/>string<sp/>as<sp/>argument.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>You<sp/>can<sp/>also<sp/>pass<sp/>the<sp/>subject<sp/>with<sp/>setSubject()<sp/>function<sp/>in<sp/>method<sp/>chain,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>replacement<sp/>string<sp/>with<sp/>setReplaceWith()<sp/>function<sp/>in<sp/>method<sp/>chain,<sp/>etc<sp/>...</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>call<sp/>to<sp/>replace()<sp/>will<sp/>return<sp/>the<sp/>resultant<sp/>string</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///replace<sp/>first<sp/>occurrence<sp/>of<sp/>a<sp/>digit<sp/>with<sp/>@</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;\\d&quot;</highlight><highlight class="normal">).<ref refid="classjpcre2_1_1Regex_1ac592ce7a5e4210ed5f90a0105b1f2981" kindref="member">replace</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject<sp/>string<sp/>44&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///replace<sp/>all<sp/>occurrences<sp/>of<sp/>a<sp/>digit<sp/>with<sp/>@</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;\\d&quot;</highlight><highlight class="normal">).<ref refid="classjpcre2_1_1Regex_1ac592ce7a5e4210ed5f90a0105b1f2981" kindref="member">replace</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject<sp/>string<sp/>44&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/><sp/><sp/>///swap<sp/>two<sp/>parts<sp/>of<sp/>a<sp/>string</highlight></codeline>
<codeline><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">&lt;&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;^([^\t]+)\t([^\t]+)$&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1Regex_1ac592ce7a5e4210ed5f90a0105b1f2981" kindref="member">replace</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject\tTo<sp/>be<sp/>swapped<sp/>according<sp/>to<sp/>tab&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;$2<sp/>$1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="author"><para><ulink url="https://github.com/neurobin">Md Jahidul Hamid</ulink> </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**<sp/>@file<sp/>test_shorts.cpp</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>Contains<sp/>some<sp/>short<sp/>examples<sp/>of<sp/>performing<sp/>regex<sp/>match<sp/>and<sp/>regex<sp/>replace<sp/>with<sp/>JPCRE2</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>@include<sp/>test_shorts.cpp</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>@author<sp/>[Md<sp/>Jahidul<sp/>Hamid](https://github.com/neurobin)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="jpcre2_8hpp" kindref="compound">jpcre2.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/>///Check<sp/>if<sp/>string<sp/>matches<sp/>the<sp/>pattern</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>following<sp/>uses<sp/>a<sp/>temporary<sp/>Regex<sp/>object.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;(\\d)|(\\w)&quot;</highlight><highlight class="normal">).match(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject&quot;</highlight><highlight class="normal">))<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nmatched&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nno<sp/>match&quot;</highlight><highlight class="normal">;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Using<sp/>the<sp/>modifier<sp/>S<sp/>(i.e<sp/>jpcre2::JIT_COMPILE)<sp/>with<sp/>temporary<sp/>object<sp/>may<sp/>or<sp/>may<sp/>not<sp/>give<sp/>you</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>any<sp/>performance<sp/>boost<sp/>(depends<sp/>on<sp/>the<sp/>complexity<sp/>of<sp/>the<sp/>pattern).<sp/>The<sp/>more<sp/>complex<sp/></highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>pattern<sp/>gets,<sp/>the<sp/>more<sp/>sense<sp/>the<sp/>S<sp/>modifier<sp/>makes.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/>///If<sp/>you<sp/>want<sp/>to<sp/>match<sp/>all<sp/>and<sp/>get<sp/>the<sp/>match<sp/>count,<sp/>use<sp/>the<sp/>action<sp/>modifier<sp/>&apos;g&apos;:</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">&lt;&lt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;(\\d)|(\\w)&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">).<ref refid="classjpcre2_1_1Regex_1ab93775a93a0a537d09b9e9ab4a5a3894" kindref="member">match</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Modifiers<sp/>passed<sp/>to<sp/>the<sp/>Regex<sp/>constructor<sp/>or<sp/>with<sp/>compile()<sp/>function<sp/>are<sp/>compile<sp/>modifiers</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Modifiers<sp/>passed<sp/>with<sp/>the<sp/>match()<sp/>or<sp/>replace()<sp/>functions<sp/>are<sp/>action<sp/>modifiers</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>Substrings/Captured<sp/>groups:</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>***<sp/>Getting<sp/>captured<sp/>groups/substring<sp/>***</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>captured<sp/>groups<sp/>or<sp/>substrings<sp/>are<sp/>stored<sp/>in<sp/>maps<sp/>for<sp/>each<sp/>match,</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>each<sp/>match<sp/>is<sp/>stored<sp/>in<sp/>a<sp/>vector.<sp/></highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Thus<sp/>captured<sp/>groups<sp/>are<sp/>in<sp/>a<sp/>vector<sp/>of<sp/>maps.</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>PCRE2<sp/>provides<sp/>two<sp/>types<sp/>of<sp/>substrings:</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>1.<sp/>numbered<sp/>(index)<sp/>substring</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>2.<sp/>named<sp/>substring</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>the<sp/>above<sp/>two,<sp/>we<sp/>have<sp/>two<sp/>vectors<sp/>respectively:</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>1.<sp/>jpcre2::VecNum<sp/>(Corresponding<sp/>map:<sp/>jpcre2::MapNum)</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>2.<sp/>jpcre2::VecNas<sp/>(Corresponding<sp/>map:<sp/>jpcre2::MapNas)</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Another<sp/>additional<sp/>vector<sp/>is<sp/>available<sp/>to<sp/>get<sp/>the<sp/>substring<sp/>position/number</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>for<sp/>a<sp/>particular<sp/>captured<sp/>group<sp/>by<sp/>name.<sp/>It&apos;s<sp/>a<sp/>vector<sp/>of<sp/>name<sp/>to<sp/>number<sp/>maps</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/>*<sp/>jpcre2::VecNtN<sp/>(Corresponding<sp/>map:<sp/>jpcre2:MapNtN)</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>*****<sp/>Get<sp/>numbered<sp/>substring<sp/>*****<sp/>///</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejpcre2_1ac1cf752c8fbb0be78020be3b80e77ce3" kindref="member">jpcre2::VecNum</ref><sp/>vec_num;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;(\\w+)\\s*(\\d+)&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1Regex_1a519b0915bf1163c6ce6a4d674b30cfcd" kindref="member">initMatch</ref>()</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a635c652195deaa8ebb9e107c4f972aab" kindref="member">setSubject</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>23,<sp/>I<sp/>am<sp/>digits<sp/>10&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a9df7e92f96b61553f62720cb8f5f23e5" kindref="member">setModifier</ref>(</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a2c7efe1ec2e13827f670db4ecedcd0a0" kindref="member">setNumberedSubstringVector</ref>(&amp;vec_num)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a5868aef3a146594ea1ebef34d122bb33" kindref="member">match</ref>();</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>count<sp/>(the<sp/>return<sp/>value)<sp/>is<sp/>guaranteed<sp/>to<sp/>give<sp/>you<sp/>the<sp/>correct<sp/>number<sp/>of<sp/>matches,</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>while<sp/>vec_num.size()<sp/>may<sp/>give<sp/>you<sp/>wrong<sp/>result<sp/>if<sp/>any<sp/>match<sp/>result</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>was<sp/>failed<sp/>to<sp/>be<sp/>inserted<sp/>in<sp/>the<sp/>vector.<sp/>This<sp/>should<sp/>not<sp/>happen</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>i.e<sp/>count<sp/>and<sp/>vec_num.size()<sp/>should<sp/>always<sp/>be<sp/>equal.</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nNumber<sp/>of<sp/>matches:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;count</highlight><highlight class="comment">/*<sp/>or<sp/>vec_num.size()*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/>///Now<sp/>vec_num<sp/>is<sp/>populated<sp/>with<sp/>numbered<sp/>substrings<sp/>for<sp/>each<sp/>match</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/>///The<sp/>size<sp/>of<sp/>vec_num<sp/>is<sp/>the<sp/>total<sp/>match<sp/>count</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/>///vec_num[0]<sp/>is<sp/>the<sp/>first<sp/>match</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/>///The<sp/>type<sp/>of<sp/>vec_num[0]<sp/>is<sp/>jpcre2::MapNum</highlight></codeline>
<codeline lineno="79"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nTotal<sp/>match<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[0][0];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///Total<sp/>match<sp/>(group<sp/>0)<sp/>from<sp/>first<sp/>match</highlight></codeline>
<codeline lineno="80"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>1<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[0][1];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>1<sp/>from<sp/>first<sp/>match</highlight></codeline>
<codeline lineno="81"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>2<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[0][2];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>2<sp/>from<sp/>first<sp/>match</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>3<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[0][3];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>3<sp/>doesn&apos;t<sp/>exist,<sp/>it<sp/>will<sp/>give<sp/>you<sp/>empty<sp/>string</highlight></codeline>
<codeline lineno="83"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>///Using<sp/>the<sp/>[]<sp/>operator<sp/>with<sp/>jpcre2::MapNum<sp/>will<sp/>create<sp/>new<sp/>element<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline lineno="84"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>i.e<sp/>vec_num[0][3]<sp/>were<sp/>created<sp/>in<sp/>the<sp/>above<sp/>example.</highlight></codeline>
<codeline lineno="85"><highlight class="comment"></highlight><highlight class="comment"><sp/><sp/><sp/><sp/>///This<sp/>should<sp/>be<sp/>ok,<sp/>if<sp/>existence<sp/>of<sp/>a<sp/>particular<sp/>substring<sp/>is<sp/>not<sp/>important</highlight></codeline>
<codeline lineno="86"><highlight class="comment"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/>///If<sp/>the<sp/>existence<sp/>of<sp/>a<sp/>substring<sp/>is<sp/>important,<sp/>use<sp/>the<sp/>std::map::find()<sp/>or<sp/>std::map::at()<sp/>(&gt;=C++11)<sp/>function<sp/>to<sp/>access<sp/>map<sp/>elements</highlight></codeline>
<codeline lineno="88"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>//&gt;=C++11</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/>try{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///This<sp/>will<sp/>throw<sp/>exception,<sp/>because<sp/>substring<sp/>4<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline lineno="91"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>4<sp/>of<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_num[0].at(4);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>catch<sp/>(std::logic_error<sp/>e){</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;&quot;\nCaptrued<sp/>group<sp/>4<sp/>doesn&apos;t<sp/>exist&quot;;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}*/</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/>///There<sp/>were<sp/>two<sp/>matches<sp/>found<sp/>(vec_num.size()<sp/>==<sp/>2)<sp/>in<sp/>the<sp/>above<sp/>example</highlight></codeline>
<codeline lineno="97"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nTotal<sp/>match<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[1][0];<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">///Total<sp/>match<sp/>(group<sp/>0)<sp/>from<sp/>second<sp/>match</highlight></codeline>
<codeline lineno="98"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>1<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[1][1];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>1<sp/>from<sp/>second<sp/>match<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptrued<sp/>group<sp/>2<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_num[1][2];<sp/></highlight><highlight class="comment">///captured<sp/>group<sp/>2<sp/>from<sp/>second<sp/>match</highlight></codeline>
<codeline lineno="100"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/>///<sp/>*****<sp/>Get<sp/>named<sp/>substring<sp/>*****<sp/>///</highlight></codeline>
<codeline lineno="103"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejpcre2_1a2b121ae776ea5b2913839f418a7d856b" kindref="member">jpcre2::VecNas</ref><sp/>vec_nas;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejpcre2_1a88a7aaf84cad627d34c8152e726168eb" kindref="member">jpcre2::VecNtN</ref><sp/>vec_ntn;<sp/></highlight><highlight class="comment">///<sp/>We<sp/>will<sp/>get<sp/>name<sp/>to<sp/>number<sp/>map<sp/>vector<sp/>too</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;(?&lt;word&gt;\\w+)\\s*(?&lt;digit&gt;\\d+)&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1Regex_1a519b0915bf1163c6ce6a4d674b30cfcd" kindref="member">initMatch</ref>()</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a635c652195deaa8ebb9e107c4f972aab" kindref="member">setSubject</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>23,<sp/>I<sp/>am<sp/>digits<sp/>10&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a9df7e92f96b61553f62720cb8f5f23e5" kindref="member">setModifier</ref>(</highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">)</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///.setNumberedSubstringVector(vec_num)<sp/>///<sp/>We<sp/>don&apos;t<sp/>need<sp/>it<sp/>in<sp/>this<sp/>example</highlight></codeline>
<codeline lineno="112"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1ae495431f57cae54363331237ab21b56c" kindref="member">setNamedSubstringVector</ref>(&amp;vec_nas)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a04926e61d8b5f1d8bdf344efecd567d8" kindref="member">setNameToNumberMapVector</ref>(&amp;vec_ntn)<sp/></highlight><highlight class="comment">///<sp/>Additional<sp/>(name<sp/>to<sp/>number<sp/>maps)</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1RegexMatch_1a5868aef3a146594ea1ebef34d122bb33" kindref="member">match</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nNumber<sp/>of<sp/>matches:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas.size()</highlight><highlight class="comment">/*<sp/>or<sp/>count<sp/>*/</highlight><highlight class="normal">;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/>///Now<sp/>vec_nas<sp/>is<sp/>populated<sp/>with<sp/>named<sp/>substrings<sp/>for<sp/>each<sp/>match</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/>///The<sp/>size<sp/>of<sp/>vec_nas<sp/>is<sp/>the<sp/>total<sp/>match<sp/>count</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/>///vec_nas[0]<sp/>is<sp/>the<sp/>first<sp/>match</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/>///The<sp/>type<sp/>of<sp/>vec_nas[0]<sp/>is<sp/>jpcre2::MapNas</highlight></codeline>
<codeline lineno="120"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptured<sp/>group<sp/>(word)<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas[0][</highlight><highlight class="stringliteral">&quot;word&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptured<sp/>group<sp/>(digit)<sp/>of<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas[0][</highlight><highlight class="stringliteral">&quot;digit&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/>///If<sp/>the<sp/>existence<sp/>of<sp/>a<sp/>substring<sp/>is<sp/>important,<sp/>use<sp/>the<sp/>std::map::find()<sp/>or<sp/>std::map::at()<sp/>(&gt;=C++11)<sp/>function<sp/>to<sp/>access<sp/>map<sp/>elements</highlight></codeline>
<codeline lineno="124"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>//&gt;=C++11</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/>try{</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>///This<sp/>will<sp/>throw<sp/>exception<sp/>because<sp/>the<sp/>substring<sp/>name<sp/>&apos;name&apos;<sp/>doesn&apos;t<sp/>exist</highlight></codeline>
<codeline lineno="127"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(name)<sp/>of<sp/>first<sp/>match:<sp/>&quot;&lt;&lt;vec_nas[0].at(&quot;name&quot;);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>catch(std::logic_error<sp/>e){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr&lt;&lt;&quot;\nCaptured<sp/>group<sp/>(name)<sp/>doesn&apos;t<sp/>exist&quot;;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}*/</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>///There<sp/>were<sp/>two<sp/>matches<sp/>found<sp/>(vec_nas.size()<sp/>==<sp/>2)<sp/>in<sp/>the<sp/>above<sp/>example</highlight></codeline>
<codeline lineno="133"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptured<sp/>group<sp/>(word)<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas[1][</highlight><highlight class="stringliteral">&quot;word&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nCaptured<sp/>group<sp/>(digit)<sp/>of<sp/>second<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_nas[1][</highlight><highlight class="stringliteral">&quot;digit&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>///Get<sp/>the<sp/>position<sp/>(number)<sp/>of<sp/>a<sp/>captured<sp/>group<sp/>name<sp/>(that<sp/>was<sp/>found<sp/>in<sp/>match)</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nPosition<sp/>of<sp/>captured<sp/>group<sp/>(word)<sp/>in<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_ntn[0][</highlight><highlight class="stringliteral">&quot;word&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\nPosition<sp/>of<sp/>captured<sp/>group<sp/>(digit)<sp/>in<sp/>first<sp/>match:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;vec_ntn[0][</highlight><highlight class="stringliteral">&quot;digit&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>/**</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Replacement<sp/>Examples</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Replace<sp/>pattern<sp/>in<sp/>a<sp/>string<sp/>with<sp/>a<sp/>replacement<sp/>string</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>initReplace()<sp/>function<sp/>can<sp/>take<sp/>a<sp/>subject<sp/>and<sp/>replacement<sp/>string<sp/>as<sp/>argument.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>You<sp/>can<sp/>also<sp/>pass<sp/>the<sp/>subject<sp/>with<sp/>setSubject()<sp/>function<sp/>in<sp/>method<sp/>chain,</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>replacement<sp/>string<sp/>with<sp/>setReplaceWith()<sp/>function<sp/>in<sp/>method<sp/>chain,<sp/>etc<sp/>...</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/></highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>A<sp/>call<sp/>to<sp/>replace()<sp/>will<sp/>return<sp/>the<sp/>resultant<sp/>string</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/>///replace<sp/>first<sp/>occurrence<sp/>of<sp/>a<sp/>digit<sp/>with<sp/>@</highlight></codeline>
<codeline lineno="153"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;\\d&quot;</highlight><highlight class="normal">).<ref refid="classjpcre2_1_1Regex_1ac592ce7a5e4210ed5f90a0105b1f2981" kindref="member">replace</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject<sp/>string<sp/>44&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/>///replace<sp/>all<sp/>occurrences<sp/>of<sp/>a<sp/>digit<sp/>with<sp/>@</highlight></codeline>
<codeline lineno="157"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;\\d&quot;</highlight><highlight class="normal">).<ref refid="classjpcre2_1_1Regex_1ac592ce7a5e4210ed5f90a0105b1f2981" kindref="member">replace</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject<sp/>string<sp/>44&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;@&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;g&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>///swap<sp/>two<sp/>parts<sp/>of<sp/>a<sp/>string</highlight></codeline>
<codeline lineno="160"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">&lt;&lt;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classjpcre2_1_1Regex" kindref="compound">jpcre2::Regex</ref>(</highlight><highlight class="stringliteral">&quot;^([^\t]+)\t([^\t]+)$&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="classjpcre2_1_1Regex_1ac592ce7a5e4210ed5f90a0105b1f2981" kindref="member">replace</ref>(</highlight><highlight class="stringliteral">&quot;I<sp/>am<sp/>the<sp/>subject\tTo<sp/>be<sp/>swapped<sp/>according<sp/>to<sp/>tab&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;$2<sp/>$1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/test_shorts.cpp"/>
  </compounddef>
</doxygen>
