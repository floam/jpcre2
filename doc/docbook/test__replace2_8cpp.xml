<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="test__replace2_8cpp">
    <title>test_replace2.cpp File Reference</title>
    <programlisting>#include &lt;iostream&gt;</programlisting>
    <programlisting>#include &quot;jpcre2.hpp&quot;</programlisting>
<para>Include dependency diagram for test_replace2.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="test__replace2_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for test_replace2.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="test__replace2_8cpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Macros</title>
            <para>
                <itemizedlist>
                    <listitem>
                            <para>#define <link linkend="test__replace2_8cpp_1a0efdcb15269092623bd8d80b8d129239">getLine</link> std::getline(std::cin,a,&apos;\n&apos;);</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Functions</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int <link linkend="test__replace2_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4">main</link> (
)</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file test_replace2.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="preprocessor">#include&#32;&lt;iostream&gt;</emphasis>
2 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="jpcre2_8hpp">jpcre2.hpp</link>&quot;</emphasis>
3 
4 <emphasis class="preprocessor">#define&#32;getLine(a)&#32;std::getline(std::cin,a,&apos;\n&apos;);</emphasis>
5 
6 
7 <emphasis class="keywordtype">int</emphasis>&#32;main(){
8 &#32;&#32;&#32;&#32;std::string&#32;pat,mod,subject,repl,repl_mod;
9 &#32;&#32;&#32;&#32;
10 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis class="stringliteral">&quot;\nEnter&#32;pattern:&#32;&quot;</emphasis>;
11 &#32;&#32;&#32;&#32;getLine(pat);
12 &#32;&#32;&#32;&#32;
13 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis class="stringliteral">&quot;\nEnter&#32;compile&#32;modifiers&#32;(eijmnsuxADJSU):&#32;&quot;</emphasis>;
14 &#32;&#32;&#32;&#32;getLine(mod);
15 &#32;&#32;&#32;&#32;jpcre2::Regex&#32;re;&#32;&#32;&#32;&#32;&#32;
16 &#32;&#32;&#32;&#32;
17 &#32;&#32;&#32;&#32;
19 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">try</emphasis>{re.compile(pat,mod);}&#32;&#32;
20 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">catch</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;e){std::cout&lt;&lt;re.getErrorMessage(e);}
21 &#32;&#32;&#32;&#32;
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
23 &#32;&#32;&#32;&#32;<emphasis class="comment">/***************************************************************************************************************</emphasis>
24 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;Always&#32;use&#32;try&#32;catch&#32;block&#32;to&#32;catch&#32;any&#32;exception&#32;and&#32;avoid&#32;unexpected&#32;termination&#32;of&#32;the&#32;program.</emphasis>
25 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;All&#32;jpcre2&#32;exceptions&#32;are&#32;of&#32;type&#32;int&#32;(integer)</emphasis>
26 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;*&#32;*************************************************************************************************************/</emphasis>
27 &#32;&#32;&#32;&#32;
28 &#32;&#32;&#32;&#32;
30 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis class="stringliteral">&quot;\nEnter&#32;subject&#32;string&#32;(enter&#32;quit&#32;to&#32;quit):&#32;&quot;</emphasis>&lt;&lt;std::endl;
31 &#32;&#32;&#32;&#32;getLine(subject);
32 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(subject==<emphasis class="stringliteral">&quot;quit&quot;</emphasis>)<emphasis class="keywordflow">return</emphasis>&#32;0;
34 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis class="stringliteral">&quot;\nEnter&#32;replacement&#32;string:&#32;&quot;</emphasis>&lt;&lt;std::endl;
35 &#32;&#32;&#32;&#32;getLine(repl);
36 &#32;&#32;&#32;&#32;
37 &#32;&#32;&#32;&#32;loop2:
38 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis class="stringliteral">&quot;\nEnter&#32;action&#32;(replacement)&#32;modifiers&#32;(eEgx):&#32;&quot;</emphasis>;
39 &#32;&#32;&#32;&#32;getLine(repl_mod);
40 &#32;&#32;&#32;&#32;
41 &#32;&#32;&#32;&#32;<emphasis class="comment">//perform&#32;replace</emphasis>
42 &#32;&#32;&#32;&#32;
43 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">try</emphasis>{std::cout&lt;&lt;<emphasis class="stringliteral">&quot;\nreplaced&#32;string:&#32;&quot;</emphasis>&lt;&lt;re.initReplace()
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setSubject(subject)
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setReplaceWith(repl)
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setModifier(repl_mod)
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addJpcre2Option(<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a9124b768bcae4d51430aa7f26126f387">jpcre2::VALIDATE_MODIFIER</link>)
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.replace();}
51 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">catch</emphasis>(<emphasis class="keywordtype">int</emphasis>&#32;e){std::cout&lt;&lt;re.getErrorMessage(e);
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(e==<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2a4115340549b623f4e2da285bf0aa9bff">jpcre2::ERROR::INVALID_MODIFIER</link>)&#32;<emphasis class="keywordflow">goto</emphasis>&#32;loop2;
53 &#32;&#32;&#32;&#32;}
54 &#32;&#32;&#32;&#32;std::cout&lt;&lt;<emphasis class="stringliteral">&quot;\n\n--------------------------------------------------\n&quot;</emphasis>;
55 &#32;&#32;&#32;&#32;main();
56 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
57 }
    </computeroutput></literallayout>
</section>
