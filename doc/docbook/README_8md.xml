<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="README_8md">
    <title>README.md File Reference</title>
<para>Include dependency diagram for README.md</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="README_8md__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for README.md</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="README_8md__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file README.md</para>
    </simplesect>
    <literallayout><computeroutput>
[![Build&#32;status&#32;image](https://travis-ci.org/jpcre2/jpcre2.svg?branch=release)](https://travis-ci.org/jpcre2/jpcre2/)

&lt;div&#32;id=&quot;description&quot;&gt;&lt;/div&gt;
PCRE2&#32;is&#32;the&#32;name&#32;used&#32;for&#32;a&#32;revised&#32;API&#32;for&#32;the&#32;PCRE&#32;library,&#32;which&#32;is&#32;a&#32;set&#32;of&#32;functions,&#32;written&#32;in&#32;C,&#32;that&#32;implement&#32;regular&#32;expression&#32;pattern&#32;matching&#32;using&#32;the&#32;same&#32;syntax&#32;and&#32;semantics&#32;as&#32;Perl,&#32;with&#32;just&#32;a&#32;few&#32;differences.&#32;Some&#32;features&#32;that&#32;appeared&#32;in&#32;Python&#32;and&#32;the&#32;original&#32;PCRE&#32;before&#32;they&#32;appeared&#32;in&#32;Perl&#32;are&#32;also&#32;available&#32;using&#32;the&#32;Python&#32;syntax.

This&#32;provides&#32;some&#32;C++&#32;wrapper&#32;functions&#32;to&#32;provide&#32;some&#32;useful&#32;utilities&#32;like&#32;regex&#32;match&#32;and&#32;regex&#32;replace.

&lt;div&#32;id=&quot;requires&quot;&gt;&lt;/div&gt;
#Requirements:

1.&#32;PCRE2&#32;library&#32;(`version&#32;&gt;=10.21`).


If&#32;the&#32;required&#32;PCRE2&#32;version&#32;is&#32;not&#32;available&#32;in&#32;the&#32;official&#32;channel,&#32;download&#32;&lt;a&#32;href=&quot;https://github.com/jpcre2/pcre2&quot;&gt;my&#32;fork&#32;of&#32;the&#32;library&lt;/a&gt;&#32;which&#32;will&#32;always&#32;be&#32;kept&#32;compatible&#32;with&#32;JPCRE2.

&lt;div&#32;id=&quot;how-to&quot;&gt;&lt;/div&gt;
#Install/Include:

It&#32;can&#32;be&#32;installed&#32;as&#32;a&#32;separate&#32;library&#32;or&#32;can&#32;be&#32;used&#32;directly&#32;in&#32;a&#32;project&#32;by&#32;including&#32;the&#32;appropriate&#32;sources:

1.&#32;**jpcre2.h**
2.&#32;**jpcre2.cpp**
3.&#32;**jpcre2_match.cpp**
4.&#32;**jpcre2_replace.cpp**

An&#32;example&#32;compile/build&#32;command&#32;with&#32;GCC&#32;would&#32;be:

```sh
g++&#32;mycpp.cpp&#32;jpcre2_match.cpp&#32;jpcre2_replace.cpp&#32;jpcre2.cpp&#32;jpcre2.h&#32;-lpcre2-8
```

If&#32;your&#32;PCRE2&#32;library&#32;is&#32;not&#32;in&#32;the&#32;standard&#32;library&#32;path,&#32;then&#32;add&#32;the&#32;path:

```sh
g++&#32;-std=c++11&#32;mycpp.cpp&#32;...&#32;-L/path/to/your/pcre2/library&#32;-lpcre2-8
```

**Note&#32;that**&#32;it&#32;requires&#32;the&#32;PCRE2&#32;library&#32;installed&#32;in&#32;your&#32;system.&#32;If&#32;it&#32;is&#32;not&#32;already&#32;installed&#32;and&#32;linked&#32;in&#32;your&#32;compiler,&#32;you&#32;will&#32;need&#32;to&#32;link&#32;it&#32;with&#32;appropriate&#32;path&#32;and&#32;options.

**Installing&#32;JPCRE2&#32;as&#32;a&#32;library:**

To&#32;install&#32;it&#32;in&#32;a&#32;Unix&#32;based&#32;system,&#32;run:
```sh
./configure
make
sudo&#32;make&#32;install
```
Now&#32;`#include&#32;&lt;jpcre2.h&gt;`&#32;in&#32;your&#32;code&#32;and&#32;build/compile&#32;by&#32;linking&#32;with&#32;both&#32;JPCRE2&#32;and&#32;PCRE2&#32;library.

An&#32;example&#32;command&#32;for&#32;GCC&#32;would&#32;be:

```sh
g++&#32;&#32;mycpp.cpp&#32;-ljpcre2-8&#32;-lpcre2-8&#32;#sequence&#32;is&#32;important
```

If&#32;you&#32;are&#32;in&#32;a&#32;non-Unix&#32;system&#32;(e.g&#32;Windows),&#32;build&#32;a&#32;library&#32;from&#32;the&#32;JPCRE2&#32;sources&#32;with&#32;your&#32;favourite&#32;IDE&#32;or&#32;use&#32;it&#32;as&#32;it&#32;is.

**Notes:**

1.&#32;`PCRE2_CODE_UNIT_WIDTH`&#32;other&#32;than&#32;8&#32;is&#32;not&#32;supported&#32;in&#32;this&#32;version.
2.&#32;To&#32;use&#32;the&#32;`PCRE2&#32;POSIX`&#32;compatible&#32;library,&#32;add&#32;the&#32;`-lpcre2-posix`&#32;along&#32;with&#32;the&#32;others.


#How&#32;to&#32;code&#32;with&#32;JPCRE2:

&lt;div&#32;id=&quot;compile&quot;&gt;&lt;/div&gt;
##Compile&#32;a&#32;pattern

**First&#32;create&#32;a&#32;`jpcre2::Regex`object**

(You&#32;can&#32;use&#32;temporary&#32;object&#32;too,&#32;see&#32;[short&#32;examples](#short-examples)).

This&#32;object&#32;will&#32;hold&#32;the&#32;pattern,&#32;modifiers,&#32;compiled&#32;pattern,&#32;error&#32;and&#32;warning&#32;codes.

```cpp
jpcre2::Regex&#32;re;&#32;&#32;&#32;//Create&#32;object
```
Each&#32;object&#32;for&#32;each&#32;regex&#32;pattern.

**Compile&#32;the&#32;pattern**&#32;and&#32;catch&#32;any&#32;error&#32;exception:

```cpp
try{
&#32;&#32;&#32;&#32;re.compile()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Invoke&#32;the&#32;compile()&#32;function
&#32;&#32;&#32;&#32;&#32;&#32;.setPattern(pat)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//set&#32;various&#32;parameters
&#32;&#32;&#32;&#32;&#32;&#32;.setModifiers(&quot;Jin&quot;)&#32;&#32;&#32;&#32;&#32;//sets&#32;the&#32;modifier
&#32;&#32;&#32;&#32;&#32;&#32;.addJpcre2Options(0)&#32;&#32;&#32;&#32;&#32;//Adds&#32;the&#32;jpcre2&#32;option
&#32;&#32;&#32;&#32;&#32;&#32;.addPcre2Options(0)&#32;&#32;&#32;&#32;&#32;&#32;//Adds&#32;the&#32;pcre2&#32;option
&#32;&#32;&#32;&#32;&#32;&#32;.execute();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Finally&#32;execute&#32;it.
&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;//Another&#32;way&#32;is&#32;to&#32;use&#32;constructor&#32;to&#32;initialize&#32;and&#32;compile&#32;at&#32;the&#32;same&#32;time:
&#32;&#32;&#32;&#32;jpcre2::Regex&#32;re2(&quot;pattern2&quot;,&quot;mSi&quot;);&#32;&#32;//S&#32;is&#32;an&#32;optimization&#32;mod.
&#32;&#32;&#32;&#32;jpcre2::Regex&#32;re3(&quot;pattern3&quot;,&#32;PCRE2_ANCHORED);
&#32;&#32;&#32;&#32;jpcre2::Regex&#32;re4(&quot;pattern4&quot;,&#32;PCRE2_ANCHORED,&#32;jpcre2::JIT_COMPILE);
}
catch(int&#32;e){
&#32;&#32;&#32;&#32;/*Handle&#32;error*/
&#32;&#32;&#32;&#32;std::cout&lt;&lt;re.getErrorMessage(e)&lt;&lt;std::endl;
}
```

Now&#32;you&#32;can&#32;perform&#32;match&#32;or&#32;replace&#32;against&#32;the&#32;pattern.&#32;Use&#32;the&#32;`match()`&#32;member&#32;function&#32;to&#32;preform&#32;regex&#32;match&#32;and&#32;the&#32;`replace()`&#32;member&#32;function&#32;to&#32;perform&#32;regex&#32;replace.

&lt;div&#32;id=&quot;match&quot;&gt;&lt;/div&gt;
##Match

The&#32;`match()`&#32;member&#32;function&#32;can&#32;take&#32;two&#32;optional&#32;arguments&#32;(subject&#32;&amp;&#32;modifier)&#32;and&#32;returns&#32;an&#32;object&#32;of&#32;the&#32;class&#32;*RegexMatch*&#32;which&#32;then&#32;in&#32;turn&#32;can&#32;be&#32;used&#32;to&#32;pass&#32;various&#32;parameters&#32;using&#32;&#32;available&#32;member&#32;functions&#32;(method&#32;chaining)&#32;of&#32;*RegexMatch*&#32;class.&#32;The&#32;end&#32;function&#32;in&#32;the&#32;method&#32;chain&#32;must&#32;be&#32;the&#32;`execute()`&#32;function&#32;which&#32;returns&#32;the&#32;result&#32;(number&#32;of&#32;matches&#32;found).

**Perform&#32;match**&#32;and&#32;catch&#32;any&#32;error&#32;exception:

```cpp
jpcre2::VecNum&#32;vec_num;
try{
&#32;&#32;&#32;&#32;size_t&#32;count=re.match(subject)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Invoke&#32;the&#32;match()&#32;function
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setModifiers(ac_mod)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Set&#32;various&#32;options
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setNumberedSubstringVector(&amp;vec_num)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.addJpcre2Options(jpcre2::VALIDATE_MODIFIER)&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.execute();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Finally&#32;execute&#32;it.
&#32;&#32;&#32;&#32;//vec_num&#32;will&#32;be&#32;populated&#32;with&#32;maps&#32;of&#32;numbered&#32;substrings.
&#32;&#32;&#32;&#32;//count&#32;is&#32;the&#32;total&#32;number&#32;of&#32;matches&#32;found
}
catch(int&#32;e){
&#32;&#32;&#32;&#32;/*Handle&#32;error*/
&#32;&#32;&#32;&#32;std::cout&lt;&lt;re.getErrorMessage(e)&lt;&lt;std::endl;
}
```
**Iterate&#32;through&#32;the&#32;substrings:**

```cpp
for(size_t&#32;i=0;i&lt;vec_num.size();++i){
&#32;&#32;&#32;&#32;//i=0&#32;is&#32;the&#32;first&#32;match&#32;found,&#32;i=1&#32;is&#32;the&#32;second&#32;and&#32;so&#32;forth
&#32;&#32;&#32;&#32;/*//=&gt;C++11
&#32;&#32;&#32;&#32;for(auto&#32;const&amp;&#32;ent&#32;:&#32;vec_num[i]){
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//ent.first&#32;is&#32;the&#32;number/position&#32;of&#32;substring&#32;found
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//ent.second&#32;is&#32;the&#32;substring&#32;itself
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//when&#32;ent.first&#32;is&#32;0,&#32;ent.second&#32;is&#32;the&#32;total&#32;match.
&#32;&#32;&#32;&#32;}*/
&#32;&#32;&#32;&#32;for(jpcre2::MapNum::iterator&#32;ent=vec_num0[i].begin();ent!=vec_num0[i].end();++ent){
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;\n\t&quot;&lt;&lt;ent-&gt;first&lt;&lt;&quot;:&#32;&quot;&lt;&lt;ent-&gt;second&lt;&lt;&quot;\n&quot;;
&#32;&#32;&#32;&#32;}
}
```
**Access&#32;a&#32;substring**&#32;for&#32;a&#32;known&#32;position:

```cpp
std::cout&lt;&lt;vec_num[0][0];&#32;//&#32;group&#32;0&#32;in&#32;first&#32;match
std::cout&lt;&lt;vec_num[0][1];&#32;//&#32;group&#32;1&#32;in&#32;first&#32;match
std::cout&lt;&lt;vec_num[1][0];&#32;//&#32;group&#32;0&#32;in&#32;second&#32;match
```

**To&#32;get&#32;named&#32;substrings&#32;and/or&#32;name&#32;to&#32;number&#32;mapping,**&#32;pass&#32;pointer&#32;to&#32;the&#32;appropriate&#32;vectors&#32;with&#32;`namedSubstringVector()`&#32;and/or&#32;`nameToNumberMapVector()`:

```cpp
jpcre2::VecNum&#32;vec_num;&#32;&#32;&#32;///Vector&#32;to&#32;store&#32;numbured&#32;substring&#32;Map.
jpcre2::VecNas&#32;vec_nas;&#32;&#32;&#32;///Vector&#32;to&#32;store&#32;named&#32;substring&#32;Map.
jpcre2::VecNtN&#32;vec_ntn;&#32;&#32;&#32;///Vector&#32;to&#32;store&#32;Named&#32;substring&#32;to&#32;Number&#32;Map.
std::string&#32;ac_mod=&quot;g&quot;;&#32;&#32;&#32;//&#32;g&#32;is&#32;for&#32;global&#32;match.&#32;Equivalent&#32;to&#32;using&#32;setFindAll()&#32;or&#32;FIND_ALL&#32;in&#32;addJpcre2Options()
try{
&#32;&#32;&#32;&#32;re.match(subject)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Invoke&#32;the&#32;match()&#32;function
&#32;&#32;&#32;&#32;&#32;&#32;.setModifiers(ac_mod)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Set&#32;various&#32;options
&#32;&#32;&#32;&#32;&#32;&#32;.setNumberedSubstringVector(&amp;vec_num)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.setNamedSubstringVector(&amp;vec_nas)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.setNameToNumberMapVector(&amp;vec_ntn)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.addJpcre2Options(jpcre2::VALIDATE_MODIFIER)&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.addPcre2Options(PCRE2_ANCHORED)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.execute();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Finally&#32;execute&#32;it.
}
catch(int&#32;e){
&#32;&#32;&#32;&#32;/*Handle&#32;error*/
&#32;&#32;&#32;&#32;std::cout&lt;&lt;re.getErrorMessage(e)&lt;&lt;std::endl;
}
```
**Iterating**&#32;through&#32;the&#32;vectors&#32;and&#32;associated&#32;maps&#32;are&#32;the&#32;same&#32;as&#32;the&#32;above&#32;example&#32;for&#32;numbered&#32;substrings.&#32;The&#32;size&#32;of&#32;all&#32;three&#32;vectors&#32;are&#32;the&#32;same&#32;and&#32;can&#32;be&#32;accessed&#32;in&#32;the&#32;same&#32;way.

**Accesing&#32;a&#32;substring&#32;by&#32;name:**

```cpp
std::cout&lt;&lt;vec_nas[0][&quot;name&quot;];&#32;//&#32;captured&#32;group&#32;by&#32;name&#32;in&#32;first&#32;match
std::cout&lt;&lt;vec_nas[1][&quot;name&quot;];&#32;//&#32;captured&#32;group&#32;by&#32;name&#32;in&#32;second&#32;match
```

**Getting&#32;the&#32;position&#32;of&#32;a&#32;captured&#32;group&#32;name:**

```cpp
std::cout&lt;&lt;vec_ntn[0][&quot;name&quot;];&#32;//&#32;position&#32;of&#32;captured&#32;group&#32;&apos;name&apos;&#32;in&#32;first&#32;match
```

##Replace/Substitute

The&#32;`replace()`&#32;member&#32;function&#32;can&#32;take&#32;upto&#32;three&#32;optional&#32;arguments&#32;(subject,&#32;replacement&#32;string&#32;and&#32;modifier)&#32;and&#32;returns&#32;an&#32;object&#32;of&#32;the&#32;class&#32;*RegexReplace*&#32;which&#32;then&#32;in&#32;turn&#32;can&#32;be&#32;used&#32;to&#32;pass&#32;various&#32;parameters&#32;using&#32;&#32;available&#32;member&#32;functions&#32;(method&#32;chaining)&#32;of&#32;*RegexReplace*&#32;class.&#32;The&#32;end&#32;function&#32;in&#32;the&#32;method&#32;chain&#32;must&#32;be&#32;the&#32;`execute()`&#32;function&#32;which&#32;returns&#32;the&#32;result&#32;(replaced&#32;string).

**Perform&#32;replace**&#32;and&#32;catch&#32;any&#32;error&#32;exception:

```cpp
try{
&#32;&#32;&#32;&#32;std::cout&lt;&lt;
&#32;&#32;&#32;&#32;re.replace()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Invoke&#32;the&#32;replace()&#32;function
&#32;&#32;&#32;&#32;&#32;&#32;.setSubject(s)&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Set&#32;various&#32;parameters
&#32;&#32;&#32;&#32;&#32;&#32;.setReplaceWith(s2)&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.setModifiers(&quot;gE&quot;)&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.addJpcre2Options(0)&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.addPcre2Options(0)&#32;&#32;//...
&#32;&#32;&#32;&#32;&#32;&#32;.execute();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//Finally&#32;execute&#32;it.
&#32;&#32;&#32;&#32;//gE&#32;is&#32;the&#32;modifier&#32;passed&#32;(global&#32;and&#32;unknown-unset-empty).
&#32;&#32;&#32;&#32;//Access&#32;substrings/captured&#32;groups&#32;with&#32;${1234},$1234&#32;(for&#32;numbered&#32;substrings)
&#32;&#32;&#32;&#32;//&#32;or&#32;${name}&#32;(for&#32;named&#32;substrings)&#32;in&#32;the&#32;replacement&#32;part&#32;i.e&#32;in&#32;setReplaceWith()
}
catch(int&#32;e){
&#32;&#32;&#32;&#32;/*Handle&#32;error*/
&#32;&#32;&#32;&#32;std::cout&lt;&lt;re.getErrorMessage(e)&lt;&lt;std::endl;
}
```
If&#32;you&#32;pass&#32;the&#32;size&#32;of&#32;the&#32;resultant&#32;string&#32;with&#32;`setBufferSize()`&#32;function,&#32;make&#32;sure&#32;it&#32;will&#32;be&#32;enough&#32;to&#32;store&#32;the&#32;whole&#32;resultant&#32;replaced&#32;string;&#32;otherwise&#32;the&#32;internal&#32;replace&#32;function&#32;(`pcre2_substitute()`)&#32;will&#32;be&#32;called&#32;*twice*&#32;to&#32;adjust&#32;the&#32;size&#32;of&#32;the&#32;buffer&#32;to&#32;hold&#32;the&#32;whole&#32;resultant&#32;string&#32;in&#32;order&#32;to&#32;avoid&#32;`PCRE2_ERROR_NOMEMORY`&#32;error.

#Insight:

Let&apos;s&#32;take&#32;a&#32;quick&#32;look&#32;what&apos;s&#32;inside&#32;and&#32;how&#32;things&#32;are&#32;working&#32;here:

##Namespaces:

Namespace&#32;|&#32;Details
-------&#32;|&#32;-------
`jpcre2`&#32;|&#32;This&#32;is&#32;the&#32;namespace&#32;that&#32;should&#32;be&#32;used&#32;to&#32;access&#32;JPCRE2&#32;classes&#32;and&#32;functions.
`jpcre2::utils`&#32;|&#32;Some&#32;utility&#32;functions&#32;used&#32;by&#32;JPCRE2.

##Classes:

Class&#32;|&#32;Details
-----&#32;|&#32;-------
`Regex`&#32;|&#32;Main&#32;class&#32;that&#32;holds&#32;the&#32;key&#32;utilities&#32;of&#32;JPCRE2.&#32;Every&#32;regex&#32;needs&#32;an&#32;object&#32;of&#32;this&#32;class.
`RegexMatch`&#32;|&#32;Contains&#32;functions&#32;to&#32;perform&#32;regex&#32;matching&#32;according&#32;to&#32;the&#32;compiled&#32;pattern.
`RegexReplace`&#32;|&#32;Contains&#32;functions&#32;to&#32;perform&#32;replacement&#32;according&#32;to&#32;the&#32;compiled&#32;pattern.

&lt;div&#32;id=&quot;functions&quot;&gt;&lt;/div&gt;
###Functions&#32;at&#32;a&#32;glance:

```cpp
////Class&#32;Regex

//Constructors
Regex(const&#32;String&amp;&#32;re,&#32;Uint&#32;pcre2_opts,&#32;Uint&#32;opt_bits)
Regex(const&#32;String&amp;&#32;re,&#32;Uint&#32;pcre2_opts)
Regex(const&#32;String&amp;&#32;re,&#32;const&#32;String&amp;&#32;mod)
Regex(const&#32;String&amp;&#32;re)
Regex(const&#32;Regex&amp;&#32;r)
Regex()

//Overloaded&#32;assignment&#32;operator
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;operator=(const&#32;Regex&amp;&#32;r)

//Getters
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getModifier()
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getPattern()
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getLocale()&#32;&#32;&#32;&#32;&#32;&#32;&#32;///Gets&#32;LC_CTYPE
uint32_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getPcre2Options()
uint32_t&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getJpcre2Options()

///Error&#32;handling
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getErrorMessage(int&#32;err_num,&#32;PCRE2_SIZE&#32;err_offset)
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getErrorMessage(int&#32;err_num)
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getErrorMessage()
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getWarningMessage()
int&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getErrorNumber()
PCRE2_SIZE&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getErrorOffset()

Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compile(const&#32;String&amp;&#32;re,&#32;Uint&#32;pcre2_opts,&#32;Uint&#32;jpcre2_opts)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compile(const&#32;String&amp;&#32;re,&#32;Uint&#32;pcre2_opts)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compile(const&#32;String&amp;&#32;re,&#32;const&#32;String&amp;&#32;mod)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compile(const&#32;String&amp;&#32;re)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compile()

Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setPattern(const&#32;String&amp;&#32;re)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setModifiers(const&#32;String&amp;&#32;x)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setLocale(const&#32;String&amp;&#32;x)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setJpcre2Options(Uint&#32;x)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setPcre2Options(Uint&#32;x)

Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addJpcre2Options(Uint&#32;x)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addPcre2Options(Uint&#32;x)

Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;removeJpcre2Options(Uint&#32;x)
Regex&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;removePcre2Options(Uint&#32;x)

void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;execute()&#32;&#32;//executes&#32;the&#32;compile&#32;operation.
void&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exec()&#32;&#32;&#32;&#32;&#32;//wrapper&#32;of&#32;execute()

RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match(const&#32;String&amp;&#32;s,&#32;const&#32;String&amp;&#32;mod)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match(const&#32;String&amp;&#32;s)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match()

RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replace(const&#32;String&amp;&#32;mains,&#32;const&#32;String&amp;&#32;repl,&#32;const&#32;String&amp;&#32;mod)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replace(const&#32;String&amp;&#32;mains,const&#32;String&amp;&#32;repl)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replace(const&#32;String&amp;&#32;mains)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replace()


////Class&#32;RegexMatch

RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setNumberedSubstringVector(VecNum*&#32;vec_num)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setNamedSubstringVector(VecNas*&#32;vec_nas)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setNameToNumberMapVector(VecNtN*&#32;vec_ntn)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setSubject(const&#32;String&amp;&#32;s)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setModifiers(const&#32;String&amp;&#32;s)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setJpcre2Options(Uint&#32;x)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setPcre2Options(Uint&#32;x)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setFindAll(bool&#32;x=true)

RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addJpcre2Options(Uint&#32;x)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addPcre2Options(Uint&#32;x)

RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;removeJpcre2Options(Uint&#32;x)
RegexMatch&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;removePcre2Options(Uint&#32;x)&#32;

SIZE_T&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;execute()&#32;&#32;//executes&#32;the&#32;match&#32;operation
SIZE_T&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exec()&#32;&#32;&#32;&#32;&#32;//wrapper&#32;of&#32;execute()


////Class&#32;RegexReplace

RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setSubject(const&#32;String&amp;&#32;s)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setReplaceWith(const&#32;String&amp;&#32;s)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setModifiers(const&#32;String&amp;&#32;s)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setBufferSize(PCRE2_SIZE&#32;x)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setJpcre2Options(Uint&#32;x)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;setPcre2Options(Uint&#32;x)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addJpcre2Options(Uint&#32;x)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;addPcre2Options(Uint&#32;x)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;removeJpcre2Options(Uint&#32;x)
RegexReplace&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;removePcre2Options(Uint&#32;x)
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;execute()&#32;//executes&#32;the&#32;replacement&#32;operation
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exec()&#32;&#32;&#32;&#32;//wrapper&#32;of&#32;exec()


////Namespace&#32;jpcre2::utils

String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toString(int&#32;a)
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toString(char&#32;a)
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toString(const&#32;char*&#32;a)
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;toString(PCRE2_UCHAR*&#32;a)
String&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;getPcre2ErrorMessage(int&#32;err_num)
```

&lt;div&#32;id=&quot;modifiers&quot;&gt;&lt;/div&gt;
###Modifiers:

**JPCRE2**&#32;uses&#32;modifiers&#32;to&#32;control&#32;various&#32;options,&#32;type,&#32;behavior&#32;of&#32;the&#32;regex&#32;and&#32;its&apos;&#32;interactions&#32;with&#32;different&#32;functions&#32;that&#32;uses&#32;it.&#32;Two&#32;types&#32;of&#32;modifiers&#32;are&#32;available:&#32;*compile&#32;modifiers*&#32;and&#32;*action&#32;modifiers*:

&lt;div&#32;id=&quot;compile-modifiers&quot;&gt;&lt;/div&gt;
####Compile&#32;modifiers:
Modifiers&#32;define&#32;the&#32;behavior&#32;of&#32;a&#32;regex&#32;pattern.&#32;They&#32;have&#32;more&#32;or&#32;less&#32;the&#32;same&#32;meaning&#32;as&#32;the&#32;[PHP&#32;regex&#32;modifiers](https://php.net/manual/en/reference.pcre.pattern.modifiers.php)&#32;except&#32;for&#32;`e,&#32;j&#32;and&#32;n`&#32;(marked&#32;with&#32;&lt;sup&gt;\*&lt;/sup&gt;).&#32;

Modifier&#32;|&#32;Details
--------&#32;|&#32;-------
`e`&lt;sup&gt;\*&lt;/sup&gt;&#32;|&#32;Unset&#32;back-references&#32;in&#32;the&#32;pattern&#32;will&#32;match&#32;to&#32;empty&#32;strings.&#32;Equivalent&#32;to&#32;`PCRE2_MATCH_UNSET_BACKREF`.
`i`&#32;|&#32;Case-insensitive.&#32;Equivalent&#32;to&#32;`PCRE2_CASELESS`&#32;option.
`j`&lt;sup&gt;\*&lt;/sup&gt;&#32;|&#32;`\u&#32;\U&#32;\x`&#32;and&#32;unset&#32;back-referencees&#32;will&#32;act&#32;as&#32;JavaScript&#32;standard.&#32;&lt;ul&gt;&lt;li&gt;&lt;code&gt;\U&lt;/code&gt;&#32;matches&#32;an&#32;upper&#32;case&#32;&quot;U&quot;&#32;character&#32;(by&#32;default&#32;it&#32;causes&#32;a&#32;compile&#32;time&#32;error&#32;if&#32;this&#32;option&#32;is&#32;not&#32;set).&lt;/li&gt;&lt;li&gt;&lt;code&gt;\u&lt;/code&gt;&#32;matches&#32;a&#32;lower&#32;case&#32;&quot;u&quot;&#32;character&#32;unless&#32;it&#32;is&#32;followed&#32;by&#32;four&#32;hexadecimal&#32;digits,&#32;in&#32;which&#32;case&#32;the&#32;hexadecimal&#32;number&#32;defines&#32;the&#32;code&#32;point&#32;to&#32;match&#32;(by&#32;default&#32;it&#32;causes&#32;a&#32;compile&#32;time&#32;error&#32;if&#32;this&#32;option&#32;is&#32;not&#32;set).&lt;/li&gt;&lt;li&gt;&lt;code&gt;\x&lt;/code&gt;&#32;matches&#32;a&#32;lower&#32;case&#32;&quot;x&quot;&#32;character&#32;unless&#32;it&#32;is&#32;followed&#32;by&#32;two&#32;hexadecimal&#32;digits,&#32;in&#32;which&#32;case&#32;the&#32;hexadecimal&#32;number&#32;defines&#32;the&#32;code&#32;point&#32;to&#32;match&#32;(By&#32;default,&#32;as&#32;in&#32;Perl,&#32;a&#32;hexadecimal&#32;number&#32;is&#32;always&#32;expected&#32;after&#32;&lt;code&gt;\x&lt;/code&gt;,&#32;but&#32;it&#32;may&#32;have&#32;zero,&#32;one,&#32;or&#32;two&#32;digits&#32;(so,&#32;for&#32;example,&#32;&lt;code&gt;\xz&lt;/code&gt;&#32;matches&#32;a&#32;binary&#32;zero&#32;character&#32;followed&#32;by&#32;z)&#32;).&lt;/li&gt;&lt;li&gt;Unset&#32;back-references&#32;in&#32;the&#32;pattern&#32;will&#32;match&#32;to&#32;empty&#32;strings.&lt;/li&gt;&lt;/ul&gt;
`m`&#32;|&#32;Multi-line&#32;regex.&#32;Equivalent&#32;to&#32;`PCRE2_MULTILINE`&#32;option.
`n`&lt;sup&gt;\*&lt;/sup&gt;&#32;|&#32;Enable&#32;Unicode&#32;support&#32;for&#32;`\w&#32;\d`&#32;etc...&#32;in&#32;pattern.&#32;Equivalent&#32;to&#32;`PCRE2_UTF&#32;|&#32;PCRE2_UCP`.
`s`&#32;|&#32;If&#32;this&#32;modifier&#32;is&#32;set,&#32;a&#32;dot&#32;meta-character&#32;in&#32;the&#32;pattern&#32;matches&#32;all&#32;characters,&#32;including&#32;newlines.&#32;Equivalent&#32;to&#32;`PCRE2_DOTALL`&#32;option.
`u`&#32;|&#32;Enable&#32;UTF&#32;support.Treat&#32;pattern&#32;and&#32;subjects&#32;as&#32;UTF&#32;strings.&#32;It&#32;is&#32;equivalent&#32;to&#32;`PCRE2_UTF`&#32;option.
`x`&#32;|&#32;Whitespace&#32;data&#32;characters&#32;in&#32;the&#32;pattern&#32;are&#32;totally&#32;ignored&#32;except&#32;when&#32;escaped&#32;or&#32;inside&#32;a&#32;character&#32;class,&#32;enables&#32;commentary&#32;in&#32;pattern.&#32;Equivalent&#32;to&#32;`PCRE2_EXTENDED`&#32;option.
`A`&#32;|&#32;Match&#32;only&#32;at&#32;the&#32;first&#32;position.&#32;It&#32;is&#32;equivalent&#32;to&#32;`PCRE2_ANCHORED`&#32;option.
`D`&#32;|&#32;A&#32;dollar&#32;meta-character&#32;in&#32;the&#32;pattern&#32;matches&#32;only&#32;at&#32;the&#32;end&#32;of&#32;the&#32;subject&#32;string.&#32;Without&#32;this&#32;modifier,&#32;a&#32;dollar&#32;also&#32;matches&#32;immediately&#32;before&#32;the&#32;final&#32;character&#32;if&#32;it&#32;is&#32;a&#32;newline&#32;(but&#32;not&#32;before&#32;any&#32;other&#32;newlines).&#32;This&#32;modifier&#32;is&#32;ignored&#32;if&#32;*m*&#32;modifier&#32;is&#32;set.&#32;Equivalent&#32;to&#32;`PCRE2_DOLLAR_ENDONLY`&#32;option.
`J`&#32;|&#32;Allow&#32;duplicate&#32;names&#32;for&#32;subpatterns.&#32;Equivalent&#32;to&#32;`PCRE2_DUPNAMES`&#32;option.
`S`&#32;|&#32;When&#32;a&#32;pattern&#32;is&#32;going&#32;to&#32;be&#32;used&#32;several&#32;times,&#32;it&#32;is&#32;worth&#32;spending&#32;more&#32;time&#32;analyzing&#32;it&#32;in&#32;order&#32;to&#32;speed&#32;up&#32;the&#32;time&#32;taken&#32;for&#32;matching/replacing.&#32;It&#32;may&#32;also&#32;be&#32;beneficial&#32;for&#32;a&#32;very&#32;long&#32;subject&#32;string&#32;or&#32;pattern.&#32;Equivalent&#32;to&#32;an&#32;extra&#32;compilation&#32;with&#32;JIT_COMPILER&#32;with&#32;the&#32;option&#32;`PCRE2_JIT_COMPLETE`.
`U`&#32;|&#32;This&#32;modifier&#32;inverts&#32;the&#32;&quot;greediness&quot;&#32;of&#32;the&#32;quantifiers&#32;so&#32;that&#32;they&#32;are&#32;not&#32;greedy&#32;by&#32;default,&#32;but&#32;become&#32;greedy&#32;if&#32;followed&#32;by&#32;`?`.&#32;Equivalent&#32;to&#32;`PCRE2_UNGREEDY`&#32;option.

####Action&#32;modifiers:
These&#32;modifiers&#32;are&#32;not&#32;compiled&#32;in&#32;the&#32;regex&#32;itself,&#32;rather&#32;it&#32;is&#32;used&#32;per&#32;call&#32;of&#32;each&#32;match&#32;or&#32;replace&#32;function.

Modifier&#32;|&#32;Details
------&#32;|&#32;------
`A`&#32;|&#32;Match&#32;at&#32;start.&#32;Equivalent&#32;to&#32;`PCRE2_ANCHORED`.&#32;Can&#32;be&#32;used&#32;in&#32;match&#32;operation.&#32;Setting&#32;this&#32;option&#32;only&#32;at&#32;match&#32;time&#32;(i.e&#32;regex&#32;was&#32;not&#32;compiled&#32;with&#32;this&#32;option)&#32;will&#32;disable&#32;optimization&#32;during&#32;match&#32;time.
`e`&#32;|&#32;Replaces&#32;unset&#32;group&#32;with&#32;empty&#32;string.&#32;Equivalent&#32;to&#32;`PCRE2_SUBSTITUTE_UNSET_EMPTY`.&#32;Can&#32;be&#32;used&#32;in&#32;replace&#32;operation.
`E`&#32;|&#32;Extension&#32;of&#32;`e`&#32;modifier.&#32;Sets&#32;even&#32;unknown&#32;groups&#32;to&#32;empty&#32;string.&#32;Equivalent&#32;to&#32;`PCRE2_SUBSTITUTE_UNSET_EMPTY&#32;|&#32;PCRE2_SUBSTITUTE_UNKNOWN_UNSET`.
`g`&#32;|&#32;Global.&#32;Will&#32;perform&#32;global&#32;matching&#32;or&#32;replacement&#32;if&#32;passed.
`x`&#32;|&#32;Extended&#32;replacement&#32;operation.&#32;It&#32;enables&#32;some&#32;Bash&#32;like&#32;features:&#32;`${&lt;n&gt;:-&lt;string&gt;}`&#32;and&#32;`${&lt;n&gt;:+&lt;string1&gt;:&lt;string2&gt;}`.&lt;br&gt;`&lt;n&gt;`&#32;may&#32;be&#32;a&#32;group&#32;number&#32;or&#32;a&#32;name.&#32;The&#32;first&#32;form&#32;specifies&#32;a&#32;default&#32;value.&#32;If&#32;group&#32;`&lt;n&gt;`&#32;is&#32;set,&#32;its&#32;value&#32;is&#32;inserted;&#32;if&#32;not,&#32;`&lt;string&gt;`&#32;is&#32;expanded&#32;and&#32;the&#32;result&#32;is&#32;inserted.&#32;The&#32;second&#32;form&#32;specifies&#32;strings&#32;that&#32;are&#32;expanded&#32;and&#32;inserted&#32;when&#32;group&#32;`&lt;n&gt;`&#32;is&#32;set&#32;or&#32;unset,&#32;respectively.&#32;The&#32;first&#32;form&#32;is&#32;just&#32;a&#32;convenient&#32;shorthand&#32;for&#32;`${&lt;n&gt;:+${&lt;n&gt;}:&lt;string&gt;}`.

&lt;div&#32;id=&quot;jpcre2-options&quot;&gt;&lt;/div&gt;

###JPCRE2&#32;options:

These&#32;options&#32;are&#32;meaningful&#32;only&#32;for&#32;the&#32;**JPCRE2**&#32;library&#32;itself&#32;not&#32;the&#32;original&#32;**PCRE2**&#32;library.&#32;We&#32;use&#32;the&#32;`addJpcre2Options()`&#32;function&#32;to&#32;pass&#32;these&#32;options.

Option&#32;|&#32;Details
------&#32;|&#32;------
`jpcre2::NONE`&#32;|&#32;This&#32;is&#32;the&#32;default&#32;option.&#32;Equivalent&#32;to&#32;0&#32;(zero).
`jpcre2::VALIDATE_MODIFIER`&#32;|&#32;If&#32;this&#32;option&#32;is&#32;passed,&#32;modifiers&#32;will&#32;be&#32;subject&#32;to&#32;validation&#32;check.&#32;If&#32;any&#32;of&#32;them&#32;is&#32;invalid&#32;then&#32;a&#32;`jpcre2::ERROR::INVALID_MODIFIER`&#32;error&#32;exception&#32;will&#32;be&#32;thrown.&#32;You&#32;can&#32;get&#32;the&#32;error&#32;message&#32;with&#32;`getErrorMessage(error_code)`&#32;member&#32;function.
`jpcre2::FIND_ALL`&#32;|&#32;This&#32;option&#32;will&#32;do&#32;a&#32;global&#32;matching&#32;if&#32;passed&#32;during&#32;matching.&#32;The&#32;same&#32;can&#32;be&#32;achieved&#32;by&#32;passing&#32;the&#32;&apos;g&apos;&#32;modifier&#32;with&#32;`setModifiers()`&#32;function.
`jpcre2::ERROR_ALL`&#32;|&#32;Treat&#32;warnings&#32;as&#32;errors&#32;and&#32;throw&#32;exception.
`jpcre2::JIT_COMPILE`&#32;|&#32;This&#32;is&#32;same&#32;as&#32;passing&#32;the&#32;**S**&#32;modifier&#32;during&#32;pattern&#32;compilation.

###PCRE2&#32;options:

While&#32;having&#32;its&#32;own&#32;way&#32;of&#32;doing&#32;things,&#32;JPCRE2&#32;also&#32;supports&#32;the&#32;traditional&#32;PCRE2&#32;options&#32;to&#32;be&#32;passed.&#32;We&#32;use&#32;the&#32;`addPcre2Options()`&#32;function&#32;to&#32;pass&#32;the&#32;PCRE2&#32;options.&#32;These&#32;options&#32;are&#32;the&#32;same&#32;as&#32;the&#32;PCRE2&#32;library&#32;and&#32;have&#32;the&#32;same&#32;meaning.&#32;For&#32;example&#32;instead&#32;of&#32;passing&#32;the&#32;&apos;g&apos;&#32;modifier&#32;to&#32;the&#32;replacement&#32;operation&#32;we&#32;can&#32;also&#32;pass&#32;its&#32;PCRE2&#32;equivalent&#32;*PCRE2_SUBSTITUTE_GLOBAL*&#32;to&#32;have&#32;the&#32;same&#32;effect.


&lt;div&#32;id=&quot;short-examples&quot;&gt;&lt;/div&gt;
#Short&#32;examples

```cpp

size_t&#32;count;
///Check&#32;if&#32;string&#32;matches&#32;the&#32;pattern
/**
&#32;*&#32;The&#32;following&#32;uses&#32;a&#32;temporary&#32;Regex&#32;object.
&#32;*&#32;*/
if(jpcre2::Regex(&quot;(\\d)|(\\w)&quot;).match(&quot;I&#32;am&#32;the&#32;subject&quot;).execute())&#32;
&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;\nmatched&quot;;
else
&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;\nno&#32;match&quot;;
/**
&#32;*&#32;The&#32;above&#32;is&#32;a&#32;good&#32;example&#32;of&#32;using&#32;temporary&#32;objects&#32;to&#32;perform&#32;match&#32;(or&#32;replace)
&#32;*&#32;
&#32;*&#32;Using&#32;the&#32;modifier&#32;S&#32;(i.e&#32;jpcre2::JIT_COMPILE)&#32;with&#32;temporary&#32;object&#32;may&#32;or&#32;may&#32;not&#32;give&#32;you
&#32;*&#32;any&#32;performance&#32;boost&#32;(depends&#32;on&#32;the&#32;complexity&#32;of&#32;the&#32;pattern).&#32;The&#32;more&#32;complex&#32;
&#32;*&#32;the&#32;pattern&#32;gets&#32;the&#32;more&#32;sense&#32;the&#32;S&#32;modifier&#32;makes.
&#32;*&#32;*/
&#32;
///If&#32;you&#32;want&#32;to&#32;match&#32;all&#32;and&#32;get&#32;the&#32;match&#32;count,&#32;use&#32;the&#32;action&#32;modifier&#32;&apos;g&apos;:
std::cout&lt;&lt;&quot;\n&quot;&lt;&lt;
&#32;&#32;&#32;&#32;jpcre2::Regex(&quot;(\\d)|(\\w)&quot;,&quot;m&quot;).match(&quot;I&#32;am&#32;the&#32;subject&quot;).setModifiers(&quot;g&quot;).execute();

/**
&#32;*&#32;Modifiers&#32;passed&#32;to&#32;the&#32;Regex&#32;constructor&#32;or&#32;with&#32;compile()&#32;function&#32;are&#32;compile&#32;modifiers
&#32;*&#32;Modifiers&#32;passed&#32;with&#32;the&#32;match()&#32;or&#32;replace()&#32;functions&#32;are&#32;action&#32;modifiers
&#32;*&#32;*/

///&#32;Substrings/Captured&#32;groups:

/**
&#32;*&#32;***&#32;Getting&#32;captured&#32;groups/substring&#32;***
&#32;*&#32;
&#32;*&#32;captured&#32;groups&#32;or&#32;substrings&#32;are&#32;stored&#32;in&#32;maps&#32;for&#32;each&#32;match,
&#32;*&#32;and&#32;each&#32;match&#32;is&#32;stored&#32;in&#32;a&#32;vector.&#32;
&#32;*&#32;Thus&#32;captured&#32;groups&#32;are&#32;in&#32;a&#32;vector&#32;of&#32;maps.
&#32;*&#32;
&#32;*&#32;PCRE2&#32;provides&#32;two&#32;types&#32;of&#32;substrings:
&#32;*&#32;&#32;1.&#32;numbered&#32;(index)&#32;substring
&#32;*&#32;&#32;2.&#32;named&#32;substring
&#32;*&#32;
&#32;*&#32;For&#32;the&#32;above&#32;two,&#32;we&#32;have&#32;two&#32;vectors&#32;respectively:
&#32;*&#32;&#32;1.&#32;jpcre2::VecNum&#32;(Corresponding&#32;map:&#32;jpcre2::MapNum)
&#32;*&#32;&#32;2.&#32;jpcre2::VecNas&#32;(Corresponding&#32;map:&#32;jpcre2::MapNas)
&#32;*&#32;
&#32;*&#32;Another&#32;additional&#32;vector&#32;is&#32;available&#32;to&#32;get&#32;the&#32;substring&#32;position/number
&#32;*&#32;for&#32;a&#32;particular&#32;captured&#32;group&#32;by&#32;name.&#32;It&apos;s&#32;a&#32;vector&#32;of&#32;name&#32;to&#32;number&#32;maps
&#32;*&#32;&#32;*&#32;jpcre2::VecNtN&#32;(Corresponding&#32;map:&#32;jpcre2:MapNtN)
&#32;*&#32;*/

///&#32;*****&#32;Get&#32;numbered&#32;substring&#32;*****&#32;///
jpcre2::VecNum&#32;vec_num;
count&#32;=&#32;
jpcre2::Regex(&quot;(\\w+)\\s*(\\d+)&quot;,&quot;m&quot;).match(&quot;I&#32;am&#32;23,&#32;I&#32;am&#32;digits&#32;10&quot;)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setModifiers(&quot;g&quot;)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setNumberedSubstringVector(&amp;vec_num)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.exec();
/**
*&#32;count&#32;(the&#32;return&#32;value)&#32;is&#32;guaranteed&#32;to&#32;give&#32;you&#32;the&#32;correct&#32;number&#32;of&#32;matches,
*&#32;while&#32;vec_num.size()&#32;may&#32;give&#32;you&#32;wrong&#32;result&#32;if&#32;any&#32;match&#32;result
*&#32;was&#32;failed&#32;to&#32;be&#32;inserted&#32;in&#32;the&#32;vector.&#32;This&#32;should&#32;not&#32;happen
*&#32;i.e&#32;count&#32;and&#32;vec_num.size()&#32;should&#32;always&#32;be&#32;equal.
*&#32;*/
std::cout&lt;&lt;&quot;\nNumber&#32;of&#32;matches:&#32;&quot;&lt;&lt;count/*&#32;or&#32;vec_num.size()*/;

///Now&#32;vec_num&#32;is&#32;populated&#32;with&#32;numbered&#32;substrings&#32;for&#32;each&#32;match
///The&#32;size&#32;of&#32;vec_num&#32;is&#32;the&#32;total&#32;match&#32;count
///vec_num[0]&#32;is&#32;the&#32;first&#32;match
///The&#32;type&#32;of&#32;vec_num[0]&#32;is&#32;jpcre2::MapNum
std::cout&lt;&lt;&quot;\nTotal&#32;match&#32;of&#32;first&#32;match:&#32;&quot;&lt;&lt;vec_num[0][0];&#32;&#32;&#32;&#32;&#32;&#32;///Total&#32;match&#32;(group&#32;0)&#32;from&#32;first&#32;match
std::cout&lt;&lt;&quot;\nCaptrued&#32;group&#32;1&#32;of&#32;frist&#32;match:&#32;&quot;&lt;&lt;vec_num[0][1];&#32;///captured&#32;group&#32;1&#32;from&#32;first&#32;match&#32;
std::cout&lt;&lt;&quot;\nCaptrued&#32;group&#32;2&#32;of&#32;frist&#32;match:&#32;&quot;&lt;&lt;vec_num[0][2];&#32;///captured&#32;group&#32;2&#32;from&#32;first&#32;match
std::cout&lt;&lt;&quot;\nCaptrued&#32;group&#32;3&#32;of&#32;frist&#32;match:&#32;&quot;&lt;&lt;vec_num[0][3];&#32;///captured&#32;group&#32;3&#32;doesn&apos;t&#32;exist,&#32;it&#32;will&#32;give&#32;you&#32;empty&#32;string
///Using&#32;the&#32;[]&#32;operator&#32;with&#32;jpcre2::MapNum&#32;will&#32;create&#32;new&#32;element&#32;if&#32;it&#32;doesn&apos;t&#32;exist
///&#32;i.e&#32;vec_num[0][3]&#32;were&#32;created&#32;in&#32;the&#32;above&#32;example.
///This&#32;should&#32;be&#32;ok,&#32;if&#32;existence&#32;of&#32;a&#32;particular&#32;substring&#32;is&#32;not&#32;important

///If&#32;the&#32;existence&#32;of&#32;a&#32;substring&#32;is&#32;important,&#32;use&#32;the&#32;std::map::find()&#32;or&#32;std::map::at()&#32;(&gt;=C++11)&#32;function&#32;to&#32;access&#32;map&#32;elements
/*&#32;//&gt;=C++11
try{
&#32;&#32;&#32;&#32;///This&#32;will&#32;throw&#32;exception,&#32;because&#32;substring&#32;4&#32;doesn&apos;t&#32;exist
&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;\nCaptrued&#32;group&#32;4&#32;of&#32;frist&#32;match:&#32;&quot;&lt;&lt;vec_num[0].at(4);
}&#32;catch&#32;(std::logic_error&#32;e){
&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;\nCaptrued&#32;group&#32;4&#32;doesn&apos;t&#32;exist&quot;;
}*/

///There&#32;were&#32;two&#32;matches&#32;found&#32;(vec_num.size()&#32;==&#32;2)&#32;in&#32;the&#32;above&#32;example
std::cout&lt;&lt;&quot;\nTotal&#32;match&#32;of&#32;second&#32;match:&#32;&quot;&lt;&lt;vec_num[1][0];&#32;&#32;&#32;&#32;&#32;&#32;///Total&#32;match&#32;(group&#32;0)&#32;from&#32;second&#32;match
std::cout&lt;&lt;&quot;\nCaptrued&#32;group&#32;1&#32;of&#32;second&#32;match:&#32;&quot;&lt;&lt;vec_num[1][1];&#32;///captured&#32;group&#32;1&#32;from&#32;second&#32;match&#32;
std::cout&lt;&lt;&quot;\nCaptrued&#32;group&#32;2&#32;of&#32;second&#32;match:&#32;&quot;&lt;&lt;vec_num[1][2];&#32;///captured&#32;group&#32;2&#32;from&#32;second&#32;match


///&#32;*****&#32;Get&#32;named&#32;substring&#32;*****&#32;///

jpcre2::VecNas&#32;vec_nas;
jpcre2::VecNtN&#32;vec_ntn;&#32;///&#32;We&#32;will&#32;get&#32;name&#32;to&#32;number&#32;map&#32;vector&#32;too
count&#32;=&#32;
jpcre2::Regex(&quot;(?&lt;word&gt;\\w+)\\s*(?&lt;digit&gt;\\d+)&quot;,&quot;m&quot;).match(&quot;I&#32;am&#32;23,&#32;I&#32;am&#32;digits&#32;10&quot;)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setModifiers(&quot;g&quot;)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;///.setNumberedSubstringVector(vec_num)&#32;///&#32;We&#32;don&apos;t&#32;need&#32;it&#32;in&#32;this&#32;example
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setNamedSubstringVector(&amp;vec_nas)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setNameToNumberMapVector(&amp;vec_ntn)&#32;///&#32;Additional&#32;(name&#32;to&#32;number&#32;maps)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.execute();
std::cout&lt;&lt;&quot;\nNumber&#32;of&#32;matches:&#32;&quot;&lt;&lt;vec_nas.size()/*&#32;or&#32;count&#32;*/;
///Now&#32;vec_nas&#32;is&#32;populated&#32;with&#32;named&#32;substrings&#32;for&#32;each&#32;match
///The&#32;size&#32;of&#32;vec_nas&#32;is&#32;the&#32;total&#32;match&#32;count
///vec_nas[0]&#32;is&#32;the&#32;first&#32;match
///The&#32;type&#32;of&#32;vec_nas[0]&#32;is&#32;jpcre2::MapNas
std::cout&lt;&lt;&quot;\nCaptured&#32;group&#32;(word)&#32;of&#32;first&#32;match:&#32;&quot;&lt;&lt;vec_nas[0][&quot;word&quot;];
std::cout&lt;&lt;&quot;\nCaptured&#32;group&#32;(digit)&#32;of&#32;first&#32;match:&#32;&quot;&lt;&lt;vec_nas[0][&quot;digit&quot;];

///If&#32;the&#32;existence&#32;of&#32;a&#32;substring&#32;is&#32;important,&#32;use&#32;the&#32;std::map::find()&#32;or&#32;std::map::at()&#32;(&gt;=C++11)&#32;function&#32;to&#32;access&#32;map&#32;elements
/*&#32;//&gt;=C++11
try{
&#32;&#32;&#32;&#32;///This&#32;will&#32;throw&#32;exception&#32;becasue&#32;the&#32;substring&#32;name&#32;&apos;name&apos;&#32;doesn&apos;t&#32;exist
&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;\nCaptured&#32;group&#32;(name)&#32;of&#32;first&#32;match:&#32;&quot;&lt;&lt;vec_nas[0].at(&quot;name&quot;);
}&#32;catch(std::logic_error&#32;e){
&#32;&#32;&#32;&#32;std::cout&lt;&lt;&quot;\nCaptured&#32;group&#32;(name)&#32;doesn&apos;t&#32;exist&quot;;
}*/

///There&#32;were&#32;two&#32;matches&#32;found&#32;(vec_nas.size()&#32;==&#32;2)&#32;in&#32;the&#32;above&#32;example
std::cout&lt;&lt;&quot;\nCaptured&#32;group&#32;(word)&#32;of&#32;second&#32;match:&#32;&quot;&lt;&lt;vec_nas[1][&quot;word&quot;];
std::cout&lt;&lt;&quot;\nCaptured&#32;group&#32;(digit)&#32;of&#32;second&#32;match:&#32;&quot;&lt;&lt;vec_nas[1][&quot;digit&quot;];

///Get&#32;the&#32;position&#32;(number)&#32;of&#32;a&#32;captured&#32;group&#32;name&#32;(that&#32;was&#32;found&#32;in&#32;match)
std::cout&lt;&lt;&quot;\nPosition&#32;of&#32;captured&#32;group&#32;(word)&#32;in&#32;first&#32;match:&#32;&quot;&lt;&lt;vec_ntn[0][&quot;word&quot;];
std::cout&lt;&lt;&quot;\nPosition&#32;of&#32;captured&#32;group&#32;(digit)&#32;in&#32;first&#32;match:&#32;&quot;&lt;&lt;vec_ntn[0][&quot;digit&quot;];

/**
&#32;*&#32;Replacement&#32;Examples
&#32;*&#32;Replace&#32;pattern&#32;in&#32;a&#32;string&#32;with&#32;a&#32;replacement&#32;string
&#32;*&#32;
&#32;*&#32;The&#32;replace()&#32;function&#32;can&#32;take&#32;a&#32;subject&#32;and&#32;replacement&#32;string&#32;as&#32;argument.
&#32;*&#32;You&#32;can&#32;also&#32;pass&#32;the&#32;subject&#32;with&#32;setSubject()&#32;function&#32;in&#32;method&#32;chain,
&#32;*&#32;replacement&#32;string&#32;with&#32;setReplaceWith()&#32;function&#32;in&#32;method&#32;chain,&#32;etc&#32;...
&#32;*&#32;
&#32;*&#32;A&#32;call&#32;to&#32;replace()&#32;must&#32;end&#32;with&#32;the&#32;call&#32;to&#32;execute()
&#32;*&#32;*/

std::cout&lt;&lt;&quot;\n&quot;&lt;&lt;
///replace&#32;first&#32;occurrence&#32;of&#32;a&#32;digit&#32;with&#32;@
jpcre2::Regex(&quot;\\d&quot;).replace(&quot;I&#32;am&#32;the&#32;subject&#32;string&#32;44&quot;,&quot;@&quot;).execute();

std::cout&lt;&lt;&quot;\n&quot;&lt;&lt;
///replace&#32;all&#32;occrrences&#32;of&#32;a&#32;digit&#32;with&#32;@
jpcre2::Regex(&quot;\\d&quot;).replace(&quot;I&#32;am&#32;the&#32;subject&#32;string&#32;44&quot;,&quot;@&quot;).setModifiers(&quot;g&quot;).execute();

///swap&#32;two&#32;parts&#32;of&#32;a&#32;string
std::cout&lt;&lt;&quot;\n&quot;&lt;&lt;
jpcre2::Regex(&quot;^([^\t]+)\t([^\t]+)$&quot;).replace()
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setSubject(&quot;I&#32;am&#32;the&#32;subject\tTo&#32;be&#32;swapped&#32;according&#32;to&#32;tab&quot;)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.setReplaceWith(&quot;$2&#32;$1&quot;)
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;.execute();
```

#Testing:

CPP&#32;file&#32;|&#32;Details
--------&#32;|&#32;------
`test_match.cpp`&#32;|&#32;Contains&#32;an&#32;example&#32;code&#32;for&#32;match&#32;function.
`test_replace.cpp`&#32;|&#32;Contains&#32;an&#32;example&#32;code&#32;for&#32;replace&#32;function.
`test_match2.cpp`&#32;|&#32;Another&#32;matching&#32;example.&#32;Takes&#32;pattern,&#32;modifier&#32;&amp;&#32;subject&#32;as&#32;inputs.
`test_replace2.cpp`&#32;|&#32;Another&#32;replacement&#32;example.&#32;Takes&#32;input&#32;for&#32;pattern,&#32;modifier,&#32;subject&#32;and&#32;replacement&#32;string.

#Screenshots&#32;of&#32;some&#32;test&#32;outputs:

test_match:
----------

```
subject&#32;=&#32;&quot;(I&#32;am&#32;a&#32;string&#32;with&#32;words&#32;and&#32;digits&#32;45&#32;and&#32;specials&#32;chars:&#32;?.#@&#32;443&#32;অ&#32;আ&#32;ক&#32;খ&#32;গ&#32;ঘ&#32;&#32;56)&quot;
pattern&#32;=&#32;&quot;(?:(?&lt;word&gt;[?.#@:]+)|(?&lt;word&gt;\\w+))\\s*(?&lt;digit&gt;\\d+)&quot;
```

![jpcre2&#32;screenshot1](img/s1_1.png)
![jpcre2&#32;screenshot2](img/s1_2.png)
![jpcre2&#32;screenshot3](img/s1_3.png)


    </computeroutput></literallayout>
</section>
