<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="jpcre2_8cpp">
    <title>jpcre2.cpp File Reference</title>
    <programlisting>#include &quot;jpcre2.hpp&quot;</programlisting>
    <programlisting>#include &lt;cstdio&gt;</programlisting>
    <programlisting>#include &lt;limits&gt;</programlisting>
    <programlisting>#include &lt;cassert&gt;</programlisting>
    <programlisting>#include &lt;cstring&gt;</programlisting>
<para>Include dependency diagram for jpcre2.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="jpcre2_8cpp__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for jpcre2.cpp</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="jpcre2_8cpp__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file jpcre2.cpp</para>
    </simplesect>
    <literallayout><computeroutput>
1 <emphasis class="comment">/*******************************************************************************</emphasis>
2 <emphasis class="comment">&#32;*&#32;*******************&#32;C++&#32;wrapper&#32;of&#32;PCRE2&#32;Library&#32;****************************</emphasis>
3 <emphasis class="comment">&#32;*&#32;*****************************************************************************</emphasis>
4 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Copyright&#32;(c)&#32;2015-2016&#32;Md.&#32;Jahidul&#32;Hamid</emphasis>
5 <emphasis class="comment">&#32;*&#32;</emphasis>
6 <emphasis class="comment">&#32;*&#32;-----------------------------------------------------------------------------</emphasis>
7 <emphasis class="comment">&#32;*&#32;Redistribution&#32;and&#32;use&#32;in&#32;source&#32;and&#32;binary&#32;forms,&#32;with&#32;or&#32;without</emphasis>
8 <emphasis class="comment">&#32;*&#32;modification,&#32;are&#32;permitted&#32;provided&#32;that&#32;the&#32;following&#32;conditions&#32;are&#32;met:</emphasis>
9 <emphasis class="comment">&#32;*&#32;</emphasis>
10 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;*&#32;Redistributions&#32;of&#32;source&#32;code&#32;must&#32;retain&#32;the&#32;above&#32;copyright&#32;notice,</emphasis>
11 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;this&#32;list&#32;of&#32;conditions&#32;and&#32;the&#32;following&#32;disclaimer.</emphasis>
12 <emphasis class="comment">&#32;*&#32;</emphasis>
13 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;*&#32;Redistributions&#32;in&#32;binary&#32;form&#32;must&#32;reproduce&#32;the&#32;above&#32;copyright</emphasis>
14 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;notice,&#32;this&#32;list&#32;of&#32;conditions&#32;and&#32;the&#32;following&#32;disclaimer&#32;in&#32;the</emphasis>
15 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentation&#32;and/or&#32;other&#32;materials&#32;provided&#32;with&#32;the&#32;distribution.</emphasis>
16 <emphasis class="comment">&#32;*&#32;</emphasis>
17 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;*&#32;The&#32;names&#32;of&#32;its&#32;contributors&#32;may&#32;be&#32;used&#32;to&#32;endorse&#32;or&#32;promote&#32;</emphasis>
18 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;products&#32;derived&#32;from&#32;this&#32;software&#32;without&#32;specific&#32;prior&#32;written</emphasis>
19 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;permission.</emphasis>
20 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
21 <emphasis class="comment">&#32;*&#32;Dsclaimer:</emphasis>
22 <emphasis class="comment">&#32;*&#32;</emphasis>
23 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;THIS&#32;SOFTWARE&#32;IS&#32;PROVIDED&#32;BY&#32;THE&#32;COPYRIGHT&#32;HOLDERS&#32;AND&#32;CONTRIBUTORS&#32;&quot;AS&#32;IS&quot;</emphasis>
24 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;AND&#32;ANY&#32;EXPRESS&#32;OR&#32;IMPLIED&#32;WARRANTIES,&#32;INCLUDING,&#32;BUT&#32;NOT&#32;LIMITED&#32;TO,&#32;THE</emphasis>
25 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;IMPLIED&#32;WARRANTIES&#32;OF&#32;MERCHANTABILITY&#32;AND&#32;FITNESS&#32;FOR&#32;A&#32;PARTICULAR&#32;PURPOSE</emphasis>
26 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;ARE&#32;DISCLAIMED.&#32;IN&#32;NO&#32;EVENT&#32;SHALL&#32;THE&#32;COPYRIGHT&#32;OWNER&#32;OR&#32;CONTRIBUTORS&#32;BE</emphasis>
27 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;LIABLE&#32;FOR&#32;ANY&#32;DIRECT,&#32;INDIRECT,&#32;INCIDENTAL,&#32;SPECIAL,&#32;EXEMPLARY,&#32;OR</emphasis>
28 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;CONSEQUENTIAL&#32;DAMAGES&#32;(INCLUDING,&#32;BUT&#32;NOT&#32;LIMITED&#32;TO,&#32;PROCUREMENT&#32;OF</emphasis>
29 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;SUBSTITUTE&#32;GOODS&#32;OR&#32;SERVICES;&#32;LOSS&#32;OF&#32;USE,&#32;DATA,&#32;OR&#32;PROFITS;&#32;OR&#32;BUSINESS</emphasis>
30 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;INTERRUPTION)&#32;HOWEVER&#32;CAUSED&#32;AND&#32;ON&#32;ANY&#32;THEORY&#32;OF&#32;LIABILITY,&#32;WHETHER&#32;IN</emphasis>
31 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;CONTRACT,&#32;STRICT&#32;LIABILITY,&#32;OR&#32;TORT&#32;(INCLUDING&#32;NEGLIGENCE&#32;OR&#32;OTHERWISE)</emphasis>
32 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;ARISING&#32;IN&#32;ANY&#32;WAY&#32;OUT&#32;OF&#32;THE&#32;USE&#32;OF&#32;THIS&#32;SOFTWARE,&#32;EVEN&#32;IF&#32;ADVISED&#32;OF&#32;THE</emphasis>
33 <emphasis class="comment">&#32;*&#32;&#32;&#32;&#32;&#32;POSSIBILITY&#32;OF&#32;SUCH&#32;DAMAGE.</emphasis>
34 <emphasis class="comment">&#32;*&#32;*/</emphasis>
35 
36 <emphasis class="preprocessor">#include&#32;&quot;<link linkend="jpcre2_8hpp">jpcre2.hpp</link>&quot;</emphasis>
37 
38 
39 &#32;
40 <emphasis class="preprocessor">#include&#32;&lt;cstdio&gt;</emphasis>&#32;&#32;&#32;
41 <emphasis class="preprocessor">#include&#32;&lt;limits&gt;</emphasis>&#32;&#32;&#32;
42 <emphasis class="preprocessor">#include&#32;&lt;cassert&gt;</emphasis>&#32;&#32;
43 <emphasis class="preprocessor">#include&#32;&lt;cstring&gt;</emphasis>&#32;&#32;
44 
<link linkend="namespacejpcre2_1a80cb201f2e733137b22a8ed98465096a">45 </link><emphasis class="keyword">const</emphasis>&#32;<link linkend="namespacejpcre2_1a2aac465ddcb123560c7c8215dd69246c">jpcre2::SIZE_T</link>&#32;<link linkend="namespacejpcre2_1a80cb201f2e733137b22a8ed98465096a">jpcre2::SUBSTITUTE_RESULT_INIT_SIZE</link>&#32;=&#32;std::numeric_limits&lt;int&gt;::max();&#32;
<link linkend="namespacejpcre2_1ad2236dcdcc14d580724b256ce7f168e5">46 </link><emphasis class="keyword">const</emphasis>&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;<link linkend="namespacejpcre2_1ad2236dcdcc14d580724b256ce7f168e5">jpcre2::LOCALE_NONE</link>&#32;=&#32;<emphasis class="stringliteral">&quot;JPCRE2_NONE&quot;</emphasis>;&#32;&#32;&#32;
<link linkend="namespacejpcre2_1adfdd3d1fff99e685734ae4e59771e84d">47 </link><emphasis class="keyword">const</emphasis>&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;<link linkend="namespacejpcre2_1adfdd3d1fff99e685734ae4e59771e84d">jpcre2::LOCALE_DEFAULT</link>&#32;=&#32;<link linkend="namespacejpcre2_1ad2236dcdcc14d580724b256ce7f168e5">LOCALE_NONE</link>;&#32;&#32;
<link linkend="namespacejpcre2_1abf6c3bff9268a572c299958d334ff26e">48 </link><emphasis class="keyword">const</emphasis>&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;<link linkend="namespacejpcre2_1abf6c3bff9268a572c299958d334ff26e">jpcre2::JIT_ERROR_MESSAGE_PREFIX</link>&#32;=&#32;<emphasis class="stringliteral">&quot;JIT&#32;compilation&#32;failed!&#32;&quot;</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
49 
51 
52 <link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;jpcre2::utils::toString(<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>*&#32;a){
53 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(a)&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">String</link>(a);
54 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="stringliteral">&quot;&quot;</emphasis>;
55 }
56 <link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;jpcre2::utils::toString(<emphasis class="keywordtype">char</emphasis>&#32;a){
57 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(a!=<emphasis class="charliteral">&apos;\0&apos;</emphasis>)<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">String</link>(1,&#32;a);
58 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="stringliteral">&quot;&quot;</emphasis>;
59 }
<link linkend="jpcre2_8hpp_1a433f24d37008ed65f829be30aa0f2c73">60 </link><link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;jpcre2::utils::toString(<emphasis class="keywordtype">int</emphasis>&#32;x)&#32;{
61 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;length&#32;=&#32;snprintf(&#32;0,&#32;0,&#32;<emphasis class="stringliteral">&quot;%d&quot;</emphasis>,&#32;x&#32;);
62 &#32;&#32;&#32;&#32;assert(&#32;length&#32;&gt;=&#32;0&#32;);
63 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">char</emphasis>*&#32;buf&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>[length&#32;+&#32;1];
64 &#32;&#32;&#32;&#32;snprintf(&#32;buf,&#32;length&#32;+&#32;1,&#32;<emphasis class="stringliteral">&quot;%d&quot;</emphasis>,&#32;x&#32;);
65 &#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">String</link>&#32;str(&#32;buf&#32;);
66 &#32;&#32;&#32;&#32;<emphasis class="keyword">delete</emphasis>[]&#32;buf;
67 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;str;
68 }
69 <link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;jpcre2::utils::toString(PCRE2_UCHAR*&#32;a){
70 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(a)&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">String</link>((<emphasis class="keywordtype">char</emphasis>*)a);
71 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="stringliteral">&quot;&quot;</emphasis>;
72 }
73 
74 <link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;jpcre2::utils::getPcre2ErrorMessage(<emphasis class="keywordtype">int</emphasis>&#32;err_num){
75 &#32;&#32;&#32;&#32;PCRE2_UCHAR&#32;buffer[8048];
76 &#32;&#32;&#32;&#32;pcre2_get_error_message(err_num,&#32;buffer,&#32;<emphasis class="keyword">sizeof</emphasis>(buffer));
77 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="jpcre2_8hpp_1a433f24d37008ed65f829be30aa0f2c73">toString</link>((PCRE2_UCHAR*)buffer);
78 }
80 
82 
83 <link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;jpcre2::Regex::getErrorMessage(<emphasis class="keywordtype">int</emphasis>&#32;err_num,&#32;PCRE2_SIZE&#32;err_off){
84 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(err_num&#32;==&#32;<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2a4115340549b623f4e2da285bf0aa9bff">ERROR::INVALID_MODIFIER</link>){
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<emphasis class="stringliteral">&quot;Invalid&#32;Modifier:&#32;&quot;</emphasis>+utils::toString((<emphasis class="keywordtype">char</emphasis>)err_off);
86 &#32;&#32;&#32;&#32;}
87 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>(err_num&#32;==&#32;<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2aa116db5c7b638480ccad3ae938d33c3e">ERROR::JIT_COMPILE_FAILED</link>)&#32;{
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;<link linkend="namespacejpcre2_1abf6c3bff9268a572c299958d334ff26e">JIT_ERROR_MESSAGE_PREFIX</link>+utils::getPcre2ErrorMessage((<emphasis class="keywordtype">int</emphasis>)err_off);
89 &#32;&#32;&#32;&#32;}
90 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>{
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;utils::getPcre2ErrorMessage((<emphasis class="keywordtype">int</emphasis>)err_num)+<emphasis class="stringliteral">&quot;.&#32;Error&#32;offset:&#32;&quot;</emphasis>+utils::toString((<emphasis class="keywordtype">int</emphasis>)err_off);
92 &#32;&#32;&#32;&#32;}
93 }
94 
95 <emphasis class="keywordtype">void</emphasis>&#32;jpcre2::Regex::deepCopy(<emphasis class="keyword">const</emphasis>&#32;Regex&amp;&#32;r){
96 &#32;&#32;&#32;&#32;<emphasis class="comment">//Now&#32;copy&#32;r.code&#32;if&#32;it&#32;is&#32;non-null</emphasis>
97 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(r.code){
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;freeRegexMemory();&#32;&#32;<emphasis class="comment">//first&#32;release&#32;memory&#32;if&#32;it&#32;is&#32;non-NULL</emphasis>
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//copy&#32;only&#32;if&#32;code&#32;is&#32;non-null</emphasis>
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;code&#32;=&#32;pcre2_code_copy(r.code);
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//pcre2_code_copy&#32;doesn&apos;t&#32;copy&#32;JIT&#32;memory</emphasis>
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//JIT&#32;compilation&#32;is&#32;needed</emphasis>
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>((jpcre2_compile_opts&#32;&amp;&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a5e8bab7c478015b19baf3e84ed00876e">JIT_COMPILE</link>)&#32;!=&#32;0){
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//perform&#32;jit&#32;compilation:</emphasis>
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;jit_ret=pcre2_jit_compile(code,&#32;PCRE2_JIT_COMPLETE);
106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(jit_ret!=0){
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>((jpcre2_compile_opts&#32;&amp;&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a6fec35fc9fdd8a606bed430c1816c552">ERROR_ALL</link>)&#32;!=&#32;0)&#32;{
108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_number&#32;=&#32;error_offset&#32;=&#32;<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2aa116db5c7b638480ccad3ae938d33c3e">ERROR::JIT_COMPILE_FAILED</link>;
109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>((<emphasis class="keywordtype">int</emphasis>)<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2aa116db5c7b638480ccad3ae938d33c3e">ERROR::JIT_COMPILE_FAILED</link>);
110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;current_warning_msg=<link linkend="namespacejpcre2_1abf6c3bff9268a572c299958d334ff26e">JIT_ERROR_MESSAGE_PREFIX</link>+utils::getPcre2ErrorMessage(jit_ret);
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
114 &#32;&#32;&#32;&#32;}&#32;<emphasis class="keywordflow">else</emphasis>&#32;code&#32;=&#32;0;
117 &#32;&#32;&#32;&#32;<emphasis class="keyword">delete</emphasis>&#32;rm;&#32;rm&#32;=&#32;0;&#32;<emphasis class="keyword">delete</emphasis>&#32;r.rm;
120 &#32;&#32;&#32;&#32;<emphasis class="keyword">delete</emphasis>&#32;rr;&#32;rr&#32;=&#32;0;&#32;<emphasis class="keyword">delete</emphasis>&#32;r.rr;
121 }
122 
123 <emphasis class="keywordtype">void</emphasis>&#32;jpcre2::Regex::parseCompileOpts(){
125 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<link linkend="namespacejpcre2_1a2aac465ddcb123560c7c8215dd69246c">SIZE_T</link>&#32;i=0;i&lt;modifier.length();++i){
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>&#32;(modifier[i]){
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;e&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_MATCH_UNSET_BACKREF;<emphasis class="keywordflow">break</emphasis>;
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;i&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_CASELESS;<emphasis class="keywordflow">break</emphasis>;
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;j&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_ALT_BSUX&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|&#32;&#32;PCRE2_MATCH_UNSET_BACKREF;<emphasis class="keywordflow">break</emphasis>;&#32;
131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;m&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_MULTILINE;<emphasis class="keywordflow">break</emphasis>;
132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;n&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_UTF&#32;|&#32;PCRE2_UCP;<emphasis class="keywordflow">break</emphasis>;
133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;s&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_DOTALL;<emphasis class="keywordflow">break</emphasis>;
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;u&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_UTF;<emphasis class="keywordflow">break</emphasis>;
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;x&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_EXTENDED;<emphasis class="keywordflow">break</emphasis>;
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;A&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_ANCHORED;<emphasis class="keywordflow">break</emphasis>;
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;D&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_DOLLAR_ENDONLY;<emphasis class="keywordflow">break</emphasis>;
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;J&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_DUPNAMES;<emphasis class="keywordflow">break</emphasis>;
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;S&apos;</emphasis>:&#32;jpcre2_compile_opts&#32;|=&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a5e8bab7c478015b19baf3e84ed00876e">JIT_COMPILE</link>;<emphasis class="keywordflow">break</emphasis>;&#32;&#32;&#32;&#32;
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;U&apos;</emphasis>:&#32;compile_opts&#32;|=&#32;PCRE2_UNGREEDY;<emphasis class="keywordflow">break</emphasis>;
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">default</emphasis>&#32;:&#32;<emphasis class="keywordflow">if</emphasis>((jpcre2_compile_opts&#32;&amp;&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a9124b768bcae4d51430aa7f26126f387">VALIDATE_MODIFIER</link>)!=0)
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{error_number=error_offset=(int)modifier[i];<emphasis class="keywordflow">throw</emphasis>((<emphasis class="keywordtype">int</emphasis>)<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2a4115340549b623f4e2da285bf0aa9bff">ERROR::INVALID_MODIFIER</link>);}<emphasis class="keywordflow">break</emphasis>;&#32;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
144 &#32;&#32;&#32;&#32;}
145 }
146 
147 
148 <emphasis class="keywordtype">void</emphasis>&#32;jpcre2::Regex&#32;::&#32;compile(){
150 &#32;&#32;&#32;&#32;PCRE2_SPTR&#32;c_pattern=(PCRE2_SPTR)pat_str.c_str();
151 &#32;&#32;&#32;&#32;
153 &#32;&#32;&#32;&#32;parseCompileOpts();
154 
155 &#32;&#32;&#32;&#32;<emphasis class="comment">/*************************************************************************</emphasis>
156 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;Now&#32;we&#32;are&#32;going&#32;to&#32;compile&#32;the&#32;regular&#32;expression&#32;pattern,&#32;and&#32;handle&#32;*</emphasis>
157 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;any&#32;errors&#32;that&#32;are&#32;detected.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
158 <emphasis class="comment">&#32;&#32;&#32;&#32;*************************************************************************/</emphasis>
159 
160 &#32;&#32;&#32;&#32;pcre2_compile_context&#32;*ccontext&#32;=&#32;pcre2_compile_context_create(0);
161 &#32;&#32;&#32;&#32;
162 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(mylocale&#32;!=&#32;<link linkend="namespacejpcre2_1ad2236dcdcc14d580724b256ce7f168e5">LOCALE_NONE</link>){
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">String</link>&#32;loc_old;
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;loc_old=utils::toString(std::setlocale(LC_CTYPE,&#32;mylocale.c_str()));
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keyword">const</emphasis>&#32;<emphasis class="keywordtype">unsigned</emphasis>&#32;<emphasis class="keywordtype">char</emphasis>&#32;*tables&#32;=&#32;pcre2_maketables(0);
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pcre2_set_character_tables(ccontext,&#32;tables);
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::setlocale(LC_CTYPE,loc_old.c_str());
168 &#32;&#32;&#32;&#32;}
169 
170 &#32;&#32;&#32;&#32;code&#32;=&#32;pcre2_compile(
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c_pattern,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;pattern&#32;*/</emphasis>
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_ZERO_TERMINATED,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;indicates&#32;pattern&#32;is&#32;zero-terminated&#32;*/</emphasis>
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;compile_opts,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;default&#32;options&#32;*/</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;error_number,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;for&#32;error&#32;number&#32;*/</emphasis>
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;error_offset,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;for&#32;error&#32;offset&#32;*/</emphasis>
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ccontext);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;use&#32;compile&#32;context&#32;*/</emphasis>
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
179 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(code&#32;==&#32;0){
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Compilation&#32;failed&#32;*/</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//must&#32;not&#32;free&#32;regex&#32;memory,&#32;the&#32;only&#32;function&#32;has&#32;that&#32;right&#32;is&#32;the&#32;destroyer.</emphasis>
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>(error_number);
183 &#32;&#32;&#32;&#32;}
184 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>((jpcre2_compile_opts&#32;&amp;&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a5e8bab7c478015b19baf3e84ed00876e">JIT_COMPILE</link>)&#32;!=&#32;0){
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;jit_ret=pcre2_jit_compile(code,&#32;PCRE2_JIT_COMPLETE);
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(jit_ret!=0){
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>((jpcre2_compile_opts&#32;&amp;&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a6fec35fc9fdd8a606bed430c1816c552">ERROR_ALL</link>)&#32;!=&#32;0)&#32;{
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_number&#32;=&#32;<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2aa116db5c7b638480ccad3ae938d33c3e">ERROR::JIT_COMPILE_FAILED</link>;
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_offset&#32;=&#32;jit_ret;
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">throw</emphasis>((<emphasis class="keywordtype">int</emphasis>)<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2aa116db5c7b638480ccad3ae938d33c3e">ERROR::JIT_COMPILE_FAILED</link>);
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;current_warning_msg=<emphasis class="stringliteral">&quot;JIT&#32;compile&#32;failed:&#32;&quot;</emphasis>+utils::getPcre2ErrorMessage(jit_ret);
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;&#32;
195 &#32;&#32;&#32;&#32;}
196 }
198 
200 
201 <emphasis class="keywordtype">void</emphasis>&#32;jpcre2::RegexReplace::parseReplacementOpts(){
203 &#32;&#32;&#32;&#32;replace_opts&#32;|=&#32;PCRE2_SUBSTITUTE_OVERFLOW_LENGTH;
207 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<link linkend="namespacejpcre2_1a2aac465ddcb123560c7c8215dd69246c">SIZE_T</link>&#32;i=0;i&lt;r_modifier.length();i++){
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>&#32;(r_modifier[i]){
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;e&apos;</emphasis>:&#32;replace_opts&#32;&#32;|=&#32;PCRE2_SUBSTITUTE_UNSET_EMPTY;<emphasis class="keywordflow">break</emphasis>;
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;E&apos;</emphasis>:&#32;replace_opts&#32;&#32;|=&#32;PCRE2_SUBSTITUTE_UNKNOWN_UNSET&#32;|&#32;PCRE2_SUBSTITUTE_UNSET_EMPTY;<emphasis class="keywordflow">break</emphasis>;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;g&apos;</emphasis>:&#32;replace_opts&#32;&#32;|=&#32;PCRE2_SUBSTITUTE_GLOBAL;<emphasis class="keywordflow">break</emphasis>;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;x&apos;</emphasis>:&#32;replace_opts&#32;&#32;|=&#32;PCRE2_SUBSTITUTE_EXTENDED;<emphasis class="keywordflow">break</emphasis>;
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">default</emphasis>&#32;:&#32;<emphasis class="keywordflow">if</emphasis>((jpcre2_replace_opts&#32;&amp;&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a9124b768bcae4d51430aa7f26126f387">VALIDATE_MODIFIER</link>)!=0)
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{re-&gt;error_number=re-&gt;error_offset=(int)r_modifier[i];<emphasis class="keywordflow">throw</emphasis>((<emphasis class="keywordtype">int</emphasis>)<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2a4115340549b623f4e2da285bf0aa9bff">ERROR::INVALID_MODIFIER</link>);}<emphasis class="keywordflow">break</emphasis>;
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
216 &#32;&#32;&#32;&#32;}
217 }
218 
219 
220 <link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">jpcre2::String</link>&#32;jpcre2::RegexReplace::replace(){
221 &#32;&#32;&#32;&#32;
223 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(re-&gt;code&#32;==&#32;0)&#32;<emphasis class="keywordflow">return</emphasis>&#32;r_subject;
224 &#32;&#32;&#32;&#32;
226 &#32;&#32;&#32;&#32;parseReplacementOpts();
227 &#32;&#32;&#32;&#32;
228 &#32;&#32;&#32;&#32;PCRE2_SPTR&#32;subject&#32;=&#32;(PCRE2_SPTR)r_subject.c_str();
229 &#32;&#32;&#32;&#32;PCRE2_SIZE&#32;subject_length&#32;=&#32;strlen((<emphasis class="keywordtype">char</emphasis>&#32;*)subject);
230 &#32;&#32;&#32;&#32;PCRE2_SPTR&#32;replace&#32;=&#32;(PCRE2_SPTR)r_replw.c_str();
231 &#32;&#32;&#32;&#32;PCRE2_SIZE&#32;replace_length&#32;=&#32;strlen((<emphasis class="keywordtype">char</emphasis>&#32;*)replace);
232 &#32;&#32;&#32;&#32;PCRE2_SIZE&#32;outlengthptr=(PCRE2_SIZE)buffer_size;
233 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ret=0;
234 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">bool</emphasis>&#32;retry=<emphasis class="keyword">true</emphasis>;
235 &#32;&#32;&#32;&#32;PCRE2_UCHAR*&#32;output_buffer;
236 &#32;&#32;&#32;&#32;output_buffer=(PCRE2_UCHAR*)malloc(outlengthptr&#32;*&#32;<emphasis class="keyword">sizeof</emphasis>(PCRE2_UCHAR));
237 &#32;&#32;&#32;&#32;
239 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>(<emphasis class="keyword">true</emphasis>){
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=pcre2_substitute(
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;re-&gt;code,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Points&#32;to&#32;the&#32;compiled&#32;pattern*/</emphasis>
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subject,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Points&#32;to&#32;the&#32;subject&#32;string*/</emphasis>
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subject_length,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Length&#32;of&#32;the&#32;subject&#32;string*/</emphasis>
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Offset&#32;in&#32;the&#32;subject&#32;at&#32;which&#32;to&#32;start&#32;matching*/</emphasis>
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replace_opts,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Option&#32;bits*/</emphasis>
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Points&#32;to&#32;a&#32;match&#32;data&#32;block,&#32;or&#32;is&#32;NULL*/</emphasis>
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Points&#32;to&#32;a&#32;match&#32;context,&#32;or&#32;is&#32;NULL*/</emphasis>
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replace,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Points&#32;to&#32;the&#32;replacement&#32;string*/</emphasis>
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;replace_length,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Length&#32;of&#32;the&#32;replacement&#32;string*/</emphasis>
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Points&#32;to&#32;the&#32;output&#32;buffer*/</emphasis>
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;outlengthptr&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*Points&#32;to&#32;the&#32;length&#32;of&#32;the&#32;output&#32;buffer*/</emphasis>
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;);
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;re-&gt;error_number=(int)ret;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;re-&gt;error_offset=ret;
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(ret&#32;&lt;&#32;0){
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>((replace_opts&#32;&amp;&#32;PCRE2_SUBSTITUTE_OVERFLOW_LENGTH)&#32;!=0&#32;&amp;&amp;&#32;ret&#32;==&#32;(int)PCRE2_ERROR_NOMEMORY&#32;&amp;&amp;&#32;retry){
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;retry=<emphasis class="keyword">false</emphasis>;
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outlengthptr++;&#32;&#32;
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;output_buffer=(PCRE2_UCHAR*)realloc(output_buffer,outlengthptr&#32;*&#32;<emphasis class="keyword">sizeof</emphasis>(PCRE2_UCHAR));
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">continue</emphasis>;
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;{::free(output_buffer);<emphasis class="keywordflow">throw</emphasis>(ret);}
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">break</emphasis>;
270 &#32;&#32;&#32;&#32;}
271 &#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">String</link>&#32;result=utils::toString((<emphasis class="keywordtype">char</emphasis>*)output_buffer);
272 &#32;&#32;&#32;&#32;::free(output_buffer);
273 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;result;
274 }
276 
278 
279 <emphasis class="keywordtype">void</emphasis>&#32;jpcre2::RegexMatch::parseMatchOpts(){
281 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>(<link linkend="namespacejpcre2_1a2aac465ddcb123560c7c8215dd69246c">SIZE_T</link>&#32;i=0;i&lt;m_modifier.length();++i){
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>&#32;(m_modifier[i]){
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;A&apos;</emphasis>:&#32;match_opts&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;|=&#32;PCRE2_ANCHORED;<emphasis class="keywordflow">break</emphasis>;
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;<emphasis class="charliteral">&apos;g&apos;</emphasis>:&#32;jpcre2_match_opts&#32;|=&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00af29fccdb263520155e9c25a826a7200c">FIND_ALL</link>;<emphasis class="keywordflow">break</emphasis>;
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">default</emphasis>&#32;:&#32;<emphasis class="keywordflow">if</emphasis>((jpcre2_match_opts&#32;&amp;&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00a9124b768bcae4d51430aa7f26126f387">VALIDATE_MODIFIER</link>)!=0)
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{re-&gt;error_number=re-&gt;error_offset=(int)m_modifier[i];<emphasis class="keywordflow">throw</emphasis>((<emphasis class="keywordtype">int</emphasis>)<link linkend="namespacejpcre2_1_1ERROR_1a4b2998984439438fa9da8d7043909bc2a4115340549b623f4e2da285bf0aa9bff">ERROR::INVALID_MODIFIER</link>);}<emphasis class="keywordflow">break</emphasis>;
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
288 &#32;&#32;&#32;&#32;}
289 }
290 
291 
292 <emphasis class="keywordtype">void</emphasis>&#32;jpcre2::RegexMatch::getNumberedSubstrings(<emphasis class="keywordtype">int</emphasis>&#32;rc,&#32;pcre2_match_data&#32;*match_data){
293 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;rc;&#32;i++){
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">String</link>&#32;value;
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_UCHAR&#32;**bufferptr;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_SIZE&#32;bufflen;
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pcre2_substring_length_bynumber(match_data,(<link linkend="namespacejpcre2_1a078242d38221a13fb3543b9edd78c099">Uint</link>)i,&amp;bufflen);
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferptr=(PCRE2_UCHAR**)malloc(bufflen&#32;*&#32;<emphasis class="keyword">sizeof</emphasis>(PCRE2_UCHAR));
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ret=pcre2_substring_get_bynumber(match_data,&#32;(<link linkend="namespacejpcre2_1a078242d38221a13fb3543b9edd78c099">Uint</link>)i,&#32;bufferptr,&#32;&amp;bufflen);
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(ret&lt;0){
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>(ret){
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;PCRE2_ERROR_NOMEMORY:&#32;<emphasis class="keywordflow">throw</emphasis>(ret);
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">default</emphasis>:<emphasis class="keywordflow">break</emphasis>;&#32;&#32;&#32;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value=utils::toString((<emphasis class="keywordtype">char</emphasis>*)*bufferptr);
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::free(bufferptr);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(num_map0)&#32;(*num_map0)[i]=value;&#32;&#32;<emphasis class="comment">//This&#32;null&#32;check&#32;is&#32;paranoid,&#32;this&#32;function&#32;shouldn&apos;t&#32;be&#32;called&#32;if&#32;this&#32;map&#32;is&#32;null</emphasis>
315 &#32;&#32;&#32;&#32;}
316 }
317 
318 <emphasis class="keywordtype">void</emphasis>&#32;jpcre2::RegexMatch::getNamedSubstrings(<emphasis class="keywordtype">int</emphasis>&#32;namecount,<emphasis class="keywordtype">int</emphasis>&#32;name_entry_size,PCRE2_SPTR&#32;tabptr,&#32;pcre2_match_data&#32;*match_data){
319 &#32;&#32;&#32;&#32;
320 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(<emphasis class="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;namecount;&#32;i++){
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a91f03070152fb228bc116c5a737f1d16">String</link>&#32;key,value,value1;
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;n&#32;=&#32;(tabptr[0]&#32;&lt;&lt;&#32;8)&#32;|&#32;tabptr[1];
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;key=utils::toString((<emphasis class="keywordtype">char</emphasis>*)(tabptr+2));
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_UCHAR&#32;**bufferptr;
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_SIZE&#32;bufflen;
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pcre2_substring_length_byname(match_data,(PCRE2_SPTR)key.c_str(),&amp;bufflen);
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferptr=(PCRE2_UCHAR&#32;**)malloc((bufflen+1)&#32;*&#32;<emphasis class="keyword">sizeof</emphasis>(PCRE2_UCHAR));
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;ret=pcre2_substring_get_byname(match_data,&#32;(PCRE2_SPTR)key.c_str(),&#32;bufferptr,&#32;&amp;bufflen);
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(ret&lt;0){
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>(ret){
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;PCRE2_ERROR_NOMEMORY:&#32;<emphasis class="keywordflow">throw</emphasis>(ret);
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">default</emphasis>:<emphasis class="keywordflow">break</emphasis>;&#32;&#32;&#32;
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value=utils::toString((<emphasis class="keywordtype">char</emphasis>&#32;*)*bufferptr);
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::free(bufferptr);
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pcre2_substring_length_bynumber(match_data,(<link linkend="namespacejpcre2_1a078242d38221a13fb3543b9edd78c099">Uint</link>)n,&amp;bufflen);
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bufferptr=(PCRE2_UCHAR&#32;**)malloc(bufflen&#32;*&#32;<emphasis class="keyword">sizeof</emphasis>(PCRE2_UCHAR));
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ret=pcre2_substring_get_bynumber(match_data,&#32;(<link linkend="namespacejpcre2_1a078242d38221a13fb3543b9edd78c099">Uint</link>)n,&#32;bufferptr,&#32;&amp;bufflen);
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(ret&lt;0){
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>(ret){
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;PCRE2_ERROR_NOMEMORY:&#32;<emphasis class="keywordflow">throw</emphasis>(ret);
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">default</emphasis>:<emphasis class="keywordflow">break</emphasis>;&#32;&#32;&#32;
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;value1=utils::toString((<emphasis class="keywordtype">char</emphasis>&#32;*)*bufferptr);
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;::free(bufferptr);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(value!=value1){tabptr&#32;+=&#32;name_entry_size;<emphasis class="keywordflow">continue</emphasis>;}
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(nas_map0)&#32;(*nas_map0)[key]=value;&#32;&#32;<emphasis class="comment">//must&#32;check&#32;for&#32;null</emphasis>
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(ntn_map0)&#32;(*ntn_map0)[key]=n;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//must&#32;check&#32;for&#32;null</emphasis>
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tabptr&#32;+=&#32;name_entry_size;
365 &#32;&#32;&#32;&#32;}
366 }
367 
368 
<link linkend="classjpcre2_1_1RegexMatch_1a5868aef3a146594ea1ebef34d122bb33">369 </link><link linkend="namespacejpcre2_1a2aac465ddcb123560c7c8215dd69246c">jpcre2::SIZE_T</link>&#32;<link linkend="classjpcre2_1_1RegexMatch_1a5868aef3a146594ea1ebef34d122bb33">jpcre2::RegexMatch::match</link>(){
370 
372 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(re-&gt;code&#32;==&#32;0)&#32;<emphasis class="keywordflow">return</emphasis>&#32;0;
373 &#32;&#32;&#32;&#32;
375 &#32;&#32;&#32;&#32;parseMatchOpts();
376 &#32;&#32;&#32;&#32;
377 &#32;&#32;&#32;&#32;PCRE2_SPTR&#32;subject=(PCRE2_SPTR)m_subject.c_str();
378 &#32;&#32;&#32;&#32;PCRE2_SPTR&#32;name_table;
379 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;crlf_is_newline;
380 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;namecount;
381 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;name_entry_size;
382 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;rc;
383 &#32;&#32;&#32;&#32;<emphasis class="keywordtype">int</emphasis>&#32;utf8;
384 &#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a2aac465ddcb123560c7c8215dd69246c">SIZE_T</link>&#32;count&#32;=&#32;0;
385 &#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a078242d38221a13fb3543b9edd78c099">Uint</link>&#32;option_bits;
386 &#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a078242d38221a13fb3543b9edd78c099">Uint</link>&#32;newline;&#32;&#32;&#32;&#32;
387 &#32;&#32;&#32;&#32;PCRE2_SIZE&#32;*ovector;
388 &#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a2aac465ddcb123560c7c8215dd69246c">SIZE_T</link>&#32;subject_length;
389 &#32;&#32;&#32;&#32;pcre2_match_data&#32;*match_data;
390 &#32;&#32;&#32;&#32;subject_length&#32;=&#32;strlen((<emphasis class="keywordtype">char</emphasis>&#32;*)subject);
391 &#32;&#32;&#32;&#32;
392 &#32;&#32;&#32;&#32;
394 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_num)&#32;{&#32;vec_num-&gt;clear();&#32;num_map0&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="namespacejpcre2_1a947e37f0e4a1678157e7f1f855638e82">MapNum</link>();&#32;}
395 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_nas)&#32;{&#32;vec_nas-&gt;clear();&#32;nas_map0&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="namespacejpcre2_1a20bd901c9ca3c949806aa6b9e324f6cf">MapNas</link>();&#32;}
396 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_ntn)&#32;{&#32;vec_ntn-&gt;clear();&#32;ntn_map0&#32;=&#32;<emphasis class="keyword">new</emphasis>&#32;<link linkend="namespacejpcre2_1a753ebedfb8caf4a16ffbf47d8d705656">MapNtN</link>();&#32;}
397 
398 
399 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Using&#32;this&#32;function&#32;ensures&#32;that&#32;the&#32;block&#32;is&#32;exactly&#32;the&#32;right&#32;size&#32;for</emphasis>
400 <emphasis class="comment">&#32;&#32;&#32;&#32;the&#32;number&#32;of&#32;capturing&#32;parentheses&#32;in&#32;the&#32;pattern.&#32;*/</emphasis>
401 
402 &#32;&#32;&#32;&#32;match_data&#32;=&#32;pcre2_match_data_create_from_pattern(re-&gt;code,&#32;0);
403 
404 &#32;&#32;&#32;&#32;rc&#32;=&#32;pcre2_match(
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;re-&gt;code,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;compiled&#32;pattern&#32;*/</emphasis>
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subject,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;subject&#32;string&#32;*/</emphasis>
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subject_length,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;length&#32;of&#32;the&#32;subject&#32;*/</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;start&#32;at&#32;offset&#32;0&#32;in&#32;the&#32;subject&#32;*/</emphasis>
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_opts,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;default&#32;options&#32;*/</emphasis>
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_data,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;block&#32;for&#32;storing&#32;the&#32;result&#32;*/</emphasis>
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;use&#32;default&#32;match&#32;context&#32;*/</emphasis>
412 
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Matching&#32;failed:&#32;handle&#32;error&#32;cases&#32;*/</emphasis>
414 
415 &#32;&#32;&#32;&#32;re-&gt;error_number=rc;
416 &#32;&#32;&#32;&#32;re-&gt;error_offset=rc;
417 &#32;&#32;&#32;&#32;
418 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rc&#32;&lt;&#32;0){
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pcre2_match_data_free(match_data);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Release&#32;memory&#32;used&#32;for&#32;the&#32;match&#32;*/</emphasis>
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//pcre2_code_free(code);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//must&#32;not&#32;free&#32;code.&#32;This&#32;function&#32;has&#32;no&#32;right&#32;to&#32;modify&#32;regex</emphasis>
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">switch</emphasis>(rc){
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">case</emphasis>&#32;PCRE2_ERROR_NOMATCH:&#32;<emphasis class="keywordflow">return</emphasis>&#32;count;
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*</emphasis>
424 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Handle&#32;other&#32;special&#32;cases&#32;if&#32;you&#32;like</emphasis>
425 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*/</emphasis>
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">default</emphasis>:&#32;<emphasis class="keywordflow">throw</emphasis>(rc);
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;count;
429 &#32;&#32;&#32;&#32;}
430 
431 &#32;&#32;&#32;&#32;++count;&#32;<emphasis class="comment">//Increment&#32;the&#32;counter</emphasis>
432 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Match&#32;succeded.&#32;Get&#32;a&#32;pointer&#32;to&#32;the&#32;output&#32;vector,&#32;where&#32;string&#32;offsets&#32;are</emphasis>
433 <emphasis class="comment">&#32;&#32;&#32;&#32;stored.&#32;*/</emphasis>
434 &#32;&#32;&#32;&#32;ovector&#32;=&#32;pcre2_get_ovector_pointer(match_data);
435 
436 
437 &#32;&#32;&#32;&#32;<emphasis class="comment">/*************************************************************************</emphasis>
438 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;We&#32;have&#32;found&#32;the&#32;first&#32;match&#32;within&#32;the&#32;subject&#32;string.&#32;If&#32;the&#32;output&#32;*</emphasis>
439 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;vector&#32;wasn&apos;t&#32;big&#32;enough,&#32;say&#32;so.&#32;Then&#32;output&#32;any&#32;substrings&#32;that&#32;were&#32;*</emphasis>
440 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;captured.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
441 <emphasis class="comment">&#32;&#32;&#32;&#32;*************************************************************************/</emphasis>
442 
443 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;The&#32;output&#32;vector&#32;wasn&apos;t&#32;big&#32;enough.&#32;This&#32;should&#32;not&#32;happen,&#32;because&#32;we&#32;used</emphasis>
444 <emphasis class="comment">&#32;&#32;&#32;&#32;pcre2_match_data_create_from_pattern()&#32;above.&#32;*/</emphasis>
445 
446 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rc&#32;==&#32;0){
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//ovector&#32;was&#32;not&#32;big&#32;enough&#32;for&#32;all&#32;the&#32;captured&#32;substrings;</emphasis>
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;count;
449 &#32;&#32;
450 &#32;&#32;&#32;&#32;}
451 
453 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(num_map0)&#32;getNumberedSubstrings(rc,match_data);
454 &#32;&#32;&#32;&#32;
455 &#32;&#32;&#32;&#32;
456 
457 &#32;&#32;&#32;&#32;<emphasis class="comment">/**************************************************************************</emphasis>
458 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;That&#32;concludes&#32;the&#32;basic&#32;part&#32;of&#32;this&#32;demonstration&#32;program.&#32;We&#32;have&#32;&#32;&#32;&#32;*</emphasis>
459 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;compiled&#32;a&#32;pattern,&#32;and&#32;performed&#32;a&#32;single&#32;match.&#32;The&#32;code&#32;that&#32;follows&#32;*</emphasis>
460 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;shows&#32;first&#32;how&#32;to&#32;access&#32;named&#32;substrings,&#32;and&#32;then&#32;how&#32;to&#32;code&#32;for&#32;&#32;&#32;&#32;*</emphasis>
461 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;repeated&#32;matches&#32;on&#32;the&#32;same&#32;subject.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
462 <emphasis class="comment">&#32;&#32;&#32;&#32;**************************************************************************/</emphasis>
463 
464 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;See&#32;if&#32;there&#32;are&#32;any&#32;named&#32;substrings,&#32;and&#32;if&#32;so,&#32;show&#32;them&#32;by&#32;name.&#32;First</emphasis>
465 <emphasis class="comment">&#32;&#32;&#32;&#32;we&#32;have&#32;to&#32;extract&#32;the&#32;count&#32;of&#32;named&#32;parentheses&#32;from&#32;the&#32;pattern.&#32;*/</emphasis>
466 
467 &#32;&#32;&#32;&#32;(void)pcre2_pattern_info(
468 &#32;&#32;&#32;&#32;re-&gt;code,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;compiled&#32;pattern&#32;*/</emphasis>
469 &#32;&#32;&#32;&#32;PCRE2_INFO_NAMECOUNT,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;get&#32;the&#32;number&#32;of&#32;named&#32;substrings&#32;*/</emphasis>
470 &#32;&#32;&#32;&#32;&amp;namecount);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;where&#32;to&#32;put&#32;the&#32;answer&#32;*/</emphasis>
471 
472 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(namecount&#32;&lt;=&#32;0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*No&#32;named&#32;substrings*/</emphasis>
473 &#32;&#32;&#32;&#32;
474 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>{
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_SPTR&#32;tabptr;
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Before&#32;we&#32;can&#32;access&#32;the&#32;substrings,&#32;we&#32;must&#32;extract&#32;the&#32;table&#32;for</emphasis>
478 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;translating&#32;names&#32;to&#32;numbers,&#32;and&#32;the&#32;size&#32;of&#32;each&#32;entry&#32;in&#32;the&#32;table.&#32;*/</emphasis>
479 
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)pcre2_pattern_info(
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;re-&gt;code,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;compiled&#32;pattern&#32;*/</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_INFO_NAMETABLE,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;address&#32;of&#32;the&#32;table&#32;*/</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;name_table);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;where&#32;to&#32;put&#32;the&#32;answer&#32;*/</emphasis>
484 
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)pcre2_pattern_info(
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;re-&gt;code,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;compiled&#32;pattern&#32;*/</emphasis>
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_INFO_NAMEENTRYSIZE,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;size&#32;of&#32;each&#32;entry&#32;in&#32;the&#32;table&#32;*/</emphasis>
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;name_entry_size);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;where&#32;to&#32;put&#32;the&#32;answer&#32;*/</emphasis>
489 
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Now&#32;we&#32;can&#32;scan&#32;the&#32;table&#32;and,&#32;for&#32;each&#32;entry,&#32;print&#32;the&#32;number,&#32;the&#32;name,</emphasis>
491 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;and&#32;the&#32;substring&#32;itself.&#32;In&#32;the&#32;8-bit&#32;library&#32;the&#32;number&#32;is&#32;held&#32;in&#32;two</emphasis>
492 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;bytes,&#32;most&#32;significant&#32;first.&#32;*/</emphasis>
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;tabptr&#32;=&#32;name_table;
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(nas_map0&#32;||&#32;ntn_map0)&#32;getNamedSubstrings(namecount,name_entry_size,tabptr,match_data);
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
499 &#32;&#32;&#32;&#32;}
500 &#32;&#32;&#32;&#32;
501 &#32;&#32;&#32;&#32;
503 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_num)&#32;vec_num-&gt;push_back(*num_map0);
504 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_nas)&#32;vec_nas-&gt;push_back(*nas_map0);
505 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_ntn)&#32;vec_ntn-&gt;push_back(*ntn_map0);
506 
507 &#32;&#32;&#32;&#32;<emphasis class="comment">/*************************************************************************</emphasis>
508 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;If&#32;the&#32;&quot;-g&quot;&#32;option&#32;was&#32;given&#32;on&#32;the&#32;command&#32;line,&#32;we&#32;want&#32;to&#32;continue&#32;&#32;*</emphasis>
509 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;to&#32;search&#32;for&#32;additional&#32;matches&#32;in&#32;the&#32;subject&#32;string,&#32;in&#32;a&#32;similar&#32;&#32;&#32;*</emphasis>
510 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;way&#32;to&#32;the&#32;/g&#32;option&#32;in&#32;Perl.&#32;This&#32;turns&#32;out&#32;to&#32;be&#32;trickier&#32;than&#32;you&#32;&#32;&#32;*</emphasis>
511 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;might&#32;think&#32;because&#32;of&#32;the&#32;possibility&#32;of&#32;matching&#32;an&#32;empty&#32;string.&#32;&#32;&#32;&#32;*</emphasis>
512 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;What&#32;happens&#32;is&#32;as&#32;follows:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
513 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
514 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;If&#32;the&#32;previous&#32;match&#32;was&#32;NOT&#32;for&#32;an&#32;empty&#32;string,&#32;we&#32;can&#32;just&#32;start&#32;&#32;&#32;*</emphasis>
515 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;the&#32;next&#32;match&#32;at&#32;the&#32;end&#32;of&#32;the&#32;previous&#32;one.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
516 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
517 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;If&#32;the&#32;previous&#32;match&#32;WAS&#32;for&#32;an&#32;empty&#32;string,&#32;we&#32;can&apos;t&#32;do&#32;that,&#32;as&#32;it&#32;*</emphasis>
518 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;would&#32;lead&#32;to&#32;an&#32;infinite&#32;loop.&#32;Instead,&#32;a&#32;call&#32;of&#32;pcre2_match()&#32;is&#32;&#32;&#32;&#32;*</emphasis>
519 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;made&#32;with&#32;the&#32;PCRE2_NOTEMPTY_ATSTART&#32;and&#32;PCRE2_ANCHORED&#32;flags&#32;set.&#32;The&#32;*</emphasis>
520 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;first&#32;of&#32;these&#32;tells&#32;PCRE2&#32;that&#32;an&#32;empty&#32;string&#32;at&#32;the&#32;start&#32;of&#32;the&#32;&#32;&#32;&#32;*</emphasis>
521 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;subject&#32;is&#32;not&#32;a&#32;valid&#32;match;&#32;other&#32;possibilities&#32;must&#32;be&#32;tried.&#32;The&#32;&#32;&#32;*</emphasis>
522 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;second&#32;flag&#32;restricts&#32;PCRE2&#32;to&#32;one&#32;match&#32;attempt&#32;at&#32;the&#32;initial&#32;string&#32;*</emphasis>
523 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;position.&#32;If&#32;this&#32;match&#32;succeeds,&#32;an&#32;alternative&#32;to&#32;the&#32;empty&#32;string&#32;&#32;&#32;*</emphasis>
524 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;match&#32;has&#32;been&#32;found,&#32;and&#32;we&#32;can&#32;print&#32;it&#32;and&#32;proceed&#32;round&#32;the&#32;loop,&#32;&#32;*</emphasis>
525 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;advancing&#32;by&#32;the&#32;length&#32;of&#32;whatever&#32;was&#32;found.&#32;If&#32;this&#32;match&#32;does&#32;not&#32;&#32;*</emphasis>
526 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;succeed,&#32;we&#32;still&#32;stay&#32;in&#32;the&#32;loop,&#32;advancing&#32;by&#32;just&#32;one&#32;character.&#32;&#32;&#32;*</emphasis>
527 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;In&#32;UTF-8&#32;mode,&#32;which&#32;can&#32;be&#32;set&#32;by&#32;(*UTF)&#32;in&#32;the&#32;pattern,&#32;this&#32;may&#32;be&#32;&#32;*</emphasis>
528 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;more&#32;than&#32;one&#32;byte.&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
529 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
530 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;However,&#32;there&#32;is&#32;a&#32;complication&#32;concerned&#32;with&#32;newlines.&#32;When&#32;the&#32;&#32;&#32;&#32;&#32;*</emphasis>
531 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;newline&#32;convention&#32;is&#32;such&#32;that&#32;CRLF&#32;is&#32;a&#32;valid&#32;newline,&#32;we&#32;must&#32;&#32;&#32;&#32;&#32;&#32;&#32;*</emphasis>
532 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;advance&#32;by&#32;two&#32;characters&#32;rather&#32;than&#32;one.&#32;The&#32;newline&#32;convention&#32;can&#32;&#32;*</emphasis>
533 <emphasis class="comment">&#32;&#32;&#32;&#32;*&#32;be&#32;set&#32;in&#32;the&#32;regex&#32;by&#32;(*CR),&#32;etc.;&#32;if&#32;not,&#32;we&#32;must&#32;find&#32;the&#32;default.&#32;&#32;*</emphasis>
534 <emphasis class="comment">&#32;&#32;&#32;&#32;*************************************************************************/</emphasis>
535 
536 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((jpcre2_match_opts&#32;&amp;&#32;<link linkend="namespacejpcre2_1a85c143271501e383843f45b9999c2f00af29fccdb263520155e9c25a826a7200c">FIND_ALL</link>)&#32;==&#32;0){
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pcre2_match_data_free(match_data);&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Release&#32;the&#32;memory&#32;that&#32;was&#32;used&#32;*/</emphasis>
538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//pcre2_code_free(re);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;///&#32;Don&apos;t&#32;do&#32;this.&#32;This&#32;function&#32;has&#32;no&#32;right&#32;to&#32;modify&#32;regex.</emphasis>
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;count;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Exit&#32;the&#32;program.&#32;*/</emphasis>
540 &#32;&#32;&#32;&#32;}
541 
542 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Before&#32;running&#32;the&#32;loop,&#32;check&#32;for&#32;UTF-8&#32;and&#32;whether&#32;CRLF&#32;is&#32;a&#32;valid&#32;newline</emphasis>
543 <emphasis class="comment">&#32;&#32;&#32;&#32;sequence.&#32;First,&#32;find&#32;the&#32;options&#32;with&#32;which&#32;the&#32;regex&#32;was&#32;compiled&#32;and&#32;extract</emphasis>
544 <emphasis class="comment">&#32;&#32;&#32;&#32;the&#32;UTF&#32;state.&#32;*/</emphasis>
545 
546 &#32;&#32;&#32;&#32;(void)pcre2_pattern_info(re-&gt;code,&#32;PCRE2_INFO_ALLOPTIONS,&#32;&amp;option_bits);
547 &#32;&#32;&#32;&#32;utf8&#32;=&#32;(option_bits&#32;&amp;&#32;PCRE2_UTF)&#32;!=&#32;0;
548 &#32;&#32;&#32;&#32;
549 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Now&#32;find&#32;the&#32;newline&#32;convention&#32;and&#32;see&#32;whether&#32;CRLF&#32;is&#32;a&#32;valid&#32;newline</emphasis>
550 <emphasis class="comment">&#32;&#32;&#32;&#32;sequence.&#32;*/</emphasis>
551 &#32;&#32;&#32;&#32;
552 &#32;&#32;&#32;&#32;(void)pcre2_pattern_info(re-&gt;code,&#32;PCRE2_INFO_NEWLINE,&#32;&amp;newline);
553 &#32;&#32;&#32;&#32;crlf_is_newline&#32;=&#32;newline&#32;==&#32;PCRE2_NEWLINE_ANY&#32;||
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newline&#32;==&#32;PCRE2_NEWLINE_CRLF&#32;||
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newline&#32;==&#32;PCRE2_NEWLINE_ANYCRLF;
556 &#32;&#32;&#32;&#32;
557 &#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Loop&#32;for&#32;second&#32;and&#32;subsequent&#32;matches&#32;*/</emphasis>
558 
559 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;(;;){
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(num_map0)num_map0-&gt;clear();&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(nas_map0)nas_map0-&gt;clear();
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(ntn_map0)ntn_map0-&gt;clear();
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="namespacejpcre2_1a078242d38221a13fb3543b9edd78c099">Uint</link>&#32;options&#32;=&#32;match_opts;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Normally&#32;no&#32;options&#32;*/</emphasis>
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_SIZE&#32;start_offset&#32;=&#32;ovector[1];&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Start&#32;at&#32;end&#32;of&#32;previous&#32;match&#32;*/</emphasis>
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;If&#32;the&#32;previous&#32;match&#32;was&#32;for&#32;an&#32;empty&#32;string,&#32;we&#32;are&#32;finished&#32;if&#32;we&#32;are</emphasis>
569 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;at&#32;the&#32;end&#32;of&#32;the&#32;subject.&#32;Otherwise,&#32;arrange&#32;to&#32;run&#32;another&#32;match&#32;at&#32;the</emphasis>
570 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;same&#32;point&#32;to&#32;see&#32;if&#32;a&#32;non-empty&#32;match&#32;can&#32;be&#32;found.&#32;*/</emphasis>
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(ovector[0]&#32;==&#32;ovector[1]){
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(ovector[0]&#32;==&#32;subject_length)&#32;<emphasis class="keywordflow">break</emphasis>;
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;options&#32;|=&#32;PCRE2_NOTEMPTY_ATSTART&#32;|&#32;PCRE2_ANCHORED;
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Run&#32;the&#32;next&#32;matching&#32;operation&#32;*/</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rc&#32;=&#32;pcre2_match(
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;re-&gt;code,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;compiled&#32;pattern&#32;*/</emphasis>
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subject,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;subject&#32;string&#32;*/</emphasis>
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subject_length,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;the&#32;length&#32;of&#32;the&#32;subject&#32;*/</emphasis>
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start_offset,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;starting&#32;offset&#32;in&#32;the&#32;subject&#32;*/</emphasis>
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;options,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;options&#32;*/</emphasis>
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;match_data,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;block&#32;for&#32;storing&#32;the&#32;result&#32;*/</emphasis>
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;use&#32;default&#32;match&#32;context&#32;*/</emphasis>
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;This&#32;time,&#32;a&#32;result&#32;of&#32;NOMATCH&#32;isn&apos;t&#32;an&#32;error.&#32;If&#32;the&#32;value&#32;in&#32;&quot;options&quot;</emphasis>
589 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is&#32;zero,&#32;it&#32;just&#32;means&#32;we&#32;have&#32;found&#32;all&#32;possible&#32;matches,&#32;so&#32;the&#32;loop&#32;ends.</emphasis>
590 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Otherwise,&#32;it&#32;means&#32;we&#32;have&#32;failed&#32;to&#32;find&#32;a&#32;non-empty-string&#32;match&#32;at&#32;a</emphasis>
591 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;point&#32;where&#32;there&#32;was&#32;a&#32;previous&#32;empty-string&#32;match.&#32;In&#32;this&#32;case,&#32;we&#32;do&#32;what</emphasis>
592 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Perl&#32;does:&#32;advance&#32;the&#32;matching&#32;position&#32;by&#32;one&#32;character,&#32;and&#32;continue.&#32;We</emphasis>
593 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;do&#32;this&#32;by&#32;setting&#32;the&#32;&quot;end&#32;of&#32;previous&#32;match&quot;&#32;offset,&#32;because&#32;that&#32;is&#32;picked</emphasis>
594 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;up&#32;at&#32;the&#32;top&#32;of&#32;the&#32;loop&#32;as&#32;the&#32;point&#32;at&#32;which&#32;to&#32;start&#32;again.</emphasis>
595 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis>
596 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;There&#32;are&#32;two&#32;complications:&#32;(a)&#32;When&#32;CRLF&#32;is&#32;a&#32;valid&#32;newline&#32;sequence,&#32;and</emphasis>
597 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;the&#32;current&#32;position&#32;is&#32;just&#32;before&#32;it,&#32;advance&#32;by&#32;an&#32;extra&#32;byte.&#32;(b)</emphasis>
598 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Otherwise&#32;we&#32;must&#32;ensure&#32;that&#32;we&#32;skip&#32;an&#32;entire&#32;UTF&#32;character&#32;if&#32;we&#32;are&#32;in</emphasis>
599 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;UTF&#32;mode.&#32;*/</emphasis>
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rc&#32;==&#32;PCRE2_ERROR_NOMATCH){
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(options&#32;==&#32;0)&#32;<emphasis class="keywordflow">break</emphasis>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;All&#32;matches&#32;found&#32;*/</emphasis>
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ovector[1]&#32;=&#32;start_offset&#32;+&#32;1;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Advance&#32;one&#32;code&#32;unit&#32;*/</emphasis>
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(crlf_is_newline&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;If&#32;CRLF&#32;is&#32;newline&#32;&amp;&#32;*/</emphasis>
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start_offset&#32;&lt;&#32;subject_length&#32;-&#32;1&#32;&amp;&amp;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;we&#32;are&#32;at&#32;CRLF,&#32;*/</emphasis>
606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subject[start_offset]&#32;==&#32;<emphasis class="charliteral">&apos;\r&apos;</emphasis>&#32;&amp;&amp;
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;subject[start_offset&#32;+&#32;1]&#32;==&#32;<emphasis class="charliteral">&apos;\n&apos;</emphasis>)
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ovector[1]&#32;+=&#32;1;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Advance&#32;by&#32;one&#32;more.&#32;*/</emphasis>
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>&#32;<emphasis class="keywordflow">if</emphasis>&#32;(utf8){&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;advance&#32;a&#32;whole&#32;UTF-8&#32;*/</emphasis>
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">while</emphasis>&#32;(ovector[1]&#32;&lt;&#32;subject_length){
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;((subject[ovector[1]]&#32;&amp;&#32;0xc0)&#32;!=&#32;0x80)&#32;<emphasis class="keywordflow">break</emphasis>;
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ovector[1]&#32;+=&#32;1;
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">continue</emphasis>;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Go&#32;round&#32;the&#32;loop&#32;again&#32;*/</emphasis>
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;Other&#32;matching&#32;errors&#32;are&#32;not&#32;recoverable.&#32;*/</emphasis>
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rc&#32;&lt;&#32;0){
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pcre2_match_data_free(match_data);
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">//pcre2_code_free(code);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//must&#32;not&#32;do&#32;this.&#32;This&#32;function&#32;has&#32;no&#32;right&#32;to&#32;modify&#32;regex.</emphasis>
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;count;
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;match&#32;succeded&#32;*/</emphasis>
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++count;&#32;<emphasis class="comment">//Increment&#32;the&#32;counter</emphasis>
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(rc&#32;==&#32;0){
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;The&#32;match&#32;succeeded,&#32;but&#32;the&#32;output&#32;vector&#32;wasn&apos;t&#32;big&#32;enough.&#32;This</emphasis>
631 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;should&#32;not&#32;happen.&#32;*/</emphasis>
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;count;
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;As&#32;before,&#32;get&#32;substrings&#32;stored&#32;in&#32;the&#32;output&#32;vector&#32;by&#32;number,&#32;and&#32;then</emphasis>
636 <emphasis class="comment">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;also&#32;any&#32;named&#32;substrings.&#32;*/</emphasis>
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(num_map0)&#32;getNumberedSubstrings(rc,match_data);
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;(namecount&#32;&lt;=&#32;0);&#32;&#32;<emphasis class="comment">/*No&#32;named&#32;substrings*/</emphasis>
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>{
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PCRE2_SPTR&#32;tabptr&#32;=&#32;name_table;
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(nas_map0&#32;||&#32;ntn_map0)&#32;getNamedSubstrings(namecount,name_entry_size,tabptr,match_data);
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_num)vec_num-&gt;push_back(*num_map0);
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_nas)vec_nas-&gt;push_back(*nas_map0);
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>(vec_ntn)vec_ntn-&gt;push_back(*ntn_map0);
654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
655 &#32;&#32;&#32;&#32;}&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">/*&#32;End&#32;of&#32;loop&#32;to&#32;find&#32;second&#32;and&#32;subsequent&#32;matches&#32;*/</emphasis>
656 
657 &#32;&#32;&#32;&#32;pcre2_match_data_free(match_data);
659 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">return</emphasis>&#32;count;
660 }
662 
663 &#32;
    </computeroutput></literallayout>
</section>
