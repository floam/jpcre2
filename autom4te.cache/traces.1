m4trace:m4/ax_cxx_compile_stdcxx.m4:47: -1- AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl
  m4_if([$1], [11], [],
        [$1], [14], [],
        [$1], [17], [m4_fatal([support for C++17 not yet implemented in AX_CXX_COMPILE_STDCXX])],
        [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl
  m4_if([$2], [], [],
        [$2], [ext], [],
        [$2], [noext], [],
        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX])])dnl
  m4_if([$3], [], [ax_cxx_compile_cxx$1_required=true],
        [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],
        [$3], [optional], [ax_cxx_compile_cxx$1_required=false],
        [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])
  AC_LANG_PUSH([C++])dnl
  ac_success=no
  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,
  ax_cv_cxx_compile_cxx$1,
  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
    [ax_cv_cxx_compile_cxx$1=yes],
    [ax_cv_cxx_compile_cxx$1=no])])
  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then
    ac_success=yes
  fi

  m4_if([$2], [noext], [], [dnl
  if test x$ac_success = xno; then
    for switch in -std=gnu++$1 -std=gnu++0x; do
      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])
      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,
                     $cachevar,
        [ac_save_CXXFLAGS="$CXXFLAGS"
         CXXFLAGS="$CXXFLAGS $switch"
         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
          [eval $cachevar=yes],
          [eval $cachevar=no])
         CXXFLAGS="$ac_save_CXXFLAGS"])
      if eval test x\$$cachevar = xyes; then
        CXXFLAGS="$CXXFLAGS $switch"
        ac_success=yes
        break
      fi
    done
  fi])

  m4_if([$2], [ext], [], [dnl
  if test x$ac_success = xno; then
    dnl HP's aCC needs +std=c++11 according to:
    dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf
    dnl Cray's crayCC needs "-h std=c++11"
    for switch in -std=c++$1 -std=c++0x +std=c++$1 "-h std=c++$1"; do
      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])
      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,
                     $cachevar,
        [ac_save_CXXFLAGS="$CXXFLAGS"
         CXXFLAGS="$CXXFLAGS $switch"
         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],
          [eval $cachevar=yes],
          [eval $cachevar=no])
         CXXFLAGS="$ac_save_CXXFLAGS"])
      if eval test x\$$cachevar = xyes; then
        CXXFLAGS="$CXXFLAGS $switch"
        ac_success=yes
        break
      fi
    done
  fi])
  AC_LANG_POP([C++])
  if test x$ax_cxx_compile_cxx$1_required = xtrue; then
    if test x$ac_success = xno; then
      AC_MSG_ERROR([*** A compiler with support for C++$1 language features is required.])
    fi
  else
    if test x$ac_success = xno; then
      HAVE_CXX$1=0
      AC_MSG_NOTICE([No compiler with C++$1 support was found])
    else
      HAVE_CXX$1=1
      AC_DEFINE(HAVE_CXX$1,1,
                [define if the compiler supports basic C++$1 syntax])
    fi

    AC_SUBST(HAVE_CXX$1)
  fi
])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:3: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:3: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:3: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^CXXFLAGS$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^CXX$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^ac_ct_CXX$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:8: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:12: -1- AX_CXX_COMPILE_STDCXX([11], [noext], [optional])
m4trace:configure.ac:12: -1- m4_pattern_allow([^HAVE_CXX11$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^HAVE_CXX11$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:19: -1- m4_pattern_allow([^HAVE__BOOL$])
m4trace:configure.ac:21: -1- m4_pattern_allow([^size_t$])
m4trace:configure.ac:22: -1- m4_pattern_allow([^_UINT32_T$])
m4trace:configure.ac:22: -1- m4_pattern_allow([^uint32_t$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^HAVE_STDLIB_H$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^HAVE_MALLOC$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^HAVE_MALLOC$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:25: -1- m4_pattern_allow([^malloc$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^HAVE_STDLIB_H$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^HAVE_REALLOC$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^HAVE_REALLOC$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:26: -1- m4_pattern_allow([^realloc$])
m4trace:configure.ac:27: -1- m4_pattern_allow([^HAVE_SETLOCALE$])
m4trace:configure.ac:29: -1- _m4_warn([obsolete], [AC_OUTPUT should be used without arguments.
You should run autoupdate.], [])
m4trace:configure.ac:29: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:29: -1- m4_pattern_allow([^LTLIBOBJS$])
